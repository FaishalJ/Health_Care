"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/node-appwrite";
exports.ids = ["vendor-chunks/node-appwrite"];
exports.modules = {

/***/ "(ssr)/./node_modules/node-appwrite/dist/client.mjs":
/*!****************************************************!*\
  !*** ./node_modules/node-appwrite/dist/client.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AppwriteException: () => (/* binding */ AppwriteException),\n/* harmony export */   Client: () => (/* binding */ Client),\n/* harmony export */   Query: () => (/* reexport safe */ _query_mjs__WEBPACK_IMPORTED_MODULE_2__.Query)\n/* harmony export */ });\n/* harmony import */ var node_fetch_native_with_agent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node-fetch-native-with-agent */ \"(ssr)/./node_modules/node-fetch-native-with-agent/dist/index.mjs\");\n/* harmony import */ var node_fetch_native_with_agent_agent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node-fetch-native-with-agent/agent */ \"(ssr)/./node_modules/node-fetch-native-with-agent/dist/agent.cjs\");\n/* harmony import */ var _query_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./query.mjs */ \"(ssr)/./node_modules/node-appwrite/dist/query.mjs\");\n\n\n\n\n// src/client.ts\nvar AppwriteException = class extends Error {\n  constructor(message, code = 0, type = \"\", response = \"\") {\n    super(message);\n    this.name = \"AppwriteException\";\n    this.message = message;\n    this.code = code;\n    this.type = type;\n    this.response = response;\n  }\n};\nfunction getUserAgent() {\n  let ua = \"AppwriteNodeJSSDK/17.0.0\";\n  const platform = [];\n  if (typeof process !== \"undefined\") {\n    if (typeof process.platform === \"string\")\n      platform.push(process.platform);\n    if (typeof process.arch === \"string\")\n      platform.push(process.arch);\n  }\n  if (platform.length > 0) {\n    ua += ` (${platform.join(\"; \")})`;\n  }\n  if (typeof navigator !== \"undefined\" && typeof navigator.userAgent === \"string\") {\n    ua += ` ${navigator.userAgent}`;\n  } else if (typeof globalThis.EdgeRuntime === \"string\") {\n    ua += ` EdgeRuntime`;\n  } else if (typeof process !== \"undefined\" && typeof process.version === \"string\") {\n    ua += ` Node.js/${process.version}`;\n  }\n  return ua;\n}\nvar _Client = class _Client {\n  constructor() {\n    this.config = {\n      endpoint: \"https://cloud.appwrite.io/v1\",\n      selfSigned: false,\n      project: \"\",\n      key: \"\",\n      jwt: \"\",\n      locale: \"\",\n      session: \"\",\n      forwardeduseragent: \"\"\n    };\n    this.headers = {\n      \"x-sdk-name\": \"Node.js\",\n      \"x-sdk-platform\": \"server\",\n      \"x-sdk-language\": \"nodejs\",\n      \"x-sdk-version\": \"17.0.0\",\n      \"user-agent\": getUserAgent(),\n      \"X-Appwrite-Response-Format\": \"1.7.0\"\n    };\n  }\n  /**\n   * Set Endpoint\n   *\n   * Your project endpoint\n   *\n   * @param {string} endpoint\n   *\n   * @returns {this}\n   */\n  setEndpoint(endpoint) {\n    if (!endpoint.startsWith(\"http://\") && !endpoint.startsWith(\"https://\")) {\n      throw new AppwriteException(\"Invalid endpoint URL: \" + endpoint);\n    }\n    this.config.endpoint = endpoint;\n    return this;\n  }\n  /**\n   * Set self-signed\n   *\n   * @param {boolean} selfSigned\n   *\n   * @returns {this}\n   */\n  setSelfSigned(selfSigned) {\n    if (typeof globalThis.EdgeRuntime !== \"undefined\") {\n      console.warn(\"setSelfSigned is not supported in edge runtimes.\");\n    }\n    this.config.selfSigned = selfSigned;\n    return this;\n  }\n  /**\n   * Add header\n   *\n   * @param {string} header\n   * @param {string} value\n   *\n   * @returns {this}\n   */\n  addHeader(header, value) {\n    this.headers[header.toLowerCase()] = value;\n    return this;\n  }\n  /**\n   * Set Project\n   *\n   * Your project ID\n   *\n   * @param value string\n   *\n   * @return {this}\n   */\n  setProject(value) {\n    this.headers[\"X-Appwrite-Project\"] = value;\n    this.config.project = value;\n    return this;\n  }\n  /**\n   * Set Key\n   *\n   * Your secret API key\n   *\n   * @param value string\n   *\n   * @return {this}\n   */\n  setKey(value) {\n    this.headers[\"X-Appwrite-Key\"] = value;\n    this.config.key = value;\n    return this;\n  }\n  /**\n   * Set JWT\n   *\n   * Your secret JSON Web Token\n   *\n   * @param value string\n   *\n   * @return {this}\n   */\n  setJWT(value) {\n    this.headers[\"X-Appwrite-JWT\"] = value;\n    this.config.jwt = value;\n    return this;\n  }\n  /**\n   * Set Locale\n   *\n   * @param value string\n   *\n   * @return {this}\n   */\n  setLocale(value) {\n    this.headers[\"X-Appwrite-Locale\"] = value;\n    this.config.locale = value;\n    return this;\n  }\n  /**\n   * Set Session\n   *\n   * The user session to authenticate with\n   *\n   * @param value string\n   *\n   * @return {this}\n   */\n  setSession(value) {\n    this.headers[\"X-Appwrite-Session\"] = value;\n    this.config.session = value;\n    return this;\n  }\n  /**\n   * Set ForwardedUserAgent\n   *\n   * The user agent string of the client that made the request\n   *\n   * @param value string\n   *\n   * @return {this}\n   */\n  setForwardedUserAgent(value) {\n    this.headers[\"X-Forwarded-User-Agent\"] = value;\n    this.config.forwardeduseragent = value;\n    return this;\n  }\n  prepareRequest(method, url, headers = {}, params = {}) {\n    method = method.toUpperCase();\n    headers = Object.assign({}, this.headers, headers);\n    let options = {\n      method,\n      headers,\n      ...(0,node_fetch_native_with_agent_agent__WEBPACK_IMPORTED_MODULE_1__.createAgent)(this.config.endpoint, { rejectUnauthorized: !this.config.selfSigned })\n    };\n    if (method === \"GET\") {\n      for (const [key, value] of Object.entries(_Client.flatten(params))) {\n        url.searchParams.append(key, value);\n      }\n    } else {\n      switch (headers[\"content-type\"]) {\n        case \"application/json\":\n          options.body = JSON.stringify(params);\n          break;\n        case \"multipart/form-data\":\n          const formData = new node_fetch_native_with_agent__WEBPACK_IMPORTED_MODULE_0__.FormData();\n          for (const [key, value] of Object.entries(params)) {\n            if (value instanceof node_fetch_native_with_agent__WEBPACK_IMPORTED_MODULE_0__.File) {\n              formData.append(key, value, value.name);\n            } else if (Array.isArray(value)) {\n              for (const nestedValue of value) {\n                formData.append(`${key}[]`, nestedValue);\n              }\n            } else {\n              formData.append(key, value);\n            }\n          }\n          options.body = formData;\n          delete headers[\"content-type\"];\n          break;\n      }\n    }\n    return { uri: url.toString(), options };\n  }\n  async chunkedUpload(method, url, headers = {}, originalPayload = {}, onProgress) {\n    const file = Object.values(originalPayload).find((value) => value instanceof node_fetch_native_with_agent__WEBPACK_IMPORTED_MODULE_0__.File);\n    if (!file) {\n      throw new Error(\"File not found in payload\");\n    }\n    if (file.size <= _Client.CHUNK_SIZE) {\n      return await this.call(method, url, headers, originalPayload);\n    }\n    let start = 0;\n    let response = null;\n    while (start < file.size) {\n      let end = start + _Client.CHUNK_SIZE;\n      if (end >= file.size) {\n        end = file.size;\n      }\n      headers[\"content-range\"] = `bytes ${start}-${end - 1}/${file.size}`;\n      const chunk = file.slice(start, end);\n      let payload = { ...originalPayload, file: new node_fetch_native_with_agent__WEBPACK_IMPORTED_MODULE_0__.File([chunk], file.name) };\n      response = await this.call(method, url, headers, payload);\n      if (onProgress && typeof onProgress === \"function\") {\n        onProgress({\n          $id: response.$id,\n          progress: Math.round(end / file.size * 100),\n          sizeUploaded: end,\n          chunksTotal: Math.ceil(file.size / _Client.CHUNK_SIZE),\n          chunksUploaded: Math.ceil(end / _Client.CHUNK_SIZE)\n        });\n      }\n      if (response && response.$id) {\n        headers[\"x-appwrite-id\"] = response.$id;\n      }\n      start = end;\n    }\n    return response;\n  }\n  async ping() {\n    return this.call(\"GET\", new URL(this.config.endpoint + \"/ping\"));\n  }\n  async redirect(method, url, headers = {}, params = {}) {\n    const { uri, options } = this.prepareRequest(method, url, headers, params);\n    const response = await (0,node_fetch_native_with_agent__WEBPACK_IMPORTED_MODULE_0__.fetch)(uri, {\n      ...options,\n      redirect: \"manual\"\n    });\n    if (response.status !== 301 && response.status !== 302) {\n      throw new AppwriteException(\"Invalid redirect\", response.status);\n    }\n    return response.headers.get(\"location\") || \"\";\n  }\n  async call(method, url, headers = {}, params = {}, responseType = \"json\") {\n    var _a, _b;\n    const { uri, options } = this.prepareRequest(method, url, headers, params);\n    let data = null;\n    const response = await (0,node_fetch_native_with_agent__WEBPACK_IMPORTED_MODULE_0__.fetch)(uri, options);\n    const warnings = response.headers.get(\"x-appwrite-warning\");\n    if (warnings) {\n      warnings.split(\";\").forEach((warning) => console.warn(\"Warning: \" + warning));\n    }\n    if ((_a = response.headers.get(\"content-type\")) == null ? void 0 : _a.includes(\"application/json\")) {\n      data = await response.json();\n    } else if (responseType === \"arrayBuffer\") {\n      data = await response.arrayBuffer();\n    } else {\n      data = {\n        message: await response.text()\n      };\n    }\n    if (400 <= response.status) {\n      let responseText = \"\";\n      if (((_b = response.headers.get(\"content-type\")) == null ? void 0 : _b.includes(\"application/json\")) || responseType === \"arrayBuffer\") {\n        responseText = JSON.stringify(data);\n      } else {\n        responseText = data == null ? void 0 : data.message;\n      }\n      throw new AppwriteException(data == null ? void 0 : data.message, response.status, data == null ? void 0 : data.type, responseText);\n    }\n    return data;\n  }\n  static flatten(data, prefix = \"\") {\n    let output = {};\n    for (const [key, value] of Object.entries(data)) {\n      let finalKey = prefix ? prefix + \"[\" + key + \"]\" : key;\n      if (Array.isArray(value)) {\n        output = { ...output, ..._Client.flatten(value, finalKey) };\n      } else {\n        output[finalKey] = value;\n      }\n    }\n    return output;\n  }\n};\n_Client.CHUNK_SIZE = 1024 * 1024 * 5;\nvar Client = _Client;\n\n\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=client.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-appwrite/dist/client.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-appwrite/dist/enums/adapter.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/node-appwrite/dist/enums/adapter.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Adapter: () => (/* binding */ Adapter)\n/* harmony export */ });\n// src/enums/adapter.ts\nvar Adapter = /* @__PURE__ */ ((Adapter2) => {\n  Adapter2[\"Static\"] = \"static\";\n  Adapter2[\"Ssr\"] = \"ssr\";\n  return Adapter2;\n})(Adapter || {});\n\n\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=adapter.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L2VudW1zL2FkYXB0ZXIubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxlQUFlOztBQUVHO0FBQ25CO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2Uvbm9kZV9tb2R1bGVzL25vZGUtYXBwd3JpdGUvZGlzdC9lbnVtcy9hZGFwdGVyLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvZW51bXMvYWRhcHRlci50c1xudmFyIEFkYXB0ZXIgPSAvKiBAX19QVVJFX18gKi8gKChBZGFwdGVyMikgPT4ge1xuICBBZGFwdGVyMltcIlN0YXRpY1wiXSA9IFwic3RhdGljXCI7XG4gIEFkYXB0ZXIyW1wiU3NyXCJdID0gXCJzc3JcIjtcbiAgcmV0dXJuIEFkYXB0ZXIyO1xufSkoQWRhcHRlciB8fCB7fSk7XG5cbmV4cG9ydCB7IEFkYXB0ZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW91dC5qcy5tYXBcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFkYXB0ZXIubWpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-appwrite/dist/enums/adapter.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-appwrite/dist/enums/authentication-factor.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/node-appwrite/dist/enums/authentication-factor.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthenticationFactor: () => (/* binding */ AuthenticationFactor)\n/* harmony export */ });\n// src/enums/authentication-factor.ts\nvar AuthenticationFactor = /* @__PURE__ */ ((AuthenticationFactor2) => {\n  AuthenticationFactor2[\"Email\"] = \"email\";\n  AuthenticationFactor2[\"Phone\"] = \"phone\";\n  AuthenticationFactor2[\"Totp\"] = \"totp\";\n  AuthenticationFactor2[\"Recoverycode\"] = \"recoverycode\";\n  return AuthenticationFactor2;\n})(AuthenticationFactor || {});\n\n\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=authentication-factor.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L2VudW1zL2F1dGhlbnRpY2F0aW9uLWZhY3Rvci5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyw0QkFBNEI7O0FBRUc7QUFDaEM7QUFDQSIsInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L2VudW1zL2F1dGhlbnRpY2F0aW9uLWZhY3Rvci5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2VudW1zL2F1dGhlbnRpY2F0aW9uLWZhY3Rvci50c1xudmFyIEF1dGhlbnRpY2F0aW9uRmFjdG9yID0gLyogQF9fUFVSRV9fICovICgoQXV0aGVudGljYXRpb25GYWN0b3IyKSA9PiB7XG4gIEF1dGhlbnRpY2F0aW9uRmFjdG9yMltcIkVtYWlsXCJdID0gXCJlbWFpbFwiO1xuICBBdXRoZW50aWNhdGlvbkZhY3RvcjJbXCJQaG9uZVwiXSA9IFwicGhvbmVcIjtcbiAgQXV0aGVudGljYXRpb25GYWN0b3IyW1wiVG90cFwiXSA9IFwidG90cFwiO1xuICBBdXRoZW50aWNhdGlvbkZhY3RvcjJbXCJSZWNvdmVyeWNvZGVcIl0gPSBcInJlY292ZXJ5Y29kZVwiO1xuICByZXR1cm4gQXV0aGVudGljYXRpb25GYWN0b3IyO1xufSkoQXV0aGVudGljYXRpb25GYWN0b3IgfHwge30pO1xuXG5leHBvcnQgeyBBdXRoZW50aWNhdGlvbkZhY3RvciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b3V0LmpzLm1hcFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXV0aGVudGljYXRpb24tZmFjdG9yLm1qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-appwrite/dist/enums/authentication-factor.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-appwrite/dist/enums/authenticator-type.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/node-appwrite/dist/enums/authenticator-type.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthenticatorType: () => (/* binding */ AuthenticatorType)\n/* harmony export */ });\n// src/enums/authenticator-type.ts\nvar AuthenticatorType = /* @__PURE__ */ ((AuthenticatorType2) => {\n  AuthenticatorType2[\"Totp\"] = \"totp\";\n  return AuthenticatorType2;\n})(AuthenticatorType || {});\n\n\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=authenticator-type.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L2VudW1zL2F1dGhlbnRpY2F0b3ItdHlwZS5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyx5QkFBeUI7O0FBRUc7QUFDN0I7QUFDQSIsInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L2VudW1zL2F1dGhlbnRpY2F0b3ItdHlwZS5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2VudW1zL2F1dGhlbnRpY2F0b3ItdHlwZS50c1xudmFyIEF1dGhlbnRpY2F0b3JUeXBlID0gLyogQF9fUFVSRV9fICovICgoQXV0aGVudGljYXRvclR5cGUyKSA9PiB7XG4gIEF1dGhlbnRpY2F0b3JUeXBlMltcIlRvdHBcIl0gPSBcInRvdHBcIjtcbiAgcmV0dXJuIEF1dGhlbnRpY2F0b3JUeXBlMjtcbn0pKEF1dGhlbnRpY2F0b3JUeXBlIHx8IHt9KTtcblxuZXhwb3J0IHsgQXV0aGVudGljYXRvclR5cGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW91dC5qcy5tYXBcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWF1dGhlbnRpY2F0b3ItdHlwZS5tanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-appwrite/dist/enums/authenticator-type.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-appwrite/dist/enums/browser.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/node-appwrite/dist/enums/browser.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Browser: () => (/* binding */ Browser)\n/* harmony export */ });\n// src/enums/browser.ts\nvar Browser = /* @__PURE__ */ ((Browser2) => {\n  Browser2[\"AvantBrowser\"] = \"aa\";\n  Browser2[\"AndroidWebViewBeta\"] = \"an\";\n  Browser2[\"GoogleChrome\"] = \"ch\";\n  Browser2[\"GoogleChromeIOS\"] = \"ci\";\n  Browser2[\"GoogleChromeMobile\"] = \"cm\";\n  Browser2[\"Chromium\"] = \"cr\";\n  Browser2[\"MozillaFirefox\"] = \"ff\";\n  Browser2[\"Safari\"] = \"sf\";\n  Browser2[\"MobileSafari\"] = \"mf\";\n  Browser2[\"MicrosoftEdge\"] = \"ps\";\n  Browser2[\"MicrosoftEdgeIOS\"] = \"oi\";\n  Browser2[\"OperaMini\"] = \"om\";\n  Browser2[\"Opera\"] = \"op\";\n  Browser2[\"OperaNext\"] = \"on\";\n  return Browser2;\n})(Browser || {});\n\n\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=browser.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L2VudW1zL2Jyb3dzZXIubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxlQUFlOztBQUVHO0FBQ25CO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2Uvbm9kZV9tb2R1bGVzL25vZGUtYXBwd3JpdGUvZGlzdC9lbnVtcy9icm93c2VyLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvZW51bXMvYnJvd3Nlci50c1xudmFyIEJyb3dzZXIgPSAvKiBAX19QVVJFX18gKi8gKChCcm93c2VyMikgPT4ge1xuICBCcm93c2VyMltcIkF2YW50QnJvd3NlclwiXSA9IFwiYWFcIjtcbiAgQnJvd3NlcjJbXCJBbmRyb2lkV2ViVmlld0JldGFcIl0gPSBcImFuXCI7XG4gIEJyb3dzZXIyW1wiR29vZ2xlQ2hyb21lXCJdID0gXCJjaFwiO1xuICBCcm93c2VyMltcIkdvb2dsZUNocm9tZUlPU1wiXSA9IFwiY2lcIjtcbiAgQnJvd3NlcjJbXCJHb29nbGVDaHJvbWVNb2JpbGVcIl0gPSBcImNtXCI7XG4gIEJyb3dzZXIyW1wiQ2hyb21pdW1cIl0gPSBcImNyXCI7XG4gIEJyb3dzZXIyW1wiTW96aWxsYUZpcmVmb3hcIl0gPSBcImZmXCI7XG4gIEJyb3dzZXIyW1wiU2FmYXJpXCJdID0gXCJzZlwiO1xuICBCcm93c2VyMltcIk1vYmlsZVNhZmFyaVwiXSA9IFwibWZcIjtcbiAgQnJvd3NlcjJbXCJNaWNyb3NvZnRFZGdlXCJdID0gXCJwc1wiO1xuICBCcm93c2VyMltcIk1pY3Jvc29mdEVkZ2VJT1NcIl0gPSBcIm9pXCI7XG4gIEJyb3dzZXIyW1wiT3BlcmFNaW5pXCJdID0gXCJvbVwiO1xuICBCcm93c2VyMltcIk9wZXJhXCJdID0gXCJvcFwiO1xuICBCcm93c2VyMltcIk9wZXJhTmV4dFwiXSA9IFwib25cIjtcbiAgcmV0dXJuIEJyb3dzZXIyO1xufSkoQnJvd3NlciB8fCB7fSk7XG5cbmV4cG9ydCB7IEJyb3dzZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW91dC5qcy5tYXBcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJyb3dzZXIubWpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-appwrite/dist/enums/browser.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-appwrite/dist/enums/build-runtime.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/node-appwrite/dist/enums/build-runtime.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BuildRuntime: () => (/* binding */ BuildRuntime)\n/* harmony export */ });\n// src/enums/build-runtime.ts\nvar BuildRuntime = /* @__PURE__ */ ((BuildRuntime2) => {\n  BuildRuntime2[\"Node145\"] = \"node-14.5\";\n  BuildRuntime2[\"Node160\"] = \"node-16.0\";\n  BuildRuntime2[\"Node180\"] = \"node-18.0\";\n  BuildRuntime2[\"Node190\"] = \"node-19.0\";\n  BuildRuntime2[\"Node200\"] = \"node-20.0\";\n  BuildRuntime2[\"Node210\"] = \"node-21.0\";\n  BuildRuntime2[\"Node22\"] = \"node-22\";\n  BuildRuntime2[\"Php80\"] = \"php-8.0\";\n  BuildRuntime2[\"Php81\"] = \"php-8.1\";\n  BuildRuntime2[\"Php82\"] = \"php-8.2\";\n  BuildRuntime2[\"Php83\"] = \"php-8.3\";\n  BuildRuntime2[\"Ruby30\"] = \"ruby-3.0\";\n  BuildRuntime2[\"Ruby31\"] = \"ruby-3.1\";\n  BuildRuntime2[\"Ruby32\"] = \"ruby-3.2\";\n  BuildRuntime2[\"Ruby33\"] = \"ruby-3.3\";\n  BuildRuntime2[\"Python38\"] = \"python-3.8\";\n  BuildRuntime2[\"Python39\"] = \"python-3.9\";\n  BuildRuntime2[\"Python310\"] = \"python-3.10\";\n  BuildRuntime2[\"Python311\"] = \"python-3.11\";\n  BuildRuntime2[\"Python312\"] = \"python-3.12\";\n  BuildRuntime2[\"Pythonml311\"] = \"python-ml-3.11\";\n  BuildRuntime2[\"Pythonml312\"] = \"python-ml-3.12\";\n  BuildRuntime2[\"Deno121\"] = \"deno-1.21\";\n  BuildRuntime2[\"Deno124\"] = \"deno-1.24\";\n  BuildRuntime2[\"Deno135\"] = \"deno-1.35\";\n  BuildRuntime2[\"Deno140\"] = \"deno-1.40\";\n  BuildRuntime2[\"Deno146\"] = \"deno-1.46\";\n  BuildRuntime2[\"Deno20\"] = \"deno-2.0\";\n  BuildRuntime2[\"Dart215\"] = \"dart-2.15\";\n  BuildRuntime2[\"Dart216\"] = \"dart-2.16\";\n  BuildRuntime2[\"Dart217\"] = \"dart-2.17\";\n  BuildRuntime2[\"Dart218\"] = \"dart-2.18\";\n  BuildRuntime2[\"Dart219\"] = \"dart-2.19\";\n  BuildRuntime2[\"Dart30\"] = \"dart-3.0\";\n  BuildRuntime2[\"Dart31\"] = \"dart-3.1\";\n  BuildRuntime2[\"Dart33\"] = \"dart-3.3\";\n  BuildRuntime2[\"Dart35\"] = \"dart-3.5\";\n  BuildRuntime2[\"Dotnet60\"] = \"dotnet-6.0\";\n  BuildRuntime2[\"Dotnet70\"] = \"dotnet-7.0\";\n  BuildRuntime2[\"Dotnet80\"] = \"dotnet-8.0\";\n  BuildRuntime2[\"Java80\"] = \"java-8.0\";\n  BuildRuntime2[\"Java110\"] = \"java-11.0\";\n  BuildRuntime2[\"Java170\"] = \"java-17.0\";\n  BuildRuntime2[\"Java180\"] = \"java-18.0\";\n  BuildRuntime2[\"Java210\"] = \"java-21.0\";\n  BuildRuntime2[\"Java22\"] = \"java-22\";\n  BuildRuntime2[\"Swift55\"] = \"swift-5.5\";\n  BuildRuntime2[\"Swift58\"] = \"swift-5.8\";\n  BuildRuntime2[\"Swift59\"] = \"swift-5.9\";\n  BuildRuntime2[\"Swift510\"] = \"swift-5.10\";\n  BuildRuntime2[\"Kotlin16\"] = \"kotlin-1.6\";\n  BuildRuntime2[\"Kotlin18\"] = \"kotlin-1.8\";\n  BuildRuntime2[\"Kotlin19\"] = \"kotlin-1.9\";\n  BuildRuntime2[\"Kotlin20\"] = \"kotlin-2.0\";\n  BuildRuntime2[\"Cpp17\"] = \"cpp-17\";\n  BuildRuntime2[\"Cpp20\"] = \"cpp-20\";\n  BuildRuntime2[\"Bun10\"] = \"bun-1.0\";\n  BuildRuntime2[\"Bun11\"] = \"bun-1.1\";\n  BuildRuntime2[\"Go123\"] = \"go-1.23\";\n  BuildRuntime2[\"Static1\"] = \"static-1\";\n  BuildRuntime2[\"Flutter324\"] = \"flutter-3.24\";\n  BuildRuntime2[\"Flutter327\"] = \"flutter-3.27\";\n  BuildRuntime2[\"Flutter329\"] = \"flutter-3.29\";\n  return BuildRuntime2;\n})(BuildRuntime || {});\n\n\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=build-runtime.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L2VudW1zL2J1aWxkLXJ1bnRpbWUubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLG9CQUFvQjs7QUFFRztBQUN4QjtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2Rpc3QvZW51bXMvYnVpbGQtcnVudGltZS5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2VudW1zL2J1aWxkLXJ1bnRpbWUudHNcbnZhciBCdWlsZFJ1bnRpbWUgPSAvKiBAX19QVVJFX18gKi8gKChCdWlsZFJ1bnRpbWUyKSA9PiB7XG4gIEJ1aWxkUnVudGltZTJbXCJOb2RlMTQ1XCJdID0gXCJub2RlLTE0LjVcIjtcbiAgQnVpbGRSdW50aW1lMltcIk5vZGUxNjBcIl0gPSBcIm5vZGUtMTYuMFwiO1xuICBCdWlsZFJ1bnRpbWUyW1wiTm9kZTE4MFwiXSA9IFwibm9kZS0xOC4wXCI7XG4gIEJ1aWxkUnVudGltZTJbXCJOb2RlMTkwXCJdID0gXCJub2RlLTE5LjBcIjtcbiAgQnVpbGRSdW50aW1lMltcIk5vZGUyMDBcIl0gPSBcIm5vZGUtMjAuMFwiO1xuICBCdWlsZFJ1bnRpbWUyW1wiTm9kZTIxMFwiXSA9IFwibm9kZS0yMS4wXCI7XG4gIEJ1aWxkUnVudGltZTJbXCJOb2RlMjJcIl0gPSBcIm5vZGUtMjJcIjtcbiAgQnVpbGRSdW50aW1lMltcIlBocDgwXCJdID0gXCJwaHAtOC4wXCI7XG4gIEJ1aWxkUnVudGltZTJbXCJQaHA4MVwiXSA9IFwicGhwLTguMVwiO1xuICBCdWlsZFJ1bnRpbWUyW1wiUGhwODJcIl0gPSBcInBocC04LjJcIjtcbiAgQnVpbGRSdW50aW1lMltcIlBocDgzXCJdID0gXCJwaHAtOC4zXCI7XG4gIEJ1aWxkUnVudGltZTJbXCJSdWJ5MzBcIl0gPSBcInJ1YnktMy4wXCI7XG4gIEJ1aWxkUnVudGltZTJbXCJSdWJ5MzFcIl0gPSBcInJ1YnktMy4xXCI7XG4gIEJ1aWxkUnVudGltZTJbXCJSdWJ5MzJcIl0gPSBcInJ1YnktMy4yXCI7XG4gIEJ1aWxkUnVudGltZTJbXCJSdWJ5MzNcIl0gPSBcInJ1YnktMy4zXCI7XG4gIEJ1aWxkUnVudGltZTJbXCJQeXRob24zOFwiXSA9IFwicHl0aG9uLTMuOFwiO1xuICBCdWlsZFJ1bnRpbWUyW1wiUHl0aG9uMzlcIl0gPSBcInB5dGhvbi0zLjlcIjtcbiAgQnVpbGRSdW50aW1lMltcIlB5dGhvbjMxMFwiXSA9IFwicHl0aG9uLTMuMTBcIjtcbiAgQnVpbGRSdW50aW1lMltcIlB5dGhvbjMxMVwiXSA9IFwicHl0aG9uLTMuMTFcIjtcbiAgQnVpbGRSdW50aW1lMltcIlB5dGhvbjMxMlwiXSA9IFwicHl0aG9uLTMuMTJcIjtcbiAgQnVpbGRSdW50aW1lMltcIlB5dGhvbm1sMzExXCJdID0gXCJweXRob24tbWwtMy4xMVwiO1xuICBCdWlsZFJ1bnRpbWUyW1wiUHl0aG9ubWwzMTJcIl0gPSBcInB5dGhvbi1tbC0zLjEyXCI7XG4gIEJ1aWxkUnVudGltZTJbXCJEZW5vMTIxXCJdID0gXCJkZW5vLTEuMjFcIjtcbiAgQnVpbGRSdW50aW1lMltcIkRlbm8xMjRcIl0gPSBcImRlbm8tMS4yNFwiO1xuICBCdWlsZFJ1bnRpbWUyW1wiRGVubzEzNVwiXSA9IFwiZGVuby0xLjM1XCI7XG4gIEJ1aWxkUnVudGltZTJbXCJEZW5vMTQwXCJdID0gXCJkZW5vLTEuNDBcIjtcbiAgQnVpbGRSdW50aW1lMltcIkRlbm8xNDZcIl0gPSBcImRlbm8tMS40NlwiO1xuICBCdWlsZFJ1bnRpbWUyW1wiRGVubzIwXCJdID0gXCJkZW5vLTIuMFwiO1xuICBCdWlsZFJ1bnRpbWUyW1wiRGFydDIxNVwiXSA9IFwiZGFydC0yLjE1XCI7XG4gIEJ1aWxkUnVudGltZTJbXCJEYXJ0MjE2XCJdID0gXCJkYXJ0LTIuMTZcIjtcbiAgQnVpbGRSdW50aW1lMltcIkRhcnQyMTdcIl0gPSBcImRhcnQtMi4xN1wiO1xuICBCdWlsZFJ1bnRpbWUyW1wiRGFydDIxOFwiXSA9IFwiZGFydC0yLjE4XCI7XG4gIEJ1aWxkUnVudGltZTJbXCJEYXJ0MjE5XCJdID0gXCJkYXJ0LTIuMTlcIjtcbiAgQnVpbGRSdW50aW1lMltcIkRhcnQzMFwiXSA9IFwiZGFydC0zLjBcIjtcbiAgQnVpbGRSdW50aW1lMltcIkRhcnQzMVwiXSA9IFwiZGFydC0zLjFcIjtcbiAgQnVpbGRSdW50aW1lMltcIkRhcnQzM1wiXSA9IFwiZGFydC0zLjNcIjtcbiAgQnVpbGRSdW50aW1lMltcIkRhcnQzNVwiXSA9IFwiZGFydC0zLjVcIjtcbiAgQnVpbGRSdW50aW1lMltcIkRvdG5ldDYwXCJdID0gXCJkb3RuZXQtNi4wXCI7XG4gIEJ1aWxkUnVudGltZTJbXCJEb3RuZXQ3MFwiXSA9IFwiZG90bmV0LTcuMFwiO1xuICBCdWlsZFJ1bnRpbWUyW1wiRG90bmV0ODBcIl0gPSBcImRvdG5ldC04LjBcIjtcbiAgQnVpbGRSdW50aW1lMltcIkphdmE4MFwiXSA9IFwiamF2YS04LjBcIjtcbiAgQnVpbGRSdW50aW1lMltcIkphdmExMTBcIl0gPSBcImphdmEtMTEuMFwiO1xuICBCdWlsZFJ1bnRpbWUyW1wiSmF2YTE3MFwiXSA9IFwiamF2YS0xNy4wXCI7XG4gIEJ1aWxkUnVudGltZTJbXCJKYXZhMTgwXCJdID0gXCJqYXZhLTE4LjBcIjtcbiAgQnVpbGRSdW50aW1lMltcIkphdmEyMTBcIl0gPSBcImphdmEtMjEuMFwiO1xuICBCdWlsZFJ1bnRpbWUyW1wiSmF2YTIyXCJdID0gXCJqYXZhLTIyXCI7XG4gIEJ1aWxkUnVudGltZTJbXCJTd2lmdDU1XCJdID0gXCJzd2lmdC01LjVcIjtcbiAgQnVpbGRSdW50aW1lMltcIlN3aWZ0NThcIl0gPSBcInN3aWZ0LTUuOFwiO1xuICBCdWlsZFJ1bnRpbWUyW1wiU3dpZnQ1OVwiXSA9IFwic3dpZnQtNS45XCI7XG4gIEJ1aWxkUnVudGltZTJbXCJTd2lmdDUxMFwiXSA9IFwic3dpZnQtNS4xMFwiO1xuICBCdWlsZFJ1bnRpbWUyW1wiS290bGluMTZcIl0gPSBcImtvdGxpbi0xLjZcIjtcbiAgQnVpbGRSdW50aW1lMltcIktvdGxpbjE4XCJdID0gXCJrb3RsaW4tMS44XCI7XG4gIEJ1aWxkUnVudGltZTJbXCJLb3RsaW4xOVwiXSA9IFwia290bGluLTEuOVwiO1xuICBCdWlsZFJ1bnRpbWUyW1wiS290bGluMjBcIl0gPSBcImtvdGxpbi0yLjBcIjtcbiAgQnVpbGRSdW50aW1lMltcIkNwcDE3XCJdID0gXCJjcHAtMTdcIjtcbiAgQnVpbGRSdW50aW1lMltcIkNwcDIwXCJdID0gXCJjcHAtMjBcIjtcbiAgQnVpbGRSdW50aW1lMltcIkJ1bjEwXCJdID0gXCJidW4tMS4wXCI7XG4gIEJ1aWxkUnVudGltZTJbXCJCdW4xMVwiXSA9IFwiYnVuLTEuMVwiO1xuICBCdWlsZFJ1bnRpbWUyW1wiR28xMjNcIl0gPSBcImdvLTEuMjNcIjtcbiAgQnVpbGRSdW50aW1lMltcIlN0YXRpYzFcIl0gPSBcInN0YXRpYy0xXCI7XG4gIEJ1aWxkUnVudGltZTJbXCJGbHV0dGVyMzI0XCJdID0gXCJmbHV0dGVyLTMuMjRcIjtcbiAgQnVpbGRSdW50aW1lMltcIkZsdXR0ZXIzMjdcIl0gPSBcImZsdXR0ZXItMy4yN1wiO1xuICBCdWlsZFJ1bnRpbWUyW1wiRmx1dHRlcjMyOVwiXSA9IFwiZmx1dHRlci0zLjI5XCI7XG4gIHJldHVybiBCdWlsZFJ1bnRpbWUyO1xufSkoQnVpbGRSdW50aW1lIHx8IHt9KTtcblxuZXhwb3J0IHsgQnVpbGRSdW50aW1lIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vdXQuanMubWFwXG4vLyMgc291cmNlTWFwcGluZ1VSTD1idWlsZC1ydW50aW1lLm1qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-appwrite/dist/enums/build-runtime.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-appwrite/dist/enums/compression.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/node-appwrite/dist/enums/compression.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Compression: () => (/* binding */ Compression)\n/* harmony export */ });\n// src/enums/compression.ts\nvar Compression = /* @__PURE__ */ ((Compression2) => {\n  Compression2[\"None\"] = \"none\";\n  Compression2[\"Gzip\"] = \"gzip\";\n  Compression2[\"Zstd\"] = \"zstd\";\n  return Compression2;\n})(Compression || {});\n\n\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=compression.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L2VudW1zL2NvbXByZXNzaW9uLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxtQkFBbUI7O0FBRUc7QUFDdkI7QUFDQSIsInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L2VudW1zL2NvbXByZXNzaW9uLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvZW51bXMvY29tcHJlc3Npb24udHNcbnZhciBDb21wcmVzc2lvbiA9IC8qIEBfX1BVUkVfXyAqLyAoKENvbXByZXNzaW9uMikgPT4ge1xuICBDb21wcmVzc2lvbjJbXCJOb25lXCJdID0gXCJub25lXCI7XG4gIENvbXByZXNzaW9uMltcIkd6aXBcIl0gPSBcImd6aXBcIjtcbiAgQ29tcHJlc3Npb24yW1wiWnN0ZFwiXSA9IFwienN0ZFwiO1xuICByZXR1cm4gQ29tcHJlc3Npb24yO1xufSkoQ29tcHJlc3Npb24gfHwge30pO1xuXG5leHBvcnQgeyBDb21wcmVzc2lvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b3V0LmpzLm1hcFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tcHJlc3Npb24ubWpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-appwrite/dist/enums/compression.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-appwrite/dist/enums/credit-card.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/node-appwrite/dist/enums/credit-card.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CreditCard: () => (/* binding */ CreditCard)\n/* harmony export */ });\n// src/enums/credit-card.ts\nvar CreditCard = /* @__PURE__ */ ((CreditCard2) => {\n  CreditCard2[\"AmericanExpress\"] = \"amex\";\n  CreditCard2[\"Argencard\"] = \"argencard\";\n  CreditCard2[\"Cabal\"] = \"cabal\";\n  CreditCard2[\"Cencosud\"] = \"cencosud\";\n  CreditCard2[\"DinersClub\"] = \"diners\";\n  CreditCard2[\"Discover\"] = \"discover\";\n  CreditCard2[\"Elo\"] = \"elo\";\n  CreditCard2[\"Hipercard\"] = \"hipercard\";\n  CreditCard2[\"JCB\"] = \"jcb\";\n  CreditCard2[\"Mastercard\"] = \"mastercard\";\n  CreditCard2[\"Naranja\"] = \"naranja\";\n  CreditCard2[\"TarjetaShopping\"] = \"targeta-shopping\";\n  CreditCard2[\"UnionChinaPay\"] = \"union-china-pay\";\n  CreditCard2[\"Visa\"] = \"visa\";\n  CreditCard2[\"MIR\"] = \"mir\";\n  CreditCard2[\"Maestro\"] = \"maestro\";\n  CreditCard2[\"Rupay\"] = \"rupay\";\n  return CreditCard2;\n})(CreditCard || {});\n\n\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=credit-card.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L2VudW1zL2NyZWRpdC1jYXJkLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsa0JBQWtCOztBQUVHO0FBQ3RCO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2Uvbm9kZV9tb2R1bGVzL25vZGUtYXBwd3JpdGUvZGlzdC9lbnVtcy9jcmVkaXQtY2FyZC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2VudW1zL2NyZWRpdC1jYXJkLnRzXG52YXIgQ3JlZGl0Q2FyZCA9IC8qIEBfX1BVUkVfXyAqLyAoKENyZWRpdENhcmQyKSA9PiB7XG4gIENyZWRpdENhcmQyW1wiQW1lcmljYW5FeHByZXNzXCJdID0gXCJhbWV4XCI7XG4gIENyZWRpdENhcmQyW1wiQXJnZW5jYXJkXCJdID0gXCJhcmdlbmNhcmRcIjtcbiAgQ3JlZGl0Q2FyZDJbXCJDYWJhbFwiXSA9IFwiY2FiYWxcIjtcbiAgQ3JlZGl0Q2FyZDJbXCJDZW5jb3N1ZFwiXSA9IFwiY2VuY29zdWRcIjtcbiAgQ3JlZGl0Q2FyZDJbXCJEaW5lcnNDbHViXCJdID0gXCJkaW5lcnNcIjtcbiAgQ3JlZGl0Q2FyZDJbXCJEaXNjb3ZlclwiXSA9IFwiZGlzY292ZXJcIjtcbiAgQ3JlZGl0Q2FyZDJbXCJFbG9cIl0gPSBcImVsb1wiO1xuICBDcmVkaXRDYXJkMltcIkhpcGVyY2FyZFwiXSA9IFwiaGlwZXJjYXJkXCI7XG4gIENyZWRpdENhcmQyW1wiSkNCXCJdID0gXCJqY2JcIjtcbiAgQ3JlZGl0Q2FyZDJbXCJNYXN0ZXJjYXJkXCJdID0gXCJtYXN0ZXJjYXJkXCI7XG4gIENyZWRpdENhcmQyW1wiTmFyYW5qYVwiXSA9IFwibmFyYW5qYVwiO1xuICBDcmVkaXRDYXJkMltcIlRhcmpldGFTaG9wcGluZ1wiXSA9IFwidGFyZ2V0YS1zaG9wcGluZ1wiO1xuICBDcmVkaXRDYXJkMltcIlVuaW9uQ2hpbmFQYXlcIl0gPSBcInVuaW9uLWNoaW5hLXBheVwiO1xuICBDcmVkaXRDYXJkMltcIlZpc2FcIl0gPSBcInZpc2FcIjtcbiAgQ3JlZGl0Q2FyZDJbXCJNSVJcIl0gPSBcIm1pclwiO1xuICBDcmVkaXRDYXJkMltcIk1hZXN0cm9cIl0gPSBcIm1hZXN0cm9cIjtcbiAgQ3JlZGl0Q2FyZDJbXCJSdXBheVwiXSA9IFwicnVwYXlcIjtcbiAgcmV0dXJuIENyZWRpdENhcmQyO1xufSkoQ3JlZGl0Q2FyZCB8fCB7fSk7XG5cbmV4cG9ydCB7IENyZWRpdENhcmQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW91dC5qcy5tYXBcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyZWRpdC1jYXJkLm1qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-appwrite/dist/enums/credit-card.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-appwrite/dist/enums/deployment-download-type.mjs":
/*!****************************************************************************!*\
  !*** ./node_modules/node-appwrite/dist/enums/deployment-download-type.mjs ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DeploymentDownloadType: () => (/* binding */ DeploymentDownloadType)\n/* harmony export */ });\n// src/enums/deployment-download-type.ts\nvar DeploymentDownloadType = /* @__PURE__ */ ((DeploymentDownloadType2) => {\n  DeploymentDownloadType2[\"Source\"] = \"source\";\n  DeploymentDownloadType2[\"Output\"] = \"output\";\n  return DeploymentDownloadType2;\n})(DeploymentDownloadType || {});\n\n\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=deployment-download-type.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L2VudW1zL2RlcGxveW1lbnQtZG93bmxvYWQtdHlwZS5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDhCQUE4Qjs7QUFFRztBQUNsQztBQUNBIiwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2Rpc3QvZW51bXMvZGVwbG95bWVudC1kb3dubG9hZC10eXBlLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvZW51bXMvZGVwbG95bWVudC1kb3dubG9hZC10eXBlLnRzXG52YXIgRGVwbG95bWVudERvd25sb2FkVHlwZSA9IC8qIEBfX1BVUkVfXyAqLyAoKERlcGxveW1lbnREb3dubG9hZFR5cGUyKSA9PiB7XG4gIERlcGxveW1lbnREb3dubG9hZFR5cGUyW1wiU291cmNlXCJdID0gXCJzb3VyY2VcIjtcbiAgRGVwbG95bWVudERvd25sb2FkVHlwZTJbXCJPdXRwdXRcIl0gPSBcIm91dHB1dFwiO1xuICByZXR1cm4gRGVwbG95bWVudERvd25sb2FkVHlwZTI7XG59KShEZXBsb3ltZW50RG93bmxvYWRUeXBlIHx8IHt9KTtcblxuZXhwb3J0IHsgRGVwbG95bWVudERvd25sb2FkVHlwZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b3V0LmpzLm1hcFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVwbG95bWVudC1kb3dubG9hZC10eXBlLm1qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-appwrite/dist/enums/deployment-download-type.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-appwrite/dist/enums/execution-method.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/node-appwrite/dist/enums/execution-method.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ExecutionMethod: () => (/* binding */ ExecutionMethod)\n/* harmony export */ });\n// src/enums/execution-method.ts\nvar ExecutionMethod = /* @__PURE__ */ ((ExecutionMethod2) => {\n  ExecutionMethod2[\"GET\"] = \"GET\";\n  ExecutionMethod2[\"POST\"] = \"POST\";\n  ExecutionMethod2[\"PUT\"] = \"PUT\";\n  ExecutionMethod2[\"PATCH\"] = \"PATCH\";\n  ExecutionMethod2[\"DELETE\"] = \"DELETE\";\n  ExecutionMethod2[\"OPTIONS\"] = \"OPTIONS\";\n  return ExecutionMethod2;\n})(ExecutionMethod || {});\n\n\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=execution-method.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L2VudW1zL2V4ZWN1dGlvbi1tZXRob2QubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHVCQUF1Qjs7QUFFRztBQUMzQjtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2Rpc3QvZW51bXMvZXhlY3V0aW9uLW1ldGhvZC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2VudW1zL2V4ZWN1dGlvbi1tZXRob2QudHNcbnZhciBFeGVjdXRpb25NZXRob2QgPSAvKiBAX19QVVJFX18gKi8gKChFeGVjdXRpb25NZXRob2QyKSA9PiB7XG4gIEV4ZWN1dGlvbk1ldGhvZDJbXCJHRVRcIl0gPSBcIkdFVFwiO1xuICBFeGVjdXRpb25NZXRob2QyW1wiUE9TVFwiXSA9IFwiUE9TVFwiO1xuICBFeGVjdXRpb25NZXRob2QyW1wiUFVUXCJdID0gXCJQVVRcIjtcbiAgRXhlY3V0aW9uTWV0aG9kMltcIlBBVENIXCJdID0gXCJQQVRDSFwiO1xuICBFeGVjdXRpb25NZXRob2QyW1wiREVMRVRFXCJdID0gXCJERUxFVEVcIjtcbiAgRXhlY3V0aW9uTWV0aG9kMltcIk9QVElPTlNcIl0gPSBcIk9QVElPTlNcIjtcbiAgcmV0dXJuIEV4ZWN1dGlvbk1ldGhvZDI7XG59KShFeGVjdXRpb25NZXRob2QgfHwge30pO1xuXG5leHBvcnQgeyBFeGVjdXRpb25NZXRob2QgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW91dC5qcy5tYXBcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV4ZWN1dGlvbi1tZXRob2QubWpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-appwrite/dist/enums/execution-method.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-appwrite/dist/enums/flag.mjs":
/*!********************************************************!*\
  !*** ./node_modules/node-appwrite/dist/enums/flag.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Flag: () => (/* binding */ Flag)\n/* harmony export */ });\n// src/enums/flag.ts\nvar Flag = /* @__PURE__ */ ((Flag2) => {\n  Flag2[\"Afghanistan\"] = \"af\";\n  Flag2[\"Angola\"] = \"ao\";\n  Flag2[\"Albania\"] = \"al\";\n  Flag2[\"Andorra\"] = \"ad\";\n  Flag2[\"UnitedArabEmirates\"] = \"ae\";\n  Flag2[\"Argentina\"] = \"ar\";\n  Flag2[\"Armenia\"] = \"am\";\n  Flag2[\"AntiguaAndBarbuda\"] = \"ag\";\n  Flag2[\"Australia\"] = \"au\";\n  Flag2[\"Austria\"] = \"at\";\n  Flag2[\"Azerbaijan\"] = \"az\";\n  Flag2[\"Burundi\"] = \"bi\";\n  Flag2[\"Belgium\"] = \"be\";\n  Flag2[\"Benin\"] = \"bj\";\n  Flag2[\"BurkinaFaso\"] = \"bf\";\n  Flag2[\"Bangladesh\"] = \"bd\";\n  Flag2[\"Bulgaria\"] = \"bg\";\n  Flag2[\"Bahrain\"] = \"bh\";\n  Flag2[\"Bahamas\"] = \"bs\";\n  Flag2[\"BosniaAndHerzegovina\"] = \"ba\";\n  Flag2[\"Belarus\"] = \"by\";\n  Flag2[\"Belize\"] = \"bz\";\n  Flag2[\"Bolivia\"] = \"bo\";\n  Flag2[\"Brazil\"] = \"br\";\n  Flag2[\"Barbados\"] = \"bb\";\n  Flag2[\"BruneiDarussalam\"] = \"bn\";\n  Flag2[\"Bhutan\"] = \"bt\";\n  Flag2[\"Botswana\"] = \"bw\";\n  Flag2[\"CentralAfricanRepublic\"] = \"cf\";\n  Flag2[\"Canada\"] = \"ca\";\n  Flag2[\"Switzerland\"] = \"ch\";\n  Flag2[\"Chile\"] = \"cl\";\n  Flag2[\"China\"] = \"cn\";\n  Flag2[\"CoteDIvoire\"] = \"ci\";\n  Flag2[\"Cameroon\"] = \"cm\";\n  Flag2[\"DemocraticRepublicOfTheCongo\"] = \"cd\";\n  Flag2[\"RepublicOfTheCongo\"] = \"cg\";\n  Flag2[\"Colombia\"] = \"co\";\n  Flag2[\"Comoros\"] = \"km\";\n  Flag2[\"CapeVerde\"] = \"cv\";\n  Flag2[\"CostaRica\"] = \"cr\";\n  Flag2[\"Cuba\"] = \"cu\";\n  Flag2[\"Cyprus\"] = \"cy\";\n  Flag2[\"CzechRepublic\"] = \"cz\";\n  Flag2[\"Germany\"] = \"de\";\n  Flag2[\"Djibouti\"] = \"dj\";\n  Flag2[\"Dominica\"] = \"dm\";\n  Flag2[\"Denmark\"] = \"dk\";\n  Flag2[\"DominicanRepublic\"] = \"do\";\n  Flag2[\"Algeria\"] = \"dz\";\n  Flag2[\"Ecuador\"] = \"ec\";\n  Flag2[\"Egypt\"] = \"eg\";\n  Flag2[\"Eritrea\"] = \"er\";\n  Flag2[\"Spain\"] = \"es\";\n  Flag2[\"Estonia\"] = \"ee\";\n  Flag2[\"Ethiopia\"] = \"et\";\n  Flag2[\"Finland\"] = \"fi\";\n  Flag2[\"Fiji\"] = \"fj\";\n  Flag2[\"France\"] = \"fr\";\n  Flag2[\"MicronesiaFederatedStatesOf\"] = \"fm\";\n  Flag2[\"Gabon\"] = \"ga\";\n  Flag2[\"UnitedKingdom\"] = \"gb\";\n  Flag2[\"Georgia\"] = \"ge\";\n  Flag2[\"Ghana\"] = \"gh\";\n  Flag2[\"Guinea\"] = \"gn\";\n  Flag2[\"Gambia\"] = \"gm\";\n  Flag2[\"GuineaBissau\"] = \"gw\";\n  Flag2[\"EquatorialGuinea\"] = \"gq\";\n  Flag2[\"Greece\"] = \"gr\";\n  Flag2[\"Grenada\"] = \"gd\";\n  Flag2[\"Guatemala\"] = \"gt\";\n  Flag2[\"Guyana\"] = \"gy\";\n  Flag2[\"Honduras\"] = \"hn\";\n  Flag2[\"Croatia\"] = \"hr\";\n  Flag2[\"Haiti\"] = \"ht\";\n  Flag2[\"Hungary\"] = \"hu\";\n  Flag2[\"Indonesia\"] = \"id\";\n  Flag2[\"India\"] = \"in\";\n  Flag2[\"Ireland\"] = \"ie\";\n  Flag2[\"IranIslamicRepublicOf\"] = \"ir\";\n  Flag2[\"Iraq\"] = \"iq\";\n  Flag2[\"Iceland\"] = \"is\";\n  Flag2[\"Israel\"] = \"il\";\n  Flag2[\"Italy\"] = \"it\";\n  Flag2[\"Jamaica\"] = \"jm\";\n  Flag2[\"Jordan\"] = \"jo\";\n  Flag2[\"Japan\"] = \"jp\";\n  Flag2[\"Kazakhstan\"] = \"kz\";\n  Flag2[\"Kenya\"] = \"ke\";\n  Flag2[\"Kyrgyzstan\"] = \"kg\";\n  Flag2[\"Cambodia\"] = \"kh\";\n  Flag2[\"Kiribati\"] = \"ki\";\n  Flag2[\"SaintKittsAndNevis\"] = \"kn\";\n  Flag2[\"SouthKorea\"] = \"kr\";\n  Flag2[\"Kuwait\"] = \"kw\";\n  Flag2[\"LaoPeopleSDemocraticRepublic\"] = \"la\";\n  Flag2[\"Lebanon\"] = \"lb\";\n  Flag2[\"Liberia\"] = \"lr\";\n  Flag2[\"Libya\"] = \"ly\";\n  Flag2[\"SaintLucia\"] = \"lc\";\n  Flag2[\"Liechtenstein\"] = \"li\";\n  Flag2[\"SriLanka\"] = \"lk\";\n  Flag2[\"Lesotho\"] = \"ls\";\n  Flag2[\"Lithuania\"] = \"lt\";\n  Flag2[\"Luxembourg\"] = \"lu\";\n  Flag2[\"Latvia\"] = \"lv\";\n  Flag2[\"Morocco\"] = \"ma\";\n  Flag2[\"Monaco\"] = \"mc\";\n  Flag2[\"Moldova\"] = \"md\";\n  Flag2[\"Madagascar\"] = \"mg\";\n  Flag2[\"Maldives\"] = \"mv\";\n  Flag2[\"Mexico\"] = \"mx\";\n  Flag2[\"MarshallIslands\"] = \"mh\";\n  Flag2[\"NorthMacedonia\"] = \"mk\";\n  Flag2[\"Mali\"] = \"ml\";\n  Flag2[\"Malta\"] = \"mt\";\n  Flag2[\"Myanmar\"] = \"mm\";\n  Flag2[\"Montenegro\"] = \"me\";\n  Flag2[\"Mongolia\"] = \"mn\";\n  Flag2[\"Mozambique\"] = \"mz\";\n  Flag2[\"Mauritania\"] = \"mr\";\n  Flag2[\"Mauritius\"] = \"mu\";\n  Flag2[\"Malawi\"] = \"mw\";\n  Flag2[\"Malaysia\"] = \"my\";\n  Flag2[\"Namibia\"] = \"na\";\n  Flag2[\"Niger\"] = \"ne\";\n  Flag2[\"Nigeria\"] = \"ng\";\n  Flag2[\"Nicaragua\"] = \"ni\";\n  Flag2[\"Netherlands\"] = \"nl\";\n  Flag2[\"Norway\"] = \"no\";\n  Flag2[\"Nepal\"] = \"np\";\n  Flag2[\"Nauru\"] = \"nr\";\n  Flag2[\"NewZealand\"] = \"nz\";\n  Flag2[\"Oman\"] = \"om\";\n  Flag2[\"Pakistan\"] = \"pk\";\n  Flag2[\"Panama\"] = \"pa\";\n  Flag2[\"Peru\"] = \"pe\";\n  Flag2[\"Philippines\"] = \"ph\";\n  Flag2[\"Palau\"] = \"pw\";\n  Flag2[\"PapuaNewGuinea\"] = \"pg\";\n  Flag2[\"Poland\"] = \"pl\";\n  Flag2[\"FrenchPolynesia\"] = \"pf\";\n  Flag2[\"NorthKorea\"] = \"kp\";\n  Flag2[\"Portugal\"] = \"pt\";\n  Flag2[\"Paraguay\"] = \"py\";\n  Flag2[\"Qatar\"] = \"qa\";\n  Flag2[\"Romania\"] = \"ro\";\n  Flag2[\"Russia\"] = \"ru\";\n  Flag2[\"Rwanda\"] = \"rw\";\n  Flag2[\"SaudiArabia\"] = \"sa\";\n  Flag2[\"Sudan\"] = \"sd\";\n  Flag2[\"Senegal\"] = \"sn\";\n  Flag2[\"Singapore\"] = \"sg\";\n  Flag2[\"SolomonIslands\"] = \"sb\";\n  Flag2[\"SierraLeone\"] = \"sl\";\n  Flag2[\"ElSalvador\"] = \"sv\";\n  Flag2[\"SanMarino\"] = \"sm\";\n  Flag2[\"Somalia\"] = \"so\";\n  Flag2[\"Serbia\"] = \"rs\";\n  Flag2[\"SouthSudan\"] = \"ss\";\n  Flag2[\"SaoTomeAndPrincipe\"] = \"st\";\n  Flag2[\"Suriname\"] = \"sr\";\n  Flag2[\"Slovakia\"] = \"sk\";\n  Flag2[\"Slovenia\"] = \"si\";\n  Flag2[\"Sweden\"] = \"se\";\n  Flag2[\"Eswatini\"] = \"sz\";\n  Flag2[\"Seychelles\"] = \"sc\";\n  Flag2[\"Syria\"] = \"sy\";\n  Flag2[\"Chad\"] = \"td\";\n  Flag2[\"Togo\"] = \"tg\";\n  Flag2[\"Thailand\"] = \"th\";\n  Flag2[\"Tajikistan\"] = \"tj\";\n  Flag2[\"Turkmenistan\"] = \"tm\";\n  Flag2[\"TimorLeste\"] = \"tl\";\n  Flag2[\"Tonga\"] = \"to\";\n  Flag2[\"TrinidadAndTobago\"] = \"tt\";\n  Flag2[\"Tunisia\"] = \"tn\";\n  Flag2[\"Turkey\"] = \"tr\";\n  Flag2[\"Tuvalu\"] = \"tv\";\n  Flag2[\"Tanzania\"] = \"tz\";\n  Flag2[\"Uganda\"] = \"ug\";\n  Flag2[\"Ukraine\"] = \"ua\";\n  Flag2[\"Uruguay\"] = \"uy\";\n  Flag2[\"UnitedStates\"] = \"us\";\n  Flag2[\"Uzbekistan\"] = \"uz\";\n  Flag2[\"VaticanCity\"] = \"va\";\n  Flag2[\"SaintVincentAndTheGrenadines\"] = \"vc\";\n  Flag2[\"Venezuela\"] = \"ve\";\n  Flag2[\"Vietnam\"] = \"vn\";\n  Flag2[\"Vanuatu\"] = \"vu\";\n  Flag2[\"Samoa\"] = \"ws\";\n  Flag2[\"Yemen\"] = \"ye\";\n  Flag2[\"SouthAfrica\"] = \"za\";\n  Flag2[\"Zambia\"] = \"zm\";\n  Flag2[\"Zimbabwe\"] = \"zw\";\n  return Flag2;\n})(Flag || {});\n\n\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=flag.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-appwrite/dist/enums/flag.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-appwrite/dist/enums/framework.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/node-appwrite/dist/enums/framework.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Framework: () => (/* binding */ Framework)\n/* harmony export */ });\n// src/enums/framework.ts\nvar Framework = /* @__PURE__ */ ((Framework2) => {\n  Framework2[\"Analog\"] = \"analog\";\n  Framework2[\"Angular\"] = \"angular\";\n  Framework2[\"Nextjs\"] = \"nextjs\";\n  Framework2[\"React\"] = \"react\";\n  Framework2[\"Nuxt\"] = \"nuxt\";\n  Framework2[\"Vue\"] = \"vue\";\n  Framework2[\"Sveltekit\"] = \"sveltekit\";\n  Framework2[\"Astro\"] = \"astro\";\n  Framework2[\"Remix\"] = \"remix\";\n  Framework2[\"Lynx\"] = \"lynx\";\n  Framework2[\"Flutter\"] = \"flutter\";\n  Framework2[\"Reactnative\"] = \"react-native\";\n  Framework2[\"Vite\"] = \"vite\";\n  Framework2[\"Other\"] = \"other\";\n  return Framework2;\n})(Framework || {});\n\n\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=framework.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L2VudW1zL2ZyYW1ld29yay5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLGlCQUFpQjs7QUFFRztBQUNyQjtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2Rpc3QvZW51bXMvZnJhbWV3b3JrLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvZW51bXMvZnJhbWV3b3JrLnRzXG52YXIgRnJhbWV3b3JrID0gLyogQF9fUFVSRV9fICovICgoRnJhbWV3b3JrMikgPT4ge1xuICBGcmFtZXdvcmsyW1wiQW5hbG9nXCJdID0gXCJhbmFsb2dcIjtcbiAgRnJhbWV3b3JrMltcIkFuZ3VsYXJcIl0gPSBcImFuZ3VsYXJcIjtcbiAgRnJhbWV3b3JrMltcIk5leHRqc1wiXSA9IFwibmV4dGpzXCI7XG4gIEZyYW1ld29yazJbXCJSZWFjdFwiXSA9IFwicmVhY3RcIjtcbiAgRnJhbWV3b3JrMltcIk51eHRcIl0gPSBcIm51eHRcIjtcbiAgRnJhbWV3b3JrMltcIlZ1ZVwiXSA9IFwidnVlXCI7XG4gIEZyYW1ld29yazJbXCJTdmVsdGVraXRcIl0gPSBcInN2ZWx0ZWtpdFwiO1xuICBGcmFtZXdvcmsyW1wiQXN0cm9cIl0gPSBcImFzdHJvXCI7XG4gIEZyYW1ld29yazJbXCJSZW1peFwiXSA9IFwicmVtaXhcIjtcbiAgRnJhbWV3b3JrMltcIkx5bnhcIl0gPSBcImx5bnhcIjtcbiAgRnJhbWV3b3JrMltcIkZsdXR0ZXJcIl0gPSBcImZsdXR0ZXJcIjtcbiAgRnJhbWV3b3JrMltcIlJlYWN0bmF0aXZlXCJdID0gXCJyZWFjdC1uYXRpdmVcIjtcbiAgRnJhbWV3b3JrMltcIlZpdGVcIl0gPSBcInZpdGVcIjtcbiAgRnJhbWV3b3JrMltcIk90aGVyXCJdID0gXCJvdGhlclwiO1xuICByZXR1cm4gRnJhbWV3b3JrMjtcbn0pKEZyYW1ld29yayB8fCB7fSk7XG5cbmV4cG9ydCB7IEZyYW1ld29yayB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b3V0LmpzLm1hcFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZnJhbWV3b3JrLm1qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-appwrite/dist/enums/framework.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-appwrite/dist/enums/image-format.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/node-appwrite/dist/enums/image-format.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ImageFormat: () => (/* binding */ ImageFormat)\n/* harmony export */ });\n// src/enums/image-format.ts\nvar ImageFormat = /* @__PURE__ */ ((ImageFormat2) => {\n  ImageFormat2[\"Jpg\"] = \"jpg\";\n  ImageFormat2[\"Jpeg\"] = \"jpeg\";\n  ImageFormat2[\"Png\"] = \"png\";\n  ImageFormat2[\"Webp\"] = \"webp\";\n  ImageFormat2[\"Heic\"] = \"heic\";\n  ImageFormat2[\"Avif\"] = \"avif\";\n  return ImageFormat2;\n})(ImageFormat || {});\n\n\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=image-format.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L2VudW1zL2ltYWdlLWZvcm1hdC5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsbUJBQW1COztBQUVHO0FBQ3ZCO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2Uvbm9kZV9tb2R1bGVzL25vZGUtYXBwd3JpdGUvZGlzdC9lbnVtcy9pbWFnZS1mb3JtYXQubWpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9lbnVtcy9pbWFnZS1mb3JtYXQudHNcbnZhciBJbWFnZUZvcm1hdCA9IC8qIEBfX1BVUkVfXyAqLyAoKEltYWdlRm9ybWF0MikgPT4ge1xuICBJbWFnZUZvcm1hdDJbXCJKcGdcIl0gPSBcImpwZ1wiO1xuICBJbWFnZUZvcm1hdDJbXCJKcGVnXCJdID0gXCJqcGVnXCI7XG4gIEltYWdlRm9ybWF0MltcIlBuZ1wiXSA9IFwicG5nXCI7XG4gIEltYWdlRm9ybWF0MltcIldlYnBcIl0gPSBcIndlYnBcIjtcbiAgSW1hZ2VGb3JtYXQyW1wiSGVpY1wiXSA9IFwiaGVpY1wiO1xuICBJbWFnZUZvcm1hdDJbXCJBdmlmXCJdID0gXCJhdmlmXCI7XG4gIHJldHVybiBJbWFnZUZvcm1hdDI7XG59KShJbWFnZUZvcm1hdCB8fCB7fSk7XG5cbmV4cG9ydCB7IEltYWdlRm9ybWF0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vdXQuanMubWFwXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbWFnZS1mb3JtYXQubWpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-appwrite/dist/enums/image-format.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-appwrite/dist/enums/image-gravity.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/node-appwrite/dist/enums/image-gravity.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ImageGravity: () => (/* binding */ ImageGravity)\n/* harmony export */ });\n// src/enums/image-gravity.ts\nvar ImageGravity = /* @__PURE__ */ ((ImageGravity2) => {\n  ImageGravity2[\"Center\"] = \"center\";\n  ImageGravity2[\"Topleft\"] = \"top-left\";\n  ImageGravity2[\"Top\"] = \"top\";\n  ImageGravity2[\"Topright\"] = \"top-right\";\n  ImageGravity2[\"Left\"] = \"left\";\n  ImageGravity2[\"Right\"] = \"right\";\n  ImageGravity2[\"Bottomleft\"] = \"bottom-left\";\n  ImageGravity2[\"Bottom\"] = \"bottom\";\n  ImageGravity2[\"Bottomright\"] = \"bottom-right\";\n  return ImageGravity2;\n})(ImageGravity || {});\n\n\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=image-gravity.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L2VudW1zL2ltYWdlLWdyYXZpdHkubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLG9CQUFvQjs7QUFFRztBQUN4QjtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2Rpc3QvZW51bXMvaW1hZ2UtZ3Jhdml0eS5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2VudW1zL2ltYWdlLWdyYXZpdHkudHNcbnZhciBJbWFnZUdyYXZpdHkgPSAvKiBAX19QVVJFX18gKi8gKChJbWFnZUdyYXZpdHkyKSA9PiB7XG4gIEltYWdlR3Jhdml0eTJbXCJDZW50ZXJcIl0gPSBcImNlbnRlclwiO1xuICBJbWFnZUdyYXZpdHkyW1wiVG9wbGVmdFwiXSA9IFwidG9wLWxlZnRcIjtcbiAgSW1hZ2VHcmF2aXR5MltcIlRvcFwiXSA9IFwidG9wXCI7XG4gIEltYWdlR3Jhdml0eTJbXCJUb3ByaWdodFwiXSA9IFwidG9wLXJpZ2h0XCI7XG4gIEltYWdlR3Jhdml0eTJbXCJMZWZ0XCJdID0gXCJsZWZ0XCI7XG4gIEltYWdlR3Jhdml0eTJbXCJSaWdodFwiXSA9IFwicmlnaHRcIjtcbiAgSW1hZ2VHcmF2aXR5MltcIkJvdHRvbWxlZnRcIl0gPSBcImJvdHRvbS1sZWZ0XCI7XG4gIEltYWdlR3Jhdml0eTJbXCJCb3R0b21cIl0gPSBcImJvdHRvbVwiO1xuICBJbWFnZUdyYXZpdHkyW1wiQm90dG9tcmlnaHRcIl0gPSBcImJvdHRvbS1yaWdodFwiO1xuICByZXR1cm4gSW1hZ2VHcmF2aXR5Mjtcbn0pKEltYWdlR3Jhdml0eSB8fCB7fSk7XG5cbmV4cG9ydCB7IEltYWdlR3Jhdml0eSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b3V0LmpzLm1hcFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW1hZ2UtZ3Jhdml0eS5tanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-appwrite/dist/enums/image-gravity.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-appwrite/dist/enums/index-type.mjs":
/*!**************************************************************!*\
  !*** ./node_modules/node-appwrite/dist/enums/index-type.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IndexType: () => (/* binding */ IndexType)\n/* harmony export */ });\n// src/enums/index-type.ts\nvar IndexType = /* @__PURE__ */ ((IndexType2) => {\n  IndexType2[\"Key\"] = \"key\";\n  IndexType2[\"Fulltext\"] = \"fulltext\";\n  IndexType2[\"Unique\"] = \"unique\";\n  return IndexType2;\n})(IndexType || {});\n\n\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=index-type.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L2VudW1zL2luZGV4LXR5cGUubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLGlCQUFpQjs7QUFFRztBQUNyQjtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2Rpc3QvZW51bXMvaW5kZXgtdHlwZS5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2VudW1zL2luZGV4LXR5cGUudHNcbnZhciBJbmRleFR5cGUgPSAvKiBAX19QVVJFX18gKi8gKChJbmRleFR5cGUyKSA9PiB7XG4gIEluZGV4VHlwZTJbXCJLZXlcIl0gPSBcImtleVwiO1xuICBJbmRleFR5cGUyW1wiRnVsbHRleHRcIl0gPSBcImZ1bGx0ZXh0XCI7XG4gIEluZGV4VHlwZTJbXCJVbmlxdWVcIl0gPSBcInVuaXF1ZVwiO1xuICByZXR1cm4gSW5kZXhUeXBlMjtcbn0pKEluZGV4VHlwZSB8fCB7fSk7XG5cbmV4cG9ydCB7IEluZGV4VHlwZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b3V0LmpzLm1hcFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgtdHlwZS5tanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-appwrite/dist/enums/index-type.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-appwrite/dist/enums/message-priority.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/node-appwrite/dist/enums/message-priority.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MessagePriority: () => (/* binding */ MessagePriority)\n/* harmony export */ });\n// src/enums/message-priority.ts\nvar MessagePriority = /* @__PURE__ */ ((MessagePriority2) => {\n  MessagePriority2[\"Normal\"] = \"normal\";\n  MessagePriority2[\"High\"] = \"high\";\n  return MessagePriority2;\n})(MessagePriority || {});\n\n\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=message-priority.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L2VudW1zL21lc3NhZ2UtcHJpb3JpdHkubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyx1QkFBdUI7O0FBRUc7QUFDM0I7QUFDQSIsInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L2VudW1zL21lc3NhZ2UtcHJpb3JpdHkubWpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9lbnVtcy9tZXNzYWdlLXByaW9yaXR5LnRzXG52YXIgTWVzc2FnZVByaW9yaXR5ID0gLyogQF9fUFVSRV9fICovICgoTWVzc2FnZVByaW9yaXR5MikgPT4ge1xuICBNZXNzYWdlUHJpb3JpdHkyW1wiTm9ybWFsXCJdID0gXCJub3JtYWxcIjtcbiAgTWVzc2FnZVByaW9yaXR5MltcIkhpZ2hcIl0gPSBcImhpZ2hcIjtcbiAgcmV0dXJuIE1lc3NhZ2VQcmlvcml0eTI7XG59KShNZXNzYWdlUHJpb3JpdHkgfHwge30pO1xuXG5leHBvcnQgeyBNZXNzYWdlUHJpb3JpdHkgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW91dC5qcy5tYXBcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lc3NhZ2UtcHJpb3JpdHkubWpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-appwrite/dist/enums/message-priority.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-appwrite/dist/enums/messaging-provider-type.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/node-appwrite/dist/enums/messaging-provider-type.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MessagingProviderType: () => (/* binding */ MessagingProviderType)\n/* harmony export */ });\n// src/enums/messaging-provider-type.ts\nvar MessagingProviderType = /* @__PURE__ */ ((MessagingProviderType2) => {\n  MessagingProviderType2[\"Email\"] = \"email\";\n  MessagingProviderType2[\"Sms\"] = \"sms\";\n  MessagingProviderType2[\"Push\"] = \"push\";\n  return MessagingProviderType2;\n})(MessagingProviderType || {});\n\n\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=messaging-provider-type.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L2VudW1zL21lc3NhZ2luZy1wcm92aWRlci10eXBlLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyw2QkFBNkI7O0FBRUc7QUFDakM7QUFDQSIsInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L2VudW1zL21lc3NhZ2luZy1wcm92aWRlci10eXBlLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvZW51bXMvbWVzc2FnaW5nLXByb3ZpZGVyLXR5cGUudHNcbnZhciBNZXNzYWdpbmdQcm92aWRlclR5cGUgPSAvKiBAX19QVVJFX18gKi8gKChNZXNzYWdpbmdQcm92aWRlclR5cGUyKSA9PiB7XG4gIE1lc3NhZ2luZ1Byb3ZpZGVyVHlwZTJbXCJFbWFpbFwiXSA9IFwiZW1haWxcIjtcbiAgTWVzc2FnaW5nUHJvdmlkZXJUeXBlMltcIlNtc1wiXSA9IFwic21zXCI7XG4gIE1lc3NhZ2luZ1Byb3ZpZGVyVHlwZTJbXCJQdXNoXCJdID0gXCJwdXNoXCI7XG4gIHJldHVybiBNZXNzYWdpbmdQcm92aWRlclR5cGUyO1xufSkoTWVzc2FnaW5nUHJvdmlkZXJUeXBlIHx8IHt9KTtcblxuZXhwb3J0IHsgTWVzc2FnaW5nUHJvdmlkZXJUeXBlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vdXQuanMubWFwXG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXNzYWdpbmctcHJvdmlkZXItdHlwZS5tanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-appwrite/dist/enums/messaging-provider-type.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-appwrite/dist/enums/name.mjs":
/*!********************************************************!*\
  !*** ./node_modules/node-appwrite/dist/enums/name.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Name: () => (/* binding */ Name)\n/* harmony export */ });\n// src/enums/name.ts\nvar Name = /* @__PURE__ */ ((Name2) => {\n  Name2[\"V1database\"] = \"v1-database\";\n  Name2[\"V1deletes\"] = \"v1-deletes\";\n  Name2[\"V1audits\"] = \"v1-audits\";\n  Name2[\"V1mails\"] = \"v1-mails\";\n  Name2[\"V1functions\"] = \"v1-functions\";\n  Name2[\"V1statsresources\"] = \"v1-stats-resources\";\n  Name2[\"V1statsusage\"] = \"v1-stats-usage\";\n  Name2[\"V1webhooks\"] = \"v1-webhooks\";\n  Name2[\"V1certificates\"] = \"v1-certificates\";\n  Name2[\"V1builds\"] = \"v1-builds\";\n  Name2[\"V1messaging\"] = \"v1-messaging\";\n  Name2[\"V1migrations\"] = \"v1-migrations\";\n  return Name2;\n})(Name || {});\n\n\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=name.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L2VudW1zL25hbWUubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLFlBQVk7O0FBRUc7QUFDaEI7QUFDQSIsInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L2VudW1zL25hbWUubWpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9lbnVtcy9uYW1lLnRzXG52YXIgTmFtZSA9IC8qIEBfX1BVUkVfXyAqLyAoKE5hbWUyKSA9PiB7XG4gIE5hbWUyW1wiVjFkYXRhYmFzZVwiXSA9IFwidjEtZGF0YWJhc2VcIjtcbiAgTmFtZTJbXCJWMWRlbGV0ZXNcIl0gPSBcInYxLWRlbGV0ZXNcIjtcbiAgTmFtZTJbXCJWMWF1ZGl0c1wiXSA9IFwidjEtYXVkaXRzXCI7XG4gIE5hbWUyW1wiVjFtYWlsc1wiXSA9IFwidjEtbWFpbHNcIjtcbiAgTmFtZTJbXCJWMWZ1bmN0aW9uc1wiXSA9IFwidjEtZnVuY3Rpb25zXCI7XG4gIE5hbWUyW1wiVjFzdGF0c3Jlc291cmNlc1wiXSA9IFwidjEtc3RhdHMtcmVzb3VyY2VzXCI7XG4gIE5hbWUyW1wiVjFzdGF0c3VzYWdlXCJdID0gXCJ2MS1zdGF0cy11c2FnZVwiO1xuICBOYW1lMltcIlYxd2ViaG9va3NcIl0gPSBcInYxLXdlYmhvb2tzXCI7XG4gIE5hbWUyW1wiVjFjZXJ0aWZpY2F0ZXNcIl0gPSBcInYxLWNlcnRpZmljYXRlc1wiO1xuICBOYW1lMltcIlYxYnVpbGRzXCJdID0gXCJ2MS1idWlsZHNcIjtcbiAgTmFtZTJbXCJWMW1lc3NhZ2luZ1wiXSA9IFwidjEtbWVzc2FnaW5nXCI7XG4gIE5hbWUyW1wiVjFtaWdyYXRpb25zXCJdID0gXCJ2MS1taWdyYXRpb25zXCI7XG4gIHJldHVybiBOYW1lMjtcbn0pKE5hbWUgfHwge30pO1xuXG5leHBvcnQgeyBOYW1lIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vdXQuanMubWFwXG4vLyMgc291cmNlTWFwcGluZ1VSTD1uYW1lLm1qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-appwrite/dist/enums/name.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-appwrite/dist/enums/o-auth-provider.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/node-appwrite/dist/enums/o-auth-provider.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OAuthProvider: () => (/* binding */ OAuthProvider)\n/* harmony export */ });\n// src/enums/o-auth-provider.ts\nvar OAuthProvider = /* @__PURE__ */ ((OAuthProvider2) => {\n  OAuthProvider2[\"Amazon\"] = \"amazon\";\n  OAuthProvider2[\"Apple\"] = \"apple\";\n  OAuthProvider2[\"Auth0\"] = \"auth0\";\n  OAuthProvider2[\"Authentik\"] = \"authentik\";\n  OAuthProvider2[\"Autodesk\"] = \"autodesk\";\n  OAuthProvider2[\"Bitbucket\"] = \"bitbucket\";\n  OAuthProvider2[\"Bitly\"] = \"bitly\";\n  OAuthProvider2[\"Box\"] = \"box\";\n  OAuthProvider2[\"Dailymotion\"] = \"dailymotion\";\n  OAuthProvider2[\"Discord\"] = \"discord\";\n  OAuthProvider2[\"Disqus\"] = \"disqus\";\n  OAuthProvider2[\"Dropbox\"] = \"dropbox\";\n  OAuthProvider2[\"Etsy\"] = \"etsy\";\n  OAuthProvider2[\"Facebook\"] = \"facebook\";\n  OAuthProvider2[\"Figma\"] = \"figma\";\n  OAuthProvider2[\"Github\"] = \"github\";\n  OAuthProvider2[\"Gitlab\"] = \"gitlab\";\n  OAuthProvider2[\"Google\"] = \"google\";\n  OAuthProvider2[\"Linkedin\"] = \"linkedin\";\n  OAuthProvider2[\"Microsoft\"] = \"microsoft\";\n  OAuthProvider2[\"Notion\"] = \"notion\";\n  OAuthProvider2[\"Oidc\"] = \"oidc\";\n  OAuthProvider2[\"Okta\"] = \"okta\";\n  OAuthProvider2[\"Paypal\"] = \"paypal\";\n  OAuthProvider2[\"PaypalSandbox\"] = \"paypalSandbox\";\n  OAuthProvider2[\"Podio\"] = \"podio\";\n  OAuthProvider2[\"Salesforce\"] = \"salesforce\";\n  OAuthProvider2[\"Slack\"] = \"slack\";\n  OAuthProvider2[\"Spotify\"] = \"spotify\";\n  OAuthProvider2[\"Stripe\"] = \"stripe\";\n  OAuthProvider2[\"Tradeshift\"] = \"tradeshift\";\n  OAuthProvider2[\"TradeshiftBox\"] = \"tradeshiftBox\";\n  OAuthProvider2[\"Twitch\"] = \"twitch\";\n  OAuthProvider2[\"Wordpress\"] = \"wordpress\";\n  OAuthProvider2[\"Yahoo\"] = \"yahoo\";\n  OAuthProvider2[\"Yammer\"] = \"yammer\";\n  OAuthProvider2[\"Yandex\"] = \"yandex\";\n  OAuthProvider2[\"Zoho\"] = \"zoho\";\n  OAuthProvider2[\"Zoom\"] = \"zoom\";\n  OAuthProvider2[\"Mock\"] = \"mock\";\n  return OAuthProvider2;\n})(OAuthProvider || {});\n\n\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=o-auth-provider.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L2VudW1zL28tYXV0aC1wcm92aWRlci5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxxQkFBcUI7O0FBRUc7QUFDekI7QUFDQSIsInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L2VudW1zL28tYXV0aC1wcm92aWRlci5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2VudW1zL28tYXV0aC1wcm92aWRlci50c1xudmFyIE9BdXRoUHJvdmlkZXIgPSAvKiBAX19QVVJFX18gKi8gKChPQXV0aFByb3ZpZGVyMikgPT4ge1xuICBPQXV0aFByb3ZpZGVyMltcIkFtYXpvblwiXSA9IFwiYW1hem9uXCI7XG4gIE9BdXRoUHJvdmlkZXIyW1wiQXBwbGVcIl0gPSBcImFwcGxlXCI7XG4gIE9BdXRoUHJvdmlkZXIyW1wiQXV0aDBcIl0gPSBcImF1dGgwXCI7XG4gIE9BdXRoUHJvdmlkZXIyW1wiQXV0aGVudGlrXCJdID0gXCJhdXRoZW50aWtcIjtcbiAgT0F1dGhQcm92aWRlcjJbXCJBdXRvZGVza1wiXSA9IFwiYXV0b2Rlc2tcIjtcbiAgT0F1dGhQcm92aWRlcjJbXCJCaXRidWNrZXRcIl0gPSBcImJpdGJ1Y2tldFwiO1xuICBPQXV0aFByb3ZpZGVyMltcIkJpdGx5XCJdID0gXCJiaXRseVwiO1xuICBPQXV0aFByb3ZpZGVyMltcIkJveFwiXSA9IFwiYm94XCI7XG4gIE9BdXRoUHJvdmlkZXIyW1wiRGFpbHltb3Rpb25cIl0gPSBcImRhaWx5bW90aW9uXCI7XG4gIE9BdXRoUHJvdmlkZXIyW1wiRGlzY29yZFwiXSA9IFwiZGlzY29yZFwiO1xuICBPQXV0aFByb3ZpZGVyMltcIkRpc3F1c1wiXSA9IFwiZGlzcXVzXCI7XG4gIE9BdXRoUHJvdmlkZXIyW1wiRHJvcGJveFwiXSA9IFwiZHJvcGJveFwiO1xuICBPQXV0aFByb3ZpZGVyMltcIkV0c3lcIl0gPSBcImV0c3lcIjtcbiAgT0F1dGhQcm92aWRlcjJbXCJGYWNlYm9va1wiXSA9IFwiZmFjZWJvb2tcIjtcbiAgT0F1dGhQcm92aWRlcjJbXCJGaWdtYVwiXSA9IFwiZmlnbWFcIjtcbiAgT0F1dGhQcm92aWRlcjJbXCJHaXRodWJcIl0gPSBcImdpdGh1YlwiO1xuICBPQXV0aFByb3ZpZGVyMltcIkdpdGxhYlwiXSA9IFwiZ2l0bGFiXCI7XG4gIE9BdXRoUHJvdmlkZXIyW1wiR29vZ2xlXCJdID0gXCJnb29nbGVcIjtcbiAgT0F1dGhQcm92aWRlcjJbXCJMaW5rZWRpblwiXSA9IFwibGlua2VkaW5cIjtcbiAgT0F1dGhQcm92aWRlcjJbXCJNaWNyb3NvZnRcIl0gPSBcIm1pY3Jvc29mdFwiO1xuICBPQXV0aFByb3ZpZGVyMltcIk5vdGlvblwiXSA9IFwibm90aW9uXCI7XG4gIE9BdXRoUHJvdmlkZXIyW1wiT2lkY1wiXSA9IFwib2lkY1wiO1xuICBPQXV0aFByb3ZpZGVyMltcIk9rdGFcIl0gPSBcIm9rdGFcIjtcbiAgT0F1dGhQcm92aWRlcjJbXCJQYXlwYWxcIl0gPSBcInBheXBhbFwiO1xuICBPQXV0aFByb3ZpZGVyMltcIlBheXBhbFNhbmRib3hcIl0gPSBcInBheXBhbFNhbmRib3hcIjtcbiAgT0F1dGhQcm92aWRlcjJbXCJQb2Rpb1wiXSA9IFwicG9kaW9cIjtcbiAgT0F1dGhQcm92aWRlcjJbXCJTYWxlc2ZvcmNlXCJdID0gXCJzYWxlc2ZvcmNlXCI7XG4gIE9BdXRoUHJvdmlkZXIyW1wiU2xhY2tcIl0gPSBcInNsYWNrXCI7XG4gIE9BdXRoUHJvdmlkZXIyW1wiU3BvdGlmeVwiXSA9IFwic3BvdGlmeVwiO1xuICBPQXV0aFByb3ZpZGVyMltcIlN0cmlwZVwiXSA9IFwic3RyaXBlXCI7XG4gIE9BdXRoUHJvdmlkZXIyW1wiVHJhZGVzaGlmdFwiXSA9IFwidHJhZGVzaGlmdFwiO1xuICBPQXV0aFByb3ZpZGVyMltcIlRyYWRlc2hpZnRCb3hcIl0gPSBcInRyYWRlc2hpZnRCb3hcIjtcbiAgT0F1dGhQcm92aWRlcjJbXCJUd2l0Y2hcIl0gPSBcInR3aXRjaFwiO1xuICBPQXV0aFByb3ZpZGVyMltcIldvcmRwcmVzc1wiXSA9IFwid29yZHByZXNzXCI7XG4gIE9BdXRoUHJvdmlkZXIyW1wiWWFob29cIl0gPSBcInlhaG9vXCI7XG4gIE9BdXRoUHJvdmlkZXIyW1wiWWFtbWVyXCJdID0gXCJ5YW1tZXJcIjtcbiAgT0F1dGhQcm92aWRlcjJbXCJZYW5kZXhcIl0gPSBcInlhbmRleFwiO1xuICBPQXV0aFByb3ZpZGVyMltcIlpvaG9cIl0gPSBcInpvaG9cIjtcbiAgT0F1dGhQcm92aWRlcjJbXCJab29tXCJdID0gXCJ6b29tXCI7XG4gIE9BdXRoUHJvdmlkZXIyW1wiTW9ja1wiXSA9IFwibW9ja1wiO1xuICByZXR1cm4gT0F1dGhQcm92aWRlcjI7XG59KShPQXV0aFByb3ZpZGVyIHx8IHt9KTtcblxuZXhwb3J0IHsgT0F1dGhQcm92aWRlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b3V0LmpzLm1hcFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9by1hdXRoLXByb3ZpZGVyLm1qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-appwrite/dist/enums/o-auth-provider.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-appwrite/dist/enums/password-hash.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/node-appwrite/dist/enums/password-hash.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PasswordHash: () => (/* binding */ PasswordHash)\n/* harmony export */ });\n// src/enums/password-hash.ts\nvar PasswordHash = /* @__PURE__ */ ((PasswordHash2) => {\n  PasswordHash2[\"Sha1\"] = \"sha1\";\n  PasswordHash2[\"Sha224\"] = \"sha224\";\n  PasswordHash2[\"Sha256\"] = \"sha256\";\n  PasswordHash2[\"Sha384\"] = \"sha384\";\n  PasswordHash2[\"Sha512224\"] = \"sha512/224\";\n  PasswordHash2[\"Sha512256\"] = \"sha512/256\";\n  PasswordHash2[\"Sha512\"] = \"sha512\";\n  PasswordHash2[\"Sha3224\"] = \"sha3-224\";\n  PasswordHash2[\"Sha3256\"] = \"sha3-256\";\n  PasswordHash2[\"Sha3384\"] = \"sha3-384\";\n  PasswordHash2[\"Sha3512\"] = \"sha3-512\";\n  return PasswordHash2;\n})(PasswordHash || {});\n\n\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=password-hash.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L2VudW1zL3Bhc3N3b3JkLWhhc2gubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxvQkFBb0I7O0FBRUc7QUFDeEI7QUFDQSIsInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L2VudW1zL3Bhc3N3b3JkLWhhc2gubWpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9lbnVtcy9wYXNzd29yZC1oYXNoLnRzXG52YXIgUGFzc3dvcmRIYXNoID0gLyogQF9fUFVSRV9fICovICgoUGFzc3dvcmRIYXNoMikgPT4ge1xuICBQYXNzd29yZEhhc2gyW1wiU2hhMVwiXSA9IFwic2hhMVwiO1xuICBQYXNzd29yZEhhc2gyW1wiU2hhMjI0XCJdID0gXCJzaGEyMjRcIjtcbiAgUGFzc3dvcmRIYXNoMltcIlNoYTI1NlwiXSA9IFwic2hhMjU2XCI7XG4gIFBhc3N3b3JkSGFzaDJbXCJTaGEzODRcIl0gPSBcInNoYTM4NFwiO1xuICBQYXNzd29yZEhhc2gyW1wiU2hhNTEyMjI0XCJdID0gXCJzaGE1MTIvMjI0XCI7XG4gIFBhc3N3b3JkSGFzaDJbXCJTaGE1MTIyNTZcIl0gPSBcInNoYTUxMi8yNTZcIjtcbiAgUGFzc3dvcmRIYXNoMltcIlNoYTUxMlwiXSA9IFwic2hhNTEyXCI7XG4gIFBhc3N3b3JkSGFzaDJbXCJTaGEzMjI0XCJdID0gXCJzaGEzLTIyNFwiO1xuICBQYXNzd29yZEhhc2gyW1wiU2hhMzI1NlwiXSA9IFwic2hhMy0yNTZcIjtcbiAgUGFzc3dvcmRIYXNoMltcIlNoYTMzODRcIl0gPSBcInNoYTMtMzg0XCI7XG4gIFBhc3N3b3JkSGFzaDJbXCJTaGEzNTEyXCJdID0gXCJzaGEzLTUxMlwiO1xuICByZXR1cm4gUGFzc3dvcmRIYXNoMjtcbn0pKFBhc3N3b3JkSGFzaCB8fCB7fSk7XG5cbmV4cG9ydCB7IFBhc3N3b3JkSGFzaCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b3V0LmpzLm1hcFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFzc3dvcmQtaGFzaC5tanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-appwrite/dist/enums/password-hash.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-appwrite/dist/enums/relation-mutate.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/node-appwrite/dist/enums/relation-mutate.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RelationMutate: () => (/* binding */ RelationMutate)\n/* harmony export */ });\n// src/enums/relation-mutate.ts\nvar RelationMutate = /* @__PURE__ */ ((RelationMutate2) => {\n  RelationMutate2[\"Cascade\"] = \"cascade\";\n  RelationMutate2[\"Restrict\"] = \"restrict\";\n  RelationMutate2[\"SetNull\"] = \"setNull\";\n  return RelationMutate2;\n})(RelationMutate || {});\n\n\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=relation-mutate.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L2VudW1zL3JlbGF0aW9uLW11dGF0ZS5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsc0JBQXNCOztBQUVHO0FBQzFCO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2Uvbm9kZV9tb2R1bGVzL25vZGUtYXBwd3JpdGUvZGlzdC9lbnVtcy9yZWxhdGlvbi1tdXRhdGUubWpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9lbnVtcy9yZWxhdGlvbi1tdXRhdGUudHNcbnZhciBSZWxhdGlvbk11dGF0ZSA9IC8qIEBfX1BVUkVfXyAqLyAoKFJlbGF0aW9uTXV0YXRlMikgPT4ge1xuICBSZWxhdGlvbk11dGF0ZTJbXCJDYXNjYWRlXCJdID0gXCJjYXNjYWRlXCI7XG4gIFJlbGF0aW9uTXV0YXRlMltcIlJlc3RyaWN0XCJdID0gXCJyZXN0cmljdFwiO1xuICBSZWxhdGlvbk11dGF0ZTJbXCJTZXROdWxsXCJdID0gXCJzZXROdWxsXCI7XG4gIHJldHVybiBSZWxhdGlvbk11dGF0ZTI7XG59KShSZWxhdGlvbk11dGF0ZSB8fCB7fSk7XG5cbmV4cG9ydCB7IFJlbGF0aW9uTXV0YXRlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vdXQuanMubWFwXG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWxhdGlvbi1tdXRhdGUubWpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-appwrite/dist/enums/relation-mutate.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-appwrite/dist/enums/relationship-type.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/node-appwrite/dist/enums/relationship-type.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RelationshipType: () => (/* binding */ RelationshipType)\n/* harmony export */ });\n// src/enums/relationship-type.ts\nvar RelationshipType = /* @__PURE__ */ ((RelationshipType2) => {\n  RelationshipType2[\"OneToOne\"] = \"oneToOne\";\n  RelationshipType2[\"ManyToOne\"] = \"manyToOne\";\n  RelationshipType2[\"ManyToMany\"] = \"manyToMany\";\n  RelationshipType2[\"OneToMany\"] = \"oneToMany\";\n  return RelationshipType2;\n})(RelationshipType || {});\n\n\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=relationship-type.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L2VudW1zL3JlbGF0aW9uc2hpcC10eXBlLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHdCQUF3Qjs7QUFFRztBQUM1QjtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2Rpc3QvZW51bXMvcmVsYXRpb25zaGlwLXR5cGUubWpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9lbnVtcy9yZWxhdGlvbnNoaXAtdHlwZS50c1xudmFyIFJlbGF0aW9uc2hpcFR5cGUgPSAvKiBAX19QVVJFX18gKi8gKChSZWxhdGlvbnNoaXBUeXBlMikgPT4ge1xuICBSZWxhdGlvbnNoaXBUeXBlMltcIk9uZVRvT25lXCJdID0gXCJvbmVUb09uZVwiO1xuICBSZWxhdGlvbnNoaXBUeXBlMltcIk1hbnlUb09uZVwiXSA9IFwibWFueVRvT25lXCI7XG4gIFJlbGF0aW9uc2hpcFR5cGUyW1wiTWFueVRvTWFueVwiXSA9IFwibWFueVRvTWFueVwiO1xuICBSZWxhdGlvbnNoaXBUeXBlMltcIk9uZVRvTWFueVwiXSA9IFwib25lVG9NYW55XCI7XG4gIHJldHVybiBSZWxhdGlvbnNoaXBUeXBlMjtcbn0pKFJlbGF0aW9uc2hpcFR5cGUgfHwge30pO1xuXG5leHBvcnQgeyBSZWxhdGlvbnNoaXBUeXBlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vdXQuanMubWFwXG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWxhdGlvbnNoaXAtdHlwZS5tanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-appwrite/dist/enums/relationship-type.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-appwrite/dist/enums/runtime.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/node-appwrite/dist/enums/runtime.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Runtime: () => (/* binding */ Runtime)\n/* harmony export */ });\n// src/enums/runtime.ts\nvar Runtime = /* @__PURE__ */ ((Runtime2) => {\n  Runtime2[\"Node145\"] = \"node-14.5\";\n  Runtime2[\"Node160\"] = \"node-16.0\";\n  Runtime2[\"Node180\"] = \"node-18.0\";\n  Runtime2[\"Node190\"] = \"node-19.0\";\n  Runtime2[\"Node200\"] = \"node-20.0\";\n  Runtime2[\"Node210\"] = \"node-21.0\";\n  Runtime2[\"Node22\"] = \"node-22\";\n  Runtime2[\"Php80\"] = \"php-8.0\";\n  Runtime2[\"Php81\"] = \"php-8.1\";\n  Runtime2[\"Php82\"] = \"php-8.2\";\n  Runtime2[\"Php83\"] = \"php-8.3\";\n  Runtime2[\"Ruby30\"] = \"ruby-3.0\";\n  Runtime2[\"Ruby31\"] = \"ruby-3.1\";\n  Runtime2[\"Ruby32\"] = \"ruby-3.2\";\n  Runtime2[\"Ruby33\"] = \"ruby-3.3\";\n  Runtime2[\"Python38\"] = \"python-3.8\";\n  Runtime2[\"Python39\"] = \"python-3.9\";\n  Runtime2[\"Python310\"] = \"python-3.10\";\n  Runtime2[\"Python311\"] = \"python-3.11\";\n  Runtime2[\"Python312\"] = \"python-3.12\";\n  Runtime2[\"Pythonml311\"] = \"python-ml-3.11\";\n  Runtime2[\"Pythonml312\"] = \"python-ml-3.12\";\n  Runtime2[\"Deno121\"] = \"deno-1.21\";\n  Runtime2[\"Deno124\"] = \"deno-1.24\";\n  Runtime2[\"Deno135\"] = \"deno-1.35\";\n  Runtime2[\"Deno140\"] = \"deno-1.40\";\n  Runtime2[\"Deno146\"] = \"deno-1.46\";\n  Runtime2[\"Deno20\"] = \"deno-2.0\";\n  Runtime2[\"Dart215\"] = \"dart-2.15\";\n  Runtime2[\"Dart216\"] = \"dart-2.16\";\n  Runtime2[\"Dart217\"] = \"dart-2.17\";\n  Runtime2[\"Dart218\"] = \"dart-2.18\";\n  Runtime2[\"Dart219\"] = \"dart-2.19\";\n  Runtime2[\"Dart30\"] = \"dart-3.0\";\n  Runtime2[\"Dart31\"] = \"dart-3.1\";\n  Runtime2[\"Dart33\"] = \"dart-3.3\";\n  Runtime2[\"Dart35\"] = \"dart-3.5\";\n  Runtime2[\"Dotnet60\"] = \"dotnet-6.0\";\n  Runtime2[\"Dotnet70\"] = \"dotnet-7.0\";\n  Runtime2[\"Dotnet80\"] = \"dotnet-8.0\";\n  Runtime2[\"Java80\"] = \"java-8.0\";\n  Runtime2[\"Java110\"] = \"java-11.0\";\n  Runtime2[\"Java170\"] = \"java-17.0\";\n  Runtime2[\"Java180\"] = \"java-18.0\";\n  Runtime2[\"Java210\"] = \"java-21.0\";\n  Runtime2[\"Java22\"] = \"java-22\";\n  Runtime2[\"Swift55\"] = \"swift-5.5\";\n  Runtime2[\"Swift58\"] = \"swift-5.8\";\n  Runtime2[\"Swift59\"] = \"swift-5.9\";\n  Runtime2[\"Swift510\"] = \"swift-5.10\";\n  Runtime2[\"Kotlin16\"] = \"kotlin-1.6\";\n  Runtime2[\"Kotlin18\"] = \"kotlin-1.8\";\n  Runtime2[\"Kotlin19\"] = \"kotlin-1.9\";\n  Runtime2[\"Kotlin20\"] = \"kotlin-2.0\";\n  Runtime2[\"Cpp17\"] = \"cpp-17\";\n  Runtime2[\"Cpp20\"] = \"cpp-20\";\n  Runtime2[\"Bun10\"] = \"bun-1.0\";\n  Runtime2[\"Bun11\"] = \"bun-1.1\";\n  Runtime2[\"Go123\"] = \"go-1.23\";\n  Runtime2[\"Static1\"] = \"static-1\";\n  Runtime2[\"Flutter324\"] = \"flutter-3.24\";\n  Runtime2[\"Flutter327\"] = \"flutter-3.27\";\n  Runtime2[\"Flutter329\"] = \"flutter-3.29\";\n  return Runtime2;\n})(Runtime || {});\n\n\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=runtime.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L2VudW1zL3J1bnRpbWUubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLGVBQWU7O0FBRUc7QUFDbkI7QUFDQSIsInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L2VudW1zL3J1bnRpbWUubWpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9lbnVtcy9ydW50aW1lLnRzXG52YXIgUnVudGltZSA9IC8qIEBfX1BVUkVfXyAqLyAoKFJ1bnRpbWUyKSA9PiB7XG4gIFJ1bnRpbWUyW1wiTm9kZTE0NVwiXSA9IFwibm9kZS0xNC41XCI7XG4gIFJ1bnRpbWUyW1wiTm9kZTE2MFwiXSA9IFwibm9kZS0xNi4wXCI7XG4gIFJ1bnRpbWUyW1wiTm9kZTE4MFwiXSA9IFwibm9kZS0xOC4wXCI7XG4gIFJ1bnRpbWUyW1wiTm9kZTE5MFwiXSA9IFwibm9kZS0xOS4wXCI7XG4gIFJ1bnRpbWUyW1wiTm9kZTIwMFwiXSA9IFwibm9kZS0yMC4wXCI7XG4gIFJ1bnRpbWUyW1wiTm9kZTIxMFwiXSA9IFwibm9kZS0yMS4wXCI7XG4gIFJ1bnRpbWUyW1wiTm9kZTIyXCJdID0gXCJub2RlLTIyXCI7XG4gIFJ1bnRpbWUyW1wiUGhwODBcIl0gPSBcInBocC04LjBcIjtcbiAgUnVudGltZTJbXCJQaHA4MVwiXSA9IFwicGhwLTguMVwiO1xuICBSdW50aW1lMltcIlBocDgyXCJdID0gXCJwaHAtOC4yXCI7XG4gIFJ1bnRpbWUyW1wiUGhwODNcIl0gPSBcInBocC04LjNcIjtcbiAgUnVudGltZTJbXCJSdWJ5MzBcIl0gPSBcInJ1YnktMy4wXCI7XG4gIFJ1bnRpbWUyW1wiUnVieTMxXCJdID0gXCJydWJ5LTMuMVwiO1xuICBSdW50aW1lMltcIlJ1YnkzMlwiXSA9IFwicnVieS0zLjJcIjtcbiAgUnVudGltZTJbXCJSdWJ5MzNcIl0gPSBcInJ1YnktMy4zXCI7XG4gIFJ1bnRpbWUyW1wiUHl0aG9uMzhcIl0gPSBcInB5dGhvbi0zLjhcIjtcbiAgUnVudGltZTJbXCJQeXRob24zOVwiXSA9IFwicHl0aG9uLTMuOVwiO1xuICBSdW50aW1lMltcIlB5dGhvbjMxMFwiXSA9IFwicHl0aG9uLTMuMTBcIjtcbiAgUnVudGltZTJbXCJQeXRob24zMTFcIl0gPSBcInB5dGhvbi0zLjExXCI7XG4gIFJ1bnRpbWUyW1wiUHl0aG9uMzEyXCJdID0gXCJweXRob24tMy4xMlwiO1xuICBSdW50aW1lMltcIlB5dGhvbm1sMzExXCJdID0gXCJweXRob24tbWwtMy4xMVwiO1xuICBSdW50aW1lMltcIlB5dGhvbm1sMzEyXCJdID0gXCJweXRob24tbWwtMy4xMlwiO1xuICBSdW50aW1lMltcIkRlbm8xMjFcIl0gPSBcImRlbm8tMS4yMVwiO1xuICBSdW50aW1lMltcIkRlbm8xMjRcIl0gPSBcImRlbm8tMS4yNFwiO1xuICBSdW50aW1lMltcIkRlbm8xMzVcIl0gPSBcImRlbm8tMS4zNVwiO1xuICBSdW50aW1lMltcIkRlbm8xNDBcIl0gPSBcImRlbm8tMS40MFwiO1xuICBSdW50aW1lMltcIkRlbm8xNDZcIl0gPSBcImRlbm8tMS40NlwiO1xuICBSdW50aW1lMltcIkRlbm8yMFwiXSA9IFwiZGVuby0yLjBcIjtcbiAgUnVudGltZTJbXCJEYXJ0MjE1XCJdID0gXCJkYXJ0LTIuMTVcIjtcbiAgUnVudGltZTJbXCJEYXJ0MjE2XCJdID0gXCJkYXJ0LTIuMTZcIjtcbiAgUnVudGltZTJbXCJEYXJ0MjE3XCJdID0gXCJkYXJ0LTIuMTdcIjtcbiAgUnVudGltZTJbXCJEYXJ0MjE4XCJdID0gXCJkYXJ0LTIuMThcIjtcbiAgUnVudGltZTJbXCJEYXJ0MjE5XCJdID0gXCJkYXJ0LTIuMTlcIjtcbiAgUnVudGltZTJbXCJEYXJ0MzBcIl0gPSBcImRhcnQtMy4wXCI7XG4gIFJ1bnRpbWUyW1wiRGFydDMxXCJdID0gXCJkYXJ0LTMuMVwiO1xuICBSdW50aW1lMltcIkRhcnQzM1wiXSA9IFwiZGFydC0zLjNcIjtcbiAgUnVudGltZTJbXCJEYXJ0MzVcIl0gPSBcImRhcnQtMy41XCI7XG4gIFJ1bnRpbWUyW1wiRG90bmV0NjBcIl0gPSBcImRvdG5ldC02LjBcIjtcbiAgUnVudGltZTJbXCJEb3RuZXQ3MFwiXSA9IFwiZG90bmV0LTcuMFwiO1xuICBSdW50aW1lMltcIkRvdG5ldDgwXCJdID0gXCJkb3RuZXQtOC4wXCI7XG4gIFJ1bnRpbWUyW1wiSmF2YTgwXCJdID0gXCJqYXZhLTguMFwiO1xuICBSdW50aW1lMltcIkphdmExMTBcIl0gPSBcImphdmEtMTEuMFwiO1xuICBSdW50aW1lMltcIkphdmExNzBcIl0gPSBcImphdmEtMTcuMFwiO1xuICBSdW50aW1lMltcIkphdmExODBcIl0gPSBcImphdmEtMTguMFwiO1xuICBSdW50aW1lMltcIkphdmEyMTBcIl0gPSBcImphdmEtMjEuMFwiO1xuICBSdW50aW1lMltcIkphdmEyMlwiXSA9IFwiamF2YS0yMlwiO1xuICBSdW50aW1lMltcIlN3aWZ0NTVcIl0gPSBcInN3aWZ0LTUuNVwiO1xuICBSdW50aW1lMltcIlN3aWZ0NThcIl0gPSBcInN3aWZ0LTUuOFwiO1xuICBSdW50aW1lMltcIlN3aWZ0NTlcIl0gPSBcInN3aWZ0LTUuOVwiO1xuICBSdW50aW1lMltcIlN3aWZ0NTEwXCJdID0gXCJzd2lmdC01LjEwXCI7XG4gIFJ1bnRpbWUyW1wiS290bGluMTZcIl0gPSBcImtvdGxpbi0xLjZcIjtcbiAgUnVudGltZTJbXCJLb3RsaW4xOFwiXSA9IFwia290bGluLTEuOFwiO1xuICBSdW50aW1lMltcIktvdGxpbjE5XCJdID0gXCJrb3RsaW4tMS45XCI7XG4gIFJ1bnRpbWUyW1wiS290bGluMjBcIl0gPSBcImtvdGxpbi0yLjBcIjtcbiAgUnVudGltZTJbXCJDcHAxN1wiXSA9IFwiY3BwLTE3XCI7XG4gIFJ1bnRpbWUyW1wiQ3BwMjBcIl0gPSBcImNwcC0yMFwiO1xuICBSdW50aW1lMltcIkJ1bjEwXCJdID0gXCJidW4tMS4wXCI7XG4gIFJ1bnRpbWUyW1wiQnVuMTFcIl0gPSBcImJ1bi0xLjFcIjtcbiAgUnVudGltZTJbXCJHbzEyM1wiXSA9IFwiZ28tMS4yM1wiO1xuICBSdW50aW1lMltcIlN0YXRpYzFcIl0gPSBcInN0YXRpYy0xXCI7XG4gIFJ1bnRpbWUyW1wiRmx1dHRlcjMyNFwiXSA9IFwiZmx1dHRlci0zLjI0XCI7XG4gIFJ1bnRpbWUyW1wiRmx1dHRlcjMyN1wiXSA9IFwiZmx1dHRlci0zLjI3XCI7XG4gIFJ1bnRpbWUyW1wiRmx1dHRlcjMyOVwiXSA9IFwiZmx1dHRlci0zLjI5XCI7XG4gIHJldHVybiBSdW50aW1lMjtcbn0pKFJ1bnRpbWUgfHwge30pO1xuXG5leHBvcnQgeyBSdW50aW1lIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vdXQuanMubWFwXG4vLyMgc291cmNlTWFwcGluZ1VSTD1ydW50aW1lLm1qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-appwrite/dist/enums/runtime.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-appwrite/dist/enums/smtp-encryption.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/node-appwrite/dist/enums/smtp-encryption.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SmtpEncryption: () => (/* binding */ SmtpEncryption)\n/* harmony export */ });\n// src/enums/smtp-encryption.ts\nvar SmtpEncryption = /* @__PURE__ */ ((SmtpEncryption2) => {\n  SmtpEncryption2[\"None\"] = \"none\";\n  SmtpEncryption2[\"Ssl\"] = \"ssl\";\n  SmtpEncryption2[\"Tls\"] = \"tls\";\n  return SmtpEncryption2;\n})(SmtpEncryption || {});\n\n\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=smtp-encryption.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L2VudW1zL3NtdHAtZW5jcnlwdGlvbi5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsc0JBQXNCOztBQUVHO0FBQzFCO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2Uvbm9kZV9tb2R1bGVzL25vZGUtYXBwd3JpdGUvZGlzdC9lbnVtcy9zbXRwLWVuY3J5cHRpb24ubWpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9lbnVtcy9zbXRwLWVuY3J5cHRpb24udHNcbnZhciBTbXRwRW5jcnlwdGlvbiA9IC8qIEBfX1BVUkVfXyAqLyAoKFNtdHBFbmNyeXB0aW9uMikgPT4ge1xuICBTbXRwRW5jcnlwdGlvbjJbXCJOb25lXCJdID0gXCJub25lXCI7XG4gIFNtdHBFbmNyeXB0aW9uMltcIlNzbFwiXSA9IFwic3NsXCI7XG4gIFNtdHBFbmNyeXB0aW9uMltcIlRsc1wiXSA9IFwidGxzXCI7XG4gIHJldHVybiBTbXRwRW5jcnlwdGlvbjI7XG59KShTbXRwRW5jcnlwdGlvbiB8fCB7fSk7XG5cbmV4cG9ydCB7IFNtdHBFbmNyeXB0aW9uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vdXQuanMubWFwXG4vLyMgc291cmNlTWFwcGluZ1VSTD1zbXRwLWVuY3J5cHRpb24ubWpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-appwrite/dist/enums/smtp-encryption.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-appwrite/dist/enums/v-c-s-deployment-type.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/node-appwrite/dist/enums/v-c-s-deployment-type.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VCSDeploymentType: () => (/* binding */ VCSDeploymentType)\n/* harmony export */ });\n// src/enums/v-c-s-deployment-type.ts\nvar VCSDeploymentType = /* @__PURE__ */ ((VCSDeploymentType2) => {\n  VCSDeploymentType2[\"Branch\"] = \"branch\";\n  VCSDeploymentType2[\"Commit\"] = \"commit\";\n  VCSDeploymentType2[\"Tag\"] = \"tag\";\n  return VCSDeploymentType2;\n})(VCSDeploymentType || {});\n\n\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=v-c-s-deployment-type.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L2VudW1zL3YtYy1zLWRlcGxveW1lbnQtdHlwZS5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMseUJBQXlCOztBQUVHO0FBQzdCO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2Uvbm9kZV9tb2R1bGVzL25vZGUtYXBwd3JpdGUvZGlzdC9lbnVtcy92LWMtcy1kZXBsb3ltZW50LXR5cGUubWpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9lbnVtcy92LWMtcy1kZXBsb3ltZW50LXR5cGUudHNcbnZhciBWQ1NEZXBsb3ltZW50VHlwZSA9IC8qIEBfX1BVUkVfXyAqLyAoKFZDU0RlcGxveW1lbnRUeXBlMikgPT4ge1xuICBWQ1NEZXBsb3ltZW50VHlwZTJbXCJCcmFuY2hcIl0gPSBcImJyYW5jaFwiO1xuICBWQ1NEZXBsb3ltZW50VHlwZTJbXCJDb21taXRcIl0gPSBcImNvbW1pdFwiO1xuICBWQ1NEZXBsb3ltZW50VHlwZTJbXCJUYWdcIl0gPSBcInRhZ1wiO1xuICByZXR1cm4gVkNTRGVwbG95bWVudFR5cGUyO1xufSkoVkNTRGVwbG95bWVudFR5cGUgfHwge30pO1xuXG5leHBvcnQgeyBWQ1NEZXBsb3ltZW50VHlwZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b3V0LmpzLm1hcFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9di1jLXMtZGVwbG95bWVudC10eXBlLm1qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-appwrite/dist/enums/v-c-s-deployment-type.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-appwrite/dist/id.mjs":
/*!************************************************!*\
  !*** ./node_modules/node-appwrite/dist/id.mjs ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ID: () => (/* binding */ ID)\n/* harmony export */ });\n// src/id.ts\nvar ID = class _ID {\n  /**\n   * Generate an hex ID based on timestamp.\n   * Recreated from https://www.php.net/manual/en/function.uniqid.php\n   *\n   * @returns {string}\n   */\n  static #hexTimestamp() {\n    const now = /* @__PURE__ */ new Date();\n    const sec = Math.floor(now.getTime() / 1e3);\n    const msec = now.getMilliseconds();\n    const hexTimestamp = sec.toString(16) + msec.toString(16).padStart(5, \"0\");\n    return hexTimestamp;\n  }\n  /**\n   * Uses the provided ID as the ID for the resource.\n   *\n   * @param {string} id\n   * @returns {string}\n   */\n  static custom(id) {\n    return id;\n  }\n  /**\n   * Have Appwrite generate a unique ID for you.\n   * \n   * @param {number} padding. Default is 7.\n   * @returns {string}\n   */\n  static unique(padding = 7) {\n    const baseId = _ID.#hexTimestamp();\n    let randomPadding = \"\";\n    for (let i = 0; i < padding; i++) {\n      const randomHexDigit = Math.floor(Math.random() * 16).toString(16);\n      randomPadding += randomHexDigit;\n    }\n    return baseId + randomPadding;\n  }\n};\n\n\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=id.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L2lkLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixhQUFhO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFYztBQUNkO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2Uvbm9kZV9tb2R1bGVzL25vZGUtYXBwd3JpdGUvZGlzdC9pZC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2lkLnRzXG52YXIgSUQgPSBjbGFzcyBfSUQge1xuICAvKipcbiAgICogR2VuZXJhdGUgYW4gaGV4IElEIGJhc2VkIG9uIHRpbWVzdGFtcC5cbiAgICogUmVjcmVhdGVkIGZyb20gaHR0cHM6Ly93d3cucGhwLm5ldC9tYW51YWwvZW4vZnVuY3Rpb24udW5pcWlkLnBocFxuICAgKlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgc3RhdGljICNoZXhUaW1lc3RhbXAoKSB7XG4gICAgY29uc3Qgbm93ID0gLyogQF9fUFVSRV9fICovIG5ldyBEYXRlKCk7XG4gICAgY29uc3Qgc2VjID0gTWF0aC5mbG9vcihub3cuZ2V0VGltZSgpIC8gMWUzKTtcbiAgICBjb25zdCBtc2VjID0gbm93LmdldE1pbGxpc2Vjb25kcygpO1xuICAgIGNvbnN0IGhleFRpbWVzdGFtcCA9IHNlYy50b1N0cmluZygxNikgKyBtc2VjLnRvU3RyaW5nKDE2KS5wYWRTdGFydCg1LCBcIjBcIik7XG4gICAgcmV0dXJuIGhleFRpbWVzdGFtcDtcbiAgfVxuICAvKipcbiAgICogVXNlcyB0aGUgcHJvdmlkZWQgSUQgYXMgdGhlIElEIGZvciB0aGUgcmVzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZFxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgc3RhdGljIGN1c3RvbShpZCkge1xuICAgIHJldHVybiBpZDtcbiAgfVxuICAvKipcbiAgICogSGF2ZSBBcHB3cml0ZSBnZW5lcmF0ZSBhIHVuaXF1ZSBJRCBmb3IgeW91LlxuICAgKiBcbiAgICogQHBhcmFtIHtudW1iZXJ9IHBhZGRpbmcuIERlZmF1bHQgaXMgNy5cbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIHN0YXRpYyB1bmlxdWUocGFkZGluZyA9IDcpIHtcbiAgICBjb25zdCBiYXNlSWQgPSBfSUQuI2hleFRpbWVzdGFtcCgpO1xuICAgIGxldCByYW5kb21QYWRkaW5nID0gXCJcIjtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhZGRpbmc7IGkrKykge1xuICAgICAgY29uc3QgcmFuZG9tSGV4RGlnaXQgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxNikudG9TdHJpbmcoMTYpO1xuICAgICAgcmFuZG9tUGFkZGluZyArPSByYW5kb21IZXhEaWdpdDtcbiAgICB9XG4gICAgcmV0dXJuIGJhc2VJZCArIHJhbmRvbVBhZGRpbmc7XG4gIH1cbn07XG5cbmV4cG9ydCB7IElEIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vdXQuanMubWFwXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pZC5tanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-appwrite/dist/id.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-appwrite/dist/index.mjs":
/*!***************************************************!*\
  !*** ./node_modules/node-appwrite/dist/index.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Account: () => (/* reexport safe */ _services_account_mjs__WEBPACK_IMPORTED_MODULE_1__.Account),\n/* harmony export */   Adapter: () => (/* reexport safe */ _enums_adapter_mjs__WEBPACK_IMPORTED_MODULE_35__.Adapter),\n/* harmony export */   AppwriteException: () => (/* reexport safe */ _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException),\n/* harmony export */   AuthenticationFactor: () => (/* reexport safe */ _enums_authentication_factor_mjs__WEBPACK_IMPORTED_MODULE_18__.AuthenticationFactor),\n/* harmony export */   AuthenticatorType: () => (/* reexport safe */ _enums_authenticator_type_mjs__WEBPACK_IMPORTED_MODULE_17__.AuthenticatorType),\n/* harmony export */   Avatars: () => (/* reexport safe */ _services_avatars_mjs__WEBPACK_IMPORTED_MODULE_2__.Avatars),\n/* harmony export */   Browser: () => (/* reexport safe */ _enums_browser_mjs__WEBPACK_IMPORTED_MODULE_20__.Browser),\n/* harmony export */   BuildRuntime: () => (/* reexport safe */ _enums_build_runtime_mjs__WEBPACK_IMPORTED_MODULE_34__.BuildRuntime),\n/* harmony export */   Client: () => (/* reexport safe */ _client_mjs__WEBPACK_IMPORTED_MODULE_0__.Client),\n/* harmony export */   Compression: () => (/* reexport safe */ _enums_compression_mjs__WEBPACK_IMPORTED_MODULE_36__.Compression),\n/* harmony export */   CreditCard: () => (/* reexport safe */ _enums_credit_card_mjs__WEBPACK_IMPORTED_MODULE_21__.CreditCard),\n/* harmony export */   Databases: () => (/* reexport safe */ _services_databases_mjs__WEBPACK_IMPORTED_MODULE_3__.Databases),\n/* harmony export */   DeploymentDownloadType: () => (/* reexport safe */ _enums_deployment_download_type_mjs__WEBPACK_IMPORTED_MODULE_28__.DeploymentDownloadType),\n/* harmony export */   ExecutionMethod: () => (/* reexport safe */ _enums_execution_method_mjs__WEBPACK_IMPORTED_MODULE_29__.ExecutionMethod),\n/* harmony export */   Flag: () => (/* reexport safe */ _enums_flag_mjs__WEBPACK_IMPORTED_MODULE_22__.Flag),\n/* harmony export */   Framework: () => (/* reexport safe */ _enums_framework_mjs__WEBPACK_IMPORTED_MODULE_33__.Framework),\n/* harmony export */   Functions: () => (/* reexport safe */ _services_functions_mjs__WEBPACK_IMPORTED_MODULE_4__.Functions),\n/* harmony export */   Graphql: () => (/* reexport safe */ _services_graphql_mjs__WEBPACK_IMPORTED_MODULE_5__.Graphql),\n/* harmony export */   Health: () => (/* reexport safe */ _services_health_mjs__WEBPACK_IMPORTED_MODULE_6__.Health),\n/* harmony export */   ID: () => (/* reexport safe */ _id_mjs__WEBPACK_IMPORTED_MODULE_16__.ID),\n/* harmony export */   ImageFormat: () => (/* reexport safe */ _enums_image_format_mjs__WEBPACK_IMPORTED_MODULE_38__.ImageFormat),\n/* harmony export */   ImageGravity: () => (/* reexport safe */ _enums_image_gravity_mjs__WEBPACK_IMPORTED_MODULE_37__.ImageGravity),\n/* harmony export */   IndexType: () => (/* reexport safe */ _enums_index_type_mjs__WEBPACK_IMPORTED_MODULE_25__.IndexType),\n/* harmony export */   Locale: () => (/* reexport safe */ _services_locale_mjs__WEBPACK_IMPORTED_MODULE_7__.Locale),\n/* harmony export */   MessagePriority: () => (/* reexport safe */ _enums_message_priority_mjs__WEBPACK_IMPORTED_MODULE_31__.MessagePriority),\n/* harmony export */   Messaging: () => (/* reexport safe */ _services_messaging_mjs__WEBPACK_IMPORTED_MODULE_8__.Messaging),\n/* harmony export */   MessagingProviderType: () => (/* reexport safe */ _enums_messaging_provider_type_mjs__WEBPACK_IMPORTED_MODULE_40__.MessagingProviderType),\n/* harmony export */   Name: () => (/* reexport safe */ _enums_name_mjs__WEBPACK_IMPORTED_MODULE_30__.Name),\n/* harmony export */   OAuthProvider: () => (/* reexport safe */ _enums_o_auth_provider_mjs__WEBPACK_IMPORTED_MODULE_19__.OAuthProvider),\n/* harmony export */   PasswordHash: () => (/* reexport safe */ _enums_password_hash_mjs__WEBPACK_IMPORTED_MODULE_39__.PasswordHash),\n/* harmony export */   Permission: () => (/* reexport safe */ _permission_mjs__WEBPACK_IMPORTED_MODULE_14__.Permission),\n/* harmony export */   Query: () => (/* reexport safe */ _client_mjs__WEBPACK_IMPORTED_MODULE_0__.Query),\n/* harmony export */   RelationMutate: () => (/* reexport safe */ _enums_relation_mutate_mjs__WEBPACK_IMPORTED_MODULE_24__.RelationMutate),\n/* harmony export */   RelationshipType: () => (/* reexport safe */ _enums_relationship_type_mjs__WEBPACK_IMPORTED_MODULE_23__.RelationshipType),\n/* harmony export */   Role: () => (/* reexport safe */ _role_mjs__WEBPACK_IMPORTED_MODULE_15__.Role),\n/* harmony export */   Runtime: () => (/* reexport safe */ _enums_runtime_mjs__WEBPACK_IMPORTED_MODULE_26__.Runtime),\n/* harmony export */   Sites: () => (/* reexport safe */ _services_sites_mjs__WEBPACK_IMPORTED_MODULE_9__.Sites),\n/* harmony export */   SmtpEncryption: () => (/* reexport safe */ _enums_smtp_encryption_mjs__WEBPACK_IMPORTED_MODULE_32__.SmtpEncryption),\n/* harmony export */   Storage: () => (/* reexport safe */ _services_storage_mjs__WEBPACK_IMPORTED_MODULE_10__.Storage),\n/* harmony export */   Teams: () => (/* reexport safe */ _services_teams_mjs__WEBPACK_IMPORTED_MODULE_11__.Teams),\n/* harmony export */   Tokens: () => (/* reexport safe */ _services_tokens_mjs__WEBPACK_IMPORTED_MODULE_12__.Tokens),\n/* harmony export */   Users: () => (/* reexport safe */ _services_users_mjs__WEBPACK_IMPORTED_MODULE_13__.Users),\n/* harmony export */   VCSDeploymentType: () => (/* reexport safe */ _enums_v_c_s_deployment_type_mjs__WEBPACK_IMPORTED_MODULE_27__.VCSDeploymentType)\n/* harmony export */ });\n/* harmony import */ var _client_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./client.mjs */ \"(ssr)/./node_modules/node-appwrite/dist/client.mjs\");\n/* harmony import */ var _services_account_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./services/account.mjs */ \"(ssr)/./node_modules/node-appwrite/dist/services/account.mjs\");\n/* harmony import */ var _services_avatars_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./services/avatars.mjs */ \"(ssr)/./node_modules/node-appwrite/dist/services/avatars.mjs\");\n/* harmony import */ var _services_databases_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./services/databases.mjs */ \"(ssr)/./node_modules/node-appwrite/dist/services/databases.mjs\");\n/* harmony import */ var _services_functions_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./services/functions.mjs */ \"(ssr)/./node_modules/node-appwrite/dist/services/functions.mjs\");\n/* harmony import */ var _services_graphql_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./services/graphql.mjs */ \"(ssr)/./node_modules/node-appwrite/dist/services/graphql.mjs\");\n/* harmony import */ var _services_health_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./services/health.mjs */ \"(ssr)/./node_modules/node-appwrite/dist/services/health.mjs\");\n/* harmony import */ var _services_locale_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./services/locale.mjs */ \"(ssr)/./node_modules/node-appwrite/dist/services/locale.mjs\");\n/* harmony import */ var _services_messaging_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./services/messaging.mjs */ \"(ssr)/./node_modules/node-appwrite/dist/services/messaging.mjs\");\n/* harmony import */ var _services_sites_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./services/sites.mjs */ \"(ssr)/./node_modules/node-appwrite/dist/services/sites.mjs\");\n/* harmony import */ var _services_storage_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./services/storage.mjs */ \"(ssr)/./node_modules/node-appwrite/dist/services/storage.mjs\");\n/* harmony import */ var _services_teams_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./services/teams.mjs */ \"(ssr)/./node_modules/node-appwrite/dist/services/teams.mjs\");\n/* harmony import */ var _services_tokens_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./services/tokens.mjs */ \"(ssr)/./node_modules/node-appwrite/dist/services/tokens.mjs\");\n/* harmony import */ var _services_users_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./services/users.mjs */ \"(ssr)/./node_modules/node-appwrite/dist/services/users.mjs\");\n/* harmony import */ var _permission_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./permission.mjs */ \"(ssr)/./node_modules/node-appwrite/dist/permission.mjs\");\n/* harmony import */ var _role_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./role.mjs */ \"(ssr)/./node_modules/node-appwrite/dist/role.mjs\");\n/* harmony import */ var _id_mjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./id.mjs */ \"(ssr)/./node_modules/node-appwrite/dist/id.mjs\");\n/* harmony import */ var _enums_authenticator_type_mjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./enums/authenticator-type.mjs */ \"(ssr)/./node_modules/node-appwrite/dist/enums/authenticator-type.mjs\");\n/* harmony import */ var _enums_authentication_factor_mjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./enums/authentication-factor.mjs */ \"(ssr)/./node_modules/node-appwrite/dist/enums/authentication-factor.mjs\");\n/* harmony import */ var _enums_o_auth_provider_mjs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./enums/o-auth-provider.mjs */ \"(ssr)/./node_modules/node-appwrite/dist/enums/o-auth-provider.mjs\");\n/* harmony import */ var _enums_browser_mjs__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./enums/browser.mjs */ \"(ssr)/./node_modules/node-appwrite/dist/enums/browser.mjs\");\n/* harmony import */ var _enums_credit_card_mjs__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./enums/credit-card.mjs */ \"(ssr)/./node_modules/node-appwrite/dist/enums/credit-card.mjs\");\n/* harmony import */ var _enums_flag_mjs__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./enums/flag.mjs */ \"(ssr)/./node_modules/node-appwrite/dist/enums/flag.mjs\");\n/* harmony import */ var _enums_relationship_type_mjs__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./enums/relationship-type.mjs */ \"(ssr)/./node_modules/node-appwrite/dist/enums/relationship-type.mjs\");\n/* harmony import */ var _enums_relation_mutate_mjs__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./enums/relation-mutate.mjs */ \"(ssr)/./node_modules/node-appwrite/dist/enums/relation-mutate.mjs\");\n/* harmony import */ var _enums_index_type_mjs__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./enums/index-type.mjs */ \"(ssr)/./node_modules/node-appwrite/dist/enums/index-type.mjs\");\n/* harmony import */ var _enums_runtime_mjs__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./enums/runtime.mjs */ \"(ssr)/./node_modules/node-appwrite/dist/enums/runtime.mjs\");\n/* harmony import */ var _enums_v_c_s_deployment_type_mjs__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./enums/v-c-s-deployment-type.mjs */ \"(ssr)/./node_modules/node-appwrite/dist/enums/v-c-s-deployment-type.mjs\");\n/* harmony import */ var _enums_deployment_download_type_mjs__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./enums/deployment-download-type.mjs */ \"(ssr)/./node_modules/node-appwrite/dist/enums/deployment-download-type.mjs\");\n/* harmony import */ var _enums_execution_method_mjs__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./enums/execution-method.mjs */ \"(ssr)/./node_modules/node-appwrite/dist/enums/execution-method.mjs\");\n/* harmony import */ var _enums_name_mjs__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./enums/name.mjs */ \"(ssr)/./node_modules/node-appwrite/dist/enums/name.mjs\");\n/* harmony import */ var _enums_message_priority_mjs__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./enums/message-priority.mjs */ \"(ssr)/./node_modules/node-appwrite/dist/enums/message-priority.mjs\");\n/* harmony import */ var _enums_smtp_encryption_mjs__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./enums/smtp-encryption.mjs */ \"(ssr)/./node_modules/node-appwrite/dist/enums/smtp-encryption.mjs\");\n/* harmony import */ var _enums_framework_mjs__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./enums/framework.mjs */ \"(ssr)/./node_modules/node-appwrite/dist/enums/framework.mjs\");\n/* harmony import */ var _enums_build_runtime_mjs__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./enums/build-runtime.mjs */ \"(ssr)/./node_modules/node-appwrite/dist/enums/build-runtime.mjs\");\n/* harmony import */ var _enums_adapter_mjs__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./enums/adapter.mjs */ \"(ssr)/./node_modules/node-appwrite/dist/enums/adapter.mjs\");\n/* harmony import */ var _enums_compression_mjs__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./enums/compression.mjs */ \"(ssr)/./node_modules/node-appwrite/dist/enums/compression.mjs\");\n/* harmony import */ var _enums_image_gravity_mjs__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./enums/image-gravity.mjs */ \"(ssr)/./node_modules/node-appwrite/dist/enums/image-gravity.mjs\");\n/* harmony import */ var _enums_image_format_mjs__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./enums/image-format.mjs */ \"(ssr)/./node_modules/node-appwrite/dist/enums/image-format.mjs\");\n/* harmony import */ var _enums_password_hash_mjs__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./enums/password-hash.mjs */ \"(ssr)/./node_modules/node-appwrite/dist/enums/password-hash.mjs\");\n/* harmony import */ var _enums_messaging_provider_type_mjs__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./enums/messaging-provider-type.mjs */ \"(ssr)/./node_modules/node-appwrite/dist/enums/messaging-provider-type.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBZ0U7QUFDZjtBQUNBO0FBQ0k7QUFDQTtBQUNKO0FBQ0Y7QUFDQTtBQUNNO0FBQ1I7QUFDSTtBQUNKO0FBQ0U7QUFDRjtBQUNDO0FBQ1o7QUFDSjtBQUNxQztBQUNNO0FBQ2I7QUFDZDtBQUNPO0FBQ2I7QUFDeUI7QUFDSjtBQUNWO0FBQ0w7QUFDd0I7QUFDUTtBQUNmO0FBQ3ZCO0FBQ3VCO0FBQ0Y7QUFDWDtBQUNPO0FBQ1g7QUFDUTtBQUNHO0FBQ0Y7QUFDRTtBQUNtQjtBQUM1RTtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2Rpc3QvaW5kZXgubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7IEFwcHdyaXRlRXhjZXB0aW9uLCBDbGllbnQsIFF1ZXJ5IH0gZnJvbSAnLi9jbGllbnQubWpzJztcbmV4cG9ydCB7IEFjY291bnQgfSBmcm9tICcuL3NlcnZpY2VzL2FjY291bnQubWpzJztcbmV4cG9ydCB7IEF2YXRhcnMgfSBmcm9tICcuL3NlcnZpY2VzL2F2YXRhcnMubWpzJztcbmV4cG9ydCB7IERhdGFiYXNlcyB9IGZyb20gJy4vc2VydmljZXMvZGF0YWJhc2VzLm1qcyc7XG5leHBvcnQgeyBGdW5jdGlvbnMgfSBmcm9tICcuL3NlcnZpY2VzL2Z1bmN0aW9ucy5tanMnO1xuZXhwb3J0IHsgR3JhcGhxbCB9IGZyb20gJy4vc2VydmljZXMvZ3JhcGhxbC5tanMnO1xuZXhwb3J0IHsgSGVhbHRoIH0gZnJvbSAnLi9zZXJ2aWNlcy9oZWFsdGgubWpzJztcbmV4cG9ydCB7IExvY2FsZSB9IGZyb20gJy4vc2VydmljZXMvbG9jYWxlLm1qcyc7XG5leHBvcnQgeyBNZXNzYWdpbmcgfSBmcm9tICcuL3NlcnZpY2VzL21lc3NhZ2luZy5tanMnO1xuZXhwb3J0IHsgU2l0ZXMgfSBmcm9tICcuL3NlcnZpY2VzL3NpdGVzLm1qcyc7XG5leHBvcnQgeyBTdG9yYWdlIH0gZnJvbSAnLi9zZXJ2aWNlcy9zdG9yYWdlLm1qcyc7XG5leHBvcnQgeyBUZWFtcyB9IGZyb20gJy4vc2VydmljZXMvdGVhbXMubWpzJztcbmV4cG9ydCB7IFRva2VucyB9IGZyb20gJy4vc2VydmljZXMvdG9rZW5zLm1qcyc7XG5leHBvcnQgeyBVc2VycyB9IGZyb20gJy4vc2VydmljZXMvdXNlcnMubWpzJztcbmV4cG9ydCB7IFBlcm1pc3Npb24gfSBmcm9tICcuL3Blcm1pc3Npb24ubWpzJztcbmV4cG9ydCB7IFJvbGUgfSBmcm9tICcuL3JvbGUubWpzJztcbmV4cG9ydCB7IElEIH0gZnJvbSAnLi9pZC5tanMnO1xuZXhwb3J0IHsgQXV0aGVudGljYXRvclR5cGUgfSBmcm9tICcuL2VudW1zL2F1dGhlbnRpY2F0b3ItdHlwZS5tanMnO1xuZXhwb3J0IHsgQXV0aGVudGljYXRpb25GYWN0b3IgfSBmcm9tICcuL2VudW1zL2F1dGhlbnRpY2F0aW9uLWZhY3Rvci5tanMnO1xuZXhwb3J0IHsgT0F1dGhQcm92aWRlciB9IGZyb20gJy4vZW51bXMvby1hdXRoLXByb3ZpZGVyLm1qcyc7XG5leHBvcnQgeyBCcm93c2VyIH0gZnJvbSAnLi9lbnVtcy9icm93c2VyLm1qcyc7XG5leHBvcnQgeyBDcmVkaXRDYXJkIH0gZnJvbSAnLi9lbnVtcy9jcmVkaXQtY2FyZC5tanMnO1xuZXhwb3J0IHsgRmxhZyB9IGZyb20gJy4vZW51bXMvZmxhZy5tanMnO1xuZXhwb3J0IHsgUmVsYXRpb25zaGlwVHlwZSB9IGZyb20gJy4vZW51bXMvcmVsYXRpb25zaGlwLXR5cGUubWpzJztcbmV4cG9ydCB7IFJlbGF0aW9uTXV0YXRlIH0gZnJvbSAnLi9lbnVtcy9yZWxhdGlvbi1tdXRhdGUubWpzJztcbmV4cG9ydCB7IEluZGV4VHlwZSB9IGZyb20gJy4vZW51bXMvaW5kZXgtdHlwZS5tanMnO1xuZXhwb3J0IHsgUnVudGltZSB9IGZyb20gJy4vZW51bXMvcnVudGltZS5tanMnO1xuZXhwb3J0IHsgVkNTRGVwbG95bWVudFR5cGUgfSBmcm9tICcuL2VudW1zL3YtYy1zLWRlcGxveW1lbnQtdHlwZS5tanMnO1xuZXhwb3J0IHsgRGVwbG95bWVudERvd25sb2FkVHlwZSB9IGZyb20gJy4vZW51bXMvZGVwbG95bWVudC1kb3dubG9hZC10eXBlLm1qcyc7XG5leHBvcnQgeyBFeGVjdXRpb25NZXRob2QgfSBmcm9tICcuL2VudW1zL2V4ZWN1dGlvbi1tZXRob2QubWpzJztcbmV4cG9ydCB7IE5hbWUgfSBmcm9tICcuL2VudW1zL25hbWUubWpzJztcbmV4cG9ydCB7IE1lc3NhZ2VQcmlvcml0eSB9IGZyb20gJy4vZW51bXMvbWVzc2FnZS1wcmlvcml0eS5tanMnO1xuZXhwb3J0IHsgU210cEVuY3J5cHRpb24gfSBmcm9tICcuL2VudW1zL3NtdHAtZW5jcnlwdGlvbi5tanMnO1xuZXhwb3J0IHsgRnJhbWV3b3JrIH0gZnJvbSAnLi9lbnVtcy9mcmFtZXdvcmsubWpzJztcbmV4cG9ydCB7IEJ1aWxkUnVudGltZSB9IGZyb20gJy4vZW51bXMvYnVpbGQtcnVudGltZS5tanMnO1xuZXhwb3J0IHsgQWRhcHRlciB9IGZyb20gJy4vZW51bXMvYWRhcHRlci5tanMnO1xuZXhwb3J0IHsgQ29tcHJlc3Npb24gfSBmcm9tICcuL2VudW1zL2NvbXByZXNzaW9uLm1qcyc7XG5leHBvcnQgeyBJbWFnZUdyYXZpdHkgfSBmcm9tICcuL2VudW1zL2ltYWdlLWdyYXZpdHkubWpzJztcbmV4cG9ydCB7IEltYWdlRm9ybWF0IH0gZnJvbSAnLi9lbnVtcy9pbWFnZS1mb3JtYXQubWpzJztcbmV4cG9ydCB7IFBhc3N3b3JkSGFzaCB9IGZyb20gJy4vZW51bXMvcGFzc3dvcmQtaGFzaC5tanMnO1xuZXhwb3J0IHsgTWVzc2FnaW5nUHJvdmlkZXJUeXBlIH0gZnJvbSAnLi9lbnVtcy9tZXNzYWdpbmctcHJvdmlkZXItdHlwZS5tanMnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b3V0LmpzLm1hcFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-appwrite/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-appwrite/dist/permission.mjs":
/*!********************************************************!*\
  !*** ./node_modules/node-appwrite/dist/permission.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Permission: () => (/* binding */ Permission)\n/* harmony export */ });\n// src/permission.ts\nvar Permission = class {\n};\n/**\n * Generate read permission string for the provided role.\n *\n * @param {string} role\n * @returns {string}\n */\nPermission.read = (role) => {\n  return `read(\"${role}\")`;\n};\n/**\n * Generate write permission string for the provided role.\n *\n * This is an alias of update, delete, and possibly create.\n * Don't use write in combination with update, delete, or create.\n *\n * @param {string} role\n * @returns {string}\n */\nPermission.write = (role) => {\n  return `write(\"${role}\")`;\n};\n/**\n * Generate create permission string for the provided role.\n *\n * @param {string} role\n * @returns {string}\n */\nPermission.create = (role) => {\n  return `create(\"${role}\")`;\n};\n/**\n * Generate update permission string for the provided role.\n *\n * @param {string} role\n * @returns {string}\n */\nPermission.update = (role) => {\n  return `update(\"${role}\")`;\n};\n/**\n * Generate delete permission string for the provided role.\n *\n * @param {string} role\n * @returns {string}\n */\nPermission.delete = (role) => {\n  return `delete(\"${role}\")`;\n};\n\n\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=permission.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L3Blcm1pc3Npb24ubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsYUFBYTtBQUNiO0FBQ0E7QUFDQSxrQkFBa0IsS0FBSztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixhQUFhO0FBQ2I7QUFDQTtBQUNBLG1CQUFtQixLQUFLO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLGFBQWE7QUFDYjtBQUNBO0FBQ0Esb0JBQW9CLEtBQUs7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsYUFBYTtBQUNiO0FBQ0E7QUFDQSxvQkFBb0IsS0FBSztBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixhQUFhO0FBQ2I7QUFDQTtBQUNBLG9CQUFvQixLQUFLO0FBQ3pCOztBQUVzQjtBQUN0QjtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2Rpc3QvcGVybWlzc2lvbi5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL3Blcm1pc3Npb24udHNcbnZhciBQZXJtaXNzaW9uID0gY2xhc3Mge1xufTtcbi8qKlxuICogR2VuZXJhdGUgcmVhZCBwZXJtaXNzaW9uIHN0cmluZyBmb3IgdGhlIHByb3ZpZGVkIHJvbGUuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHJvbGVcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cblBlcm1pc3Npb24ucmVhZCA9IChyb2xlKSA9PiB7XG4gIHJldHVybiBgcmVhZChcIiR7cm9sZX1cIilgO1xufTtcbi8qKlxuICogR2VuZXJhdGUgd3JpdGUgcGVybWlzc2lvbiBzdHJpbmcgZm9yIHRoZSBwcm92aWRlZCByb2xlLlxuICpcbiAqIFRoaXMgaXMgYW4gYWxpYXMgb2YgdXBkYXRlLCBkZWxldGUsIGFuZCBwb3NzaWJseSBjcmVhdGUuXG4gKiBEb24ndCB1c2Ugd3JpdGUgaW4gY29tYmluYXRpb24gd2l0aCB1cGRhdGUsIGRlbGV0ZSwgb3IgY3JlYXRlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSByb2xlXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5QZXJtaXNzaW9uLndyaXRlID0gKHJvbGUpID0+IHtcbiAgcmV0dXJuIGB3cml0ZShcIiR7cm9sZX1cIilgO1xufTtcbi8qKlxuICogR2VuZXJhdGUgY3JlYXRlIHBlcm1pc3Npb24gc3RyaW5nIGZvciB0aGUgcHJvdmlkZWQgcm9sZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcm9sZVxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuUGVybWlzc2lvbi5jcmVhdGUgPSAocm9sZSkgPT4ge1xuICByZXR1cm4gYGNyZWF0ZShcIiR7cm9sZX1cIilgO1xufTtcbi8qKlxuICogR2VuZXJhdGUgdXBkYXRlIHBlcm1pc3Npb24gc3RyaW5nIGZvciB0aGUgcHJvdmlkZWQgcm9sZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcm9sZVxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuUGVybWlzc2lvbi51cGRhdGUgPSAocm9sZSkgPT4ge1xuICByZXR1cm4gYHVwZGF0ZShcIiR7cm9sZX1cIilgO1xufTtcbi8qKlxuICogR2VuZXJhdGUgZGVsZXRlIHBlcm1pc3Npb24gc3RyaW5nIGZvciB0aGUgcHJvdmlkZWQgcm9sZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcm9sZVxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuUGVybWlzc2lvbi5kZWxldGUgPSAocm9sZSkgPT4ge1xuICByZXR1cm4gYGRlbGV0ZShcIiR7cm9sZX1cIilgO1xufTtcblxuZXhwb3J0IHsgUGVybWlzc2lvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b3V0LmpzLm1hcFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGVybWlzc2lvbi5tanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-appwrite/dist/permission.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-appwrite/dist/query.mjs":
/*!***************************************************!*\
  !*** ./node_modules/node-appwrite/dist/query.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Query: () => (/* binding */ Query)\n/* harmony export */ });\n// src/query.ts\nvar _Query = class _Query {\n  /**\n   * Constructor for Query class.\n   *\n   * @param {string} method\n   * @param {AttributesTypes} attribute\n   * @param {QueryTypes} values\n   */\n  constructor(method, attribute, values) {\n    this.method = method;\n    this.attribute = attribute;\n    if (values !== void 0) {\n      if (Array.isArray(values)) {\n        this.values = values;\n      } else {\n        this.values = [values];\n      }\n    }\n  }\n  /**\n   * Convert the query object to a JSON string.\n   *\n   * @returns {string}\n   */\n  toString() {\n    return JSON.stringify({\n      method: this.method,\n      attribute: this.attribute,\n      values: this.values\n    });\n  }\n};\n/**\n * Filter resources where attribute is equal to value.\n *\n * @param {string} attribute\n * @param {QueryTypes} value\n * @returns {string}\n */\n_Query.equal = (attribute, value) => new _Query(\"equal\", attribute, value).toString();\n/**\n * Filter resources where attribute is not equal to value.\n *\n * @param {string} attribute\n * @param {QueryTypes} value\n * @returns {string}\n */\n_Query.notEqual = (attribute, value) => new _Query(\"notEqual\", attribute, value).toString();\n/**\n * Filter resources where attribute is less than value.\n *\n * @param {string} attribute\n * @param {QueryTypes} value\n * @returns {string}\n */\n_Query.lessThan = (attribute, value) => new _Query(\"lessThan\", attribute, value).toString();\n/**\n * Filter resources where attribute is less than or equal to value.\n *\n * @param {string} attribute\n * @param {QueryTypes} value\n * @returns {string}\n */\n_Query.lessThanEqual = (attribute, value) => new _Query(\"lessThanEqual\", attribute, value).toString();\n/**\n * Filter resources where attribute is greater than value.\n *\n * @param {string} attribute\n * @param {QueryTypes} value\n * @returns {string}\n */\n_Query.greaterThan = (attribute, value) => new _Query(\"greaterThan\", attribute, value).toString();\n/**\n * Filter resources where attribute is greater than or equal to value.\n *\n * @param {string} attribute\n * @param {QueryTypes} value\n * @returns {string}\n */\n_Query.greaterThanEqual = (attribute, value) => new _Query(\"greaterThanEqual\", attribute, value).toString();\n/**\n * Filter resources where attribute is null.\n *\n * @param {string} attribute\n * @returns {string}\n */\n_Query.isNull = (attribute) => new _Query(\"isNull\", attribute).toString();\n/**\n * Filter resources where attribute is not null.\n *\n * @param {string} attribute\n * @returns {string}\n */\n_Query.isNotNull = (attribute) => new _Query(\"isNotNull\", attribute).toString();\n/**\n * Filter resources where attribute is between start and end (inclusive).\n *\n * @param {string} attribute\n * @param {string | number} start\n * @param {string | number} end\n * @returns {string}\n */\n_Query.between = (attribute, start, end) => new _Query(\"between\", attribute, [start, end]).toString();\n/**\n * Filter resources where attribute starts with value.\n *\n * @param {string} attribute\n * @param {string} value\n * @returns {string}\n */\n_Query.startsWith = (attribute, value) => new _Query(\"startsWith\", attribute, value).toString();\n/**\n * Filter resources where attribute ends with value.\n *\n * @param {string} attribute\n * @param {string} value\n * @returns {string}\n */\n_Query.endsWith = (attribute, value) => new _Query(\"endsWith\", attribute, value).toString();\n/**\n * Specify which attributes should be returned by the API call.\n *\n * @param {string[]} attributes\n * @returns {string}\n */\n_Query.select = (attributes) => new _Query(\"select\", void 0, attributes).toString();\n/**\n * Filter resources by searching attribute for value.\n * A fulltext index on attribute is required for this query to work.\n *\n * @param {string} attribute\n * @param {string} value\n * @returns {string}\n */\n_Query.search = (attribute, value) => new _Query(\"search\", attribute, value).toString();\n/**\n * Sort results by attribute descending.\n *\n * @param {string} attribute\n * @returns {string}\n */\n_Query.orderDesc = (attribute) => new _Query(\"orderDesc\", attribute).toString();\n/**\n * Sort results by attribute ascending.\n *\n * @param {string} attribute\n * @returns {string}\n */\n_Query.orderAsc = (attribute) => new _Query(\"orderAsc\", attribute).toString();\n/**\n * Return results after documentId.\n *\n * @param {string} documentId\n * @returns {string}\n */\n_Query.cursorAfter = (documentId) => new _Query(\"cursorAfter\", void 0, documentId).toString();\n/**\n * Return results before documentId.\n *\n * @param {string} documentId\n * @returns {string}\n */\n_Query.cursorBefore = (documentId) => new _Query(\"cursorBefore\", void 0, documentId).toString();\n/**\n * Return only limit results.\n *\n * @param {number} limit\n * @returns {string}\n */\n_Query.limit = (limit) => new _Query(\"limit\", void 0, limit).toString();\n/**\n * Filter resources by skipping the first offset results.\n *\n * @param {number} offset\n * @returns {string}\n */\n_Query.offset = (offset) => new _Query(\"offset\", void 0, offset).toString();\n/**\n * Filter resources where attribute contains the specified value.\n *\n * @param {string} attribute\n * @param {string | string[]} value\n * @returns {string}\n */\n_Query.contains = (attribute, value) => new _Query(\"contains\", attribute, value).toString();\n/**\n * Combine multiple queries using logical OR operator.\n *\n * @param {string[]} queries\n * @returns {string}\n */\n_Query.or = (queries) => new _Query(\"or\", void 0, queries.map((query) => JSON.parse(query))).toString();\n/**\n * Combine multiple queries using logical AND operator.\n *\n * @param {string[]} queries\n * @returns {string}\n */\n_Query.and = (queries) => new _Query(\"and\", void 0, queries.map((query) => JSON.parse(query))).toString();\nvar Query = _Query;\n\n\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=query.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-appwrite/dist/query.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-appwrite/dist/role.mjs":
/*!**************************************************!*\
  !*** ./node_modules/node-appwrite/dist/role.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Role: () => (/* binding */ Role)\n/* harmony export */ });\n// src/role.ts\nvar Role = class {\n  /**\n   * Grants access to anyone.\n   * \n   * This includes authenticated and unauthenticated users.\n   * \n   * @returns {string}\n   */\n  static any() {\n    return \"any\";\n  }\n  /**\n   * Grants access to a specific user by user ID.\n   * \n   * You can optionally pass verified or unverified for\n   * `status` to target specific types of users.\n   *\n   * @param {string} id \n   * @param {string} status \n   * @returns {string}\n   */\n  static user(id, status = \"\") {\n    if (status === \"\") {\n      return `user:${id}`;\n    }\n    return `user:${id}/${status}`;\n  }\n  /**\n   * Grants access to any authenticated or anonymous user.\n   * \n   * You can optionally pass verified or unverified for\n   * `status` to target specific types of users.\n   * \n   * @param {string} status \n   * @returns {string}\n   */\n  static users(status = \"\") {\n    if (status === \"\") {\n      return \"users\";\n    }\n    return `users/${status}`;\n  }\n  /**\n   * Grants access to any guest user without a session.\n   * \n   * Authenticated users don't have access to this role.\n   * \n   * @returns {string}\n   */\n  static guests() {\n    return \"guests\";\n  }\n  /**\n   * Grants access to a team by team ID.\n   * \n   * You can optionally pass a role for `role` to target\n   * team members with the specified role.\n   * \n   * @param {string} id \n   * @param {string} role \n   * @returns {string}\n   */\n  static team(id, role = \"\") {\n    if (role === \"\") {\n      return `team:${id}`;\n    }\n    return `team:${id}/${role}`;\n  }\n  /**\n   * Grants access to a specific member of a team.\n   * \n   * When the member is removed from the team, they will\n   * no longer have access.\n   * \n   * @param {string} id \n   * @returns {string}\n   */\n  static member(id) {\n    return `member:${id}`;\n  }\n  /**\n   * Grants access to a user with the specified label.\n   * \n   * @param {string} name \n   * @returns  {string}\n   */\n  static label(name) {\n    return `label:${name}`;\n  }\n};\n\n\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=role.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L3JvbGUubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixHQUFHO0FBQ3hCO0FBQ0EsbUJBQW1CLEdBQUcsR0FBRyxPQUFPO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLE9BQU87QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLEdBQUc7QUFDeEI7QUFDQSxtQkFBbUIsR0FBRyxHQUFHLEtBQUs7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsZUFBZTtBQUNmO0FBQ0E7QUFDQSxxQkFBcUIsR0FBRztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLG9CQUFvQixLQUFLO0FBQ3pCO0FBQ0E7O0FBRWdCO0FBQ2hCO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3Jrc3BhY2Uvbm9kZV9tb2R1bGVzL25vZGUtYXBwd3JpdGUvZGlzdC9yb2xlLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvcm9sZS50c1xudmFyIFJvbGUgPSBjbGFzcyB7XG4gIC8qKlxuICAgKiBHcmFudHMgYWNjZXNzIHRvIGFueW9uZS5cbiAgICogXG4gICAqIFRoaXMgaW5jbHVkZXMgYXV0aGVudGljYXRlZCBhbmQgdW5hdXRoZW50aWNhdGVkIHVzZXJzLlxuICAgKiBcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIHN0YXRpYyBhbnkoKSB7XG4gICAgcmV0dXJuIFwiYW55XCI7XG4gIH1cbiAgLyoqXG4gICAqIEdyYW50cyBhY2Nlc3MgdG8gYSBzcGVjaWZpYyB1c2VyIGJ5IHVzZXIgSUQuXG4gICAqIFxuICAgKiBZb3UgY2FuIG9wdGlvbmFsbHkgcGFzcyB2ZXJpZmllZCBvciB1bnZlcmlmaWVkIGZvclxuICAgKiBgc3RhdHVzYCB0byB0YXJnZXQgc3BlY2lmaWMgdHlwZXMgb2YgdXNlcnMuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0YXR1cyBcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIHN0YXRpYyB1c2VyKGlkLCBzdGF0dXMgPSBcIlwiKSB7XG4gICAgaWYgKHN0YXR1cyA9PT0gXCJcIikge1xuICAgICAgcmV0dXJuIGB1c2VyOiR7aWR9YDtcbiAgICB9XG4gICAgcmV0dXJuIGB1c2VyOiR7aWR9LyR7c3RhdHVzfWA7XG4gIH1cbiAgLyoqXG4gICAqIEdyYW50cyBhY2Nlc3MgdG8gYW55IGF1dGhlbnRpY2F0ZWQgb3IgYW5vbnltb3VzIHVzZXIuXG4gICAqIFxuICAgKiBZb3UgY2FuIG9wdGlvbmFsbHkgcGFzcyB2ZXJpZmllZCBvciB1bnZlcmlmaWVkIGZvclxuICAgKiBgc3RhdHVzYCB0byB0YXJnZXQgc3BlY2lmaWMgdHlwZXMgb2YgdXNlcnMuXG4gICAqIFxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RhdHVzIFxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgc3RhdGljIHVzZXJzKHN0YXR1cyA9IFwiXCIpIHtcbiAgICBpZiAoc3RhdHVzID09PSBcIlwiKSB7XG4gICAgICByZXR1cm4gXCJ1c2Vyc1wiO1xuICAgIH1cbiAgICByZXR1cm4gYHVzZXJzLyR7c3RhdHVzfWA7XG4gIH1cbiAgLyoqXG4gICAqIEdyYW50cyBhY2Nlc3MgdG8gYW55IGd1ZXN0IHVzZXIgd2l0aG91dCBhIHNlc3Npb24uXG4gICAqIFxuICAgKiBBdXRoZW50aWNhdGVkIHVzZXJzIGRvbid0IGhhdmUgYWNjZXNzIHRvIHRoaXMgcm9sZS5cbiAgICogXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICBzdGF0aWMgZ3Vlc3RzKCkge1xuICAgIHJldHVybiBcImd1ZXN0c1wiO1xuICB9XG4gIC8qKlxuICAgKiBHcmFudHMgYWNjZXNzIHRvIGEgdGVhbSBieSB0ZWFtIElELlxuICAgKiBcbiAgICogWW91IGNhbiBvcHRpb25hbGx5IHBhc3MgYSByb2xlIGZvciBgcm9sZWAgdG8gdGFyZ2V0XG4gICAqIHRlYW0gbWVtYmVycyB3aXRoIHRoZSBzcGVjaWZpZWQgcm9sZS5cbiAgICogXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJvbGUgXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICBzdGF0aWMgdGVhbShpZCwgcm9sZSA9IFwiXCIpIHtcbiAgICBpZiAocm9sZSA9PT0gXCJcIikge1xuICAgICAgcmV0dXJuIGB0ZWFtOiR7aWR9YDtcbiAgICB9XG4gICAgcmV0dXJuIGB0ZWFtOiR7aWR9LyR7cm9sZX1gO1xuICB9XG4gIC8qKlxuICAgKiBHcmFudHMgYWNjZXNzIHRvIGEgc3BlY2lmaWMgbWVtYmVyIG9mIGEgdGVhbS5cbiAgICogXG4gICAqIFdoZW4gdGhlIG1lbWJlciBpcyByZW1vdmVkIGZyb20gdGhlIHRlYW0sIHRoZXkgd2lsbFxuICAgKiBubyBsb25nZXIgaGF2ZSBhY2Nlc3MuXG4gICAqIFxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICBzdGF0aWMgbWVtYmVyKGlkKSB7XG4gICAgcmV0dXJuIGBtZW1iZXI6JHtpZH1gO1xuICB9XG4gIC8qKlxuICAgKiBHcmFudHMgYWNjZXNzIHRvIGEgdXNlciB3aXRoIHRoZSBzcGVjaWZpZWQgbGFiZWwuXG4gICAqIFxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBcbiAgICogQHJldHVybnMgIHtzdHJpbmd9XG4gICAqL1xuICBzdGF0aWMgbGFiZWwobmFtZSkge1xuICAgIHJldHVybiBgbGFiZWw6JHtuYW1lfWA7XG4gIH1cbn07XG5cbmV4cG9ydCB7IFJvbGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW91dC5qcy5tYXBcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJvbGUubWpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-appwrite/dist/role.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-appwrite/dist/services/account.mjs":
/*!**************************************************************!*\
  !*** ./node_modules/node-appwrite/dist/services/account.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Account: () => (/* binding */ Account)\n/* harmony export */ });\n/* harmony import */ var _client_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../client.mjs */ \"(ssr)/./node_modules/node-appwrite/dist/client.mjs\");\n\n\n// src/services/account.ts\nvar Account = class {\n  constructor(client) {\n    this.client = client;\n  }\n  /**\n   * Get the currently logged in user.\n   *\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.User<Preferences>>}\n   */\n  get() {\n    const apiPath = \"/account\";\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Use this endpoint to allow a new user to register a new account in your project. After the user registration completes successfully, you can use the [/account/verfication](https://appwrite.io/docs/references/cloud/client-web/account#createVerification) route to start verifying the user email address. To allow the new user to login to their new account, you need to create a new [account session](https://appwrite.io/docs/references/cloud/client-web/account#createEmailSession).\n   *\n   * @param {string} userId\n   * @param {string} email\n   * @param {string} password\n   * @param {string} name\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.User<Preferences>>}\n   */\n  create(userId, email, password, name) {\n    if (typeof userId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"userId\"');\n    }\n    if (typeof email === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"email\"');\n    }\n    if (typeof password === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"password\"');\n    }\n    const apiPath = \"/account\";\n    const payload = {};\n    if (typeof userId !== \"undefined\") {\n      payload[\"userId\"] = userId;\n    }\n    if (typeof email !== \"undefined\") {\n      payload[\"email\"] = email;\n    }\n    if (typeof password !== \"undefined\") {\n      payload[\"password\"] = password;\n    }\n    if (typeof name !== \"undefined\") {\n      payload[\"name\"] = name;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n       * Update currently logged in user account email address. After changing user address, the user confirmation status will get reset. A new confirmation email is not sent automatically however you can use the send confirmation email endpoint again to send the confirmation email. For security measures, user password is required to complete this request.\n  This endpoint can also be used to convert an anonymous account to a normal one, by passing an email address and a new password.\n  \n       *\n       * @param {string} email\n       * @param {string} password\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.User<Preferences>>}\n       */\n  updateEmail(email, password) {\n    if (typeof email === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"email\"');\n    }\n    if (typeof password === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"password\"');\n    }\n    const apiPath = \"/account/email\";\n    const payload = {};\n    if (typeof email !== \"undefined\") {\n      payload[\"email\"] = email;\n    }\n    if (typeof password !== \"undefined\") {\n      payload[\"password\"] = password;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"patch\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Get the list of identities for the currently logged in user.\n   *\n   * @param {string[]} queries\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.IdentityList>}\n   */\n  listIdentities(queries) {\n    const apiPath = \"/account/identities\";\n    const payload = {};\n    if (typeof queries !== \"undefined\") {\n      payload[\"queries\"] = queries;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Delete an identity by its unique ID.\n   *\n   * @param {string} identityId\n   * @throws {AppwriteException}\n   * @returns {Promise<{}>}\n   */\n  deleteIdentity(identityId) {\n    if (typeof identityId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"identityId\"');\n    }\n    const apiPath = \"/account/identities/{identityId}\".replace(\"{identityId}\", identityId);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"delete\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Use this endpoint to create a JSON Web Token. You can use the resulting JWT to authenticate on behalf of the current user when working with the Appwrite server-side API and SDKs. The JWT secret is valid for 15 minutes from its creation and will be invalid if the user will logout in that time frame.\n   *\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Jwt>}\n   */\n  createJWT() {\n    const apiPath = \"/account/jwts\";\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Get the list of latest security activity logs for the currently logged in user. Each log returns user IP address, location and date and time of log.\n   *\n   * @param {string[]} queries\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.LogList>}\n   */\n  listLogs(queries) {\n    const apiPath = \"/account/logs\";\n    const payload = {};\n    if (typeof queries !== \"undefined\") {\n      payload[\"queries\"] = queries;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Enable or disable MFA on an account.\n   *\n   * @param {boolean} mfa\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.User<Preferences>>}\n   */\n  updateMFA(mfa) {\n    if (typeof mfa === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"mfa\"');\n    }\n    const apiPath = \"/account/mfa\";\n    const payload = {};\n    if (typeof mfa !== \"undefined\") {\n      payload[\"mfa\"] = mfa;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"patch\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Add an authenticator app to be used as an MFA factor. Verify the authenticator using the [verify authenticator](/docs/references/cloud/client-web/account#updateMfaAuthenticator) method.\n   *\n   * @param {AuthenticatorType} type\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.MfaType>}\n   */\n  createMfaAuthenticator(type) {\n    if (typeof type === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"type\"');\n    }\n    const apiPath = \"/account/mfa/authenticators/{type}\".replace(\"{type}\", type);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Verify an authenticator app after adding it using the [add authenticator](/docs/references/cloud/client-web/account#createMfaAuthenticator) method.\n   *\n   * @param {AuthenticatorType} type\n   * @param {string} otp\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.User<Preferences>>}\n   */\n  updateMfaAuthenticator(type, otp) {\n    if (typeof type === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"type\"');\n    }\n    if (typeof otp === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"otp\"');\n    }\n    const apiPath = \"/account/mfa/authenticators/{type}\".replace(\"{type}\", type);\n    const payload = {};\n    if (typeof otp !== \"undefined\") {\n      payload[\"otp\"] = otp;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"put\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Delete an authenticator for a user by ID.\n   *\n   * @param {AuthenticatorType} type\n   * @throws {AppwriteException}\n   * @returns {Promise<{}>}\n   */\n  deleteMfaAuthenticator(type) {\n    if (typeof type === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"type\"');\n    }\n    const apiPath = \"/account/mfa/authenticators/{type}\".replace(\"{type}\", type);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"delete\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Begin the process of MFA verification after sign-in. Finish the flow with [updateMfaChallenge](/docs/references/cloud/client-web/account#updateMfaChallenge) method.\n   *\n   * @param {AuthenticationFactor} factor\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.MfaChallenge>}\n   */\n  createMfaChallenge(factor) {\n    if (typeof factor === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"factor\"');\n    }\n    const apiPath = \"/account/mfa/challenge\";\n    const payload = {};\n    if (typeof factor !== \"undefined\") {\n      payload[\"factor\"] = factor;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Complete the MFA challenge by providing the one-time password. Finish the process of MFA verification by providing the one-time password. To begin the flow, use [createMfaChallenge](/docs/references/cloud/client-web/account#createMfaChallenge) method.\n   *\n   * @param {string} challengeId\n   * @param {string} otp\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Session>}\n   */\n  updateMfaChallenge(challengeId, otp) {\n    if (typeof challengeId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"challengeId\"');\n    }\n    if (typeof otp === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"otp\"');\n    }\n    const apiPath = \"/account/mfa/challenge\";\n    const payload = {};\n    if (typeof challengeId !== \"undefined\") {\n      payload[\"challengeId\"] = challengeId;\n    }\n    if (typeof otp !== \"undefined\") {\n      payload[\"otp\"] = otp;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"put\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * List the factors available on the account to be used as a MFA challange.\n   *\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.MfaFactors>}\n   */\n  listMfaFactors() {\n    const apiPath = \"/account/mfa/factors\";\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Get recovery codes that can be used as backup for MFA flow. Before getting codes, they must be generated using [createMfaRecoveryCodes](/docs/references/cloud/client-web/account#createMfaRecoveryCodes) method. An OTP challenge is required to read recovery codes.\n   *\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.MfaRecoveryCodes>}\n   */\n  getMfaRecoveryCodes() {\n    const apiPath = \"/account/mfa/recovery-codes\";\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Generate recovery codes as backup for MFA flow. It&#039;s recommended to generate and show then immediately after user successfully adds their authehticator. Recovery codes can be used as a MFA verification type in [createMfaChallenge](/docs/references/cloud/client-web/account#createMfaChallenge) method.\n   *\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.MfaRecoveryCodes>}\n   */\n  createMfaRecoveryCodes() {\n    const apiPath = \"/account/mfa/recovery-codes\";\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Regenerate recovery codes that can be used as backup for MFA flow. Before regenerating codes, they must be first generated using [createMfaRecoveryCodes](/docs/references/cloud/client-web/account#createMfaRecoveryCodes) method. An OTP challenge is required to regenreate recovery codes.\n   *\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.MfaRecoveryCodes>}\n   */\n  updateMfaRecoveryCodes() {\n    const apiPath = \"/account/mfa/recovery-codes\";\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"patch\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Update currently logged in user account name.\n   *\n   * @param {string} name\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.User<Preferences>>}\n   */\n  updateName(name) {\n    if (typeof name === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"name\"');\n    }\n    const apiPath = \"/account/name\";\n    const payload = {};\n    if (typeof name !== \"undefined\") {\n      payload[\"name\"] = name;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"patch\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Update currently logged in user password. For validation, user is required to pass in the new password, and the old password. For users created with OAuth, Team Invites and Magic URL, oldPassword is optional.\n   *\n   * @param {string} password\n   * @param {string} oldPassword\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.User<Preferences>>}\n   */\n  updatePassword(password, oldPassword) {\n    if (typeof password === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"password\"');\n    }\n    const apiPath = \"/account/password\";\n    const payload = {};\n    if (typeof password !== \"undefined\") {\n      payload[\"password\"] = password;\n    }\n    if (typeof oldPassword !== \"undefined\") {\n      payload[\"oldPassword\"] = oldPassword;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"patch\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Update the currently logged in user&#039;s phone number. After updating the phone number, the phone verification status will be reset. A confirmation SMS is not sent automatically, however you can use the [POST /account/verification/phone](https://appwrite.io/docs/references/cloud/client-web/account#createPhoneVerification) endpoint to send a confirmation SMS.\n   *\n   * @param {string} phone\n   * @param {string} password\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.User<Preferences>>}\n   */\n  updatePhone(phone, password) {\n    if (typeof phone === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"phone\"');\n    }\n    if (typeof password === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"password\"');\n    }\n    const apiPath = \"/account/phone\";\n    const payload = {};\n    if (typeof phone !== \"undefined\") {\n      payload[\"phone\"] = phone;\n    }\n    if (typeof password !== \"undefined\") {\n      payload[\"password\"] = password;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"patch\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Get the preferences as a key-value object for the currently logged in user.\n   *\n   * @throws {AppwriteException}\n   * @returns {Promise<Preferences>}\n   */\n  getPrefs() {\n    const apiPath = \"/account/prefs\";\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Update currently logged in user account preferences. The object you pass is stored as is, and replaces any previous value. The maximum allowed prefs size is 64kB and throws error if exceeded.\n   *\n   * @param {Partial<Preferences>} prefs\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.User<Preferences>>}\n   */\n  updatePrefs(prefs) {\n    if (typeof prefs === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"prefs\"');\n    }\n    const apiPath = \"/account/prefs\";\n    const payload = {};\n    if (typeof prefs !== \"undefined\") {\n      payload[\"prefs\"] = prefs;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"patch\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Sends the user an email with a temporary secret key for password reset. When the user clicks the confirmation link he is redirected back to your app password reset URL with the secret key and email address values attached to the URL query string. Use the query string params to submit a request to the [PUT /account/recovery](https://appwrite.io/docs/references/cloud/client-web/account#updateRecovery) endpoint to complete the process. The verification link sent to the user&#039;s email address is valid for 1 hour.\n   *\n   * @param {string} email\n   * @param {string} url\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Token>}\n   */\n  createRecovery(email, url) {\n    if (typeof email === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"email\"');\n    }\n    if (typeof url === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"url\"');\n    }\n    const apiPath = \"/account/recovery\";\n    const payload = {};\n    if (typeof email !== \"undefined\") {\n      payload[\"email\"] = email;\n    }\n    if (typeof url !== \"undefined\") {\n      payload[\"url\"] = url;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n       * Use this endpoint to complete the user account password reset. Both the **userId** and **secret** arguments will be passed as query parameters to the redirect URL you have provided when sending your request to the [POST /account/recovery](https://appwrite.io/docs/references/cloud/client-web/account#createRecovery) endpoint.\n  \n  Please note that in order to avoid a [Redirect Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md) the only valid redirect URLs are the ones from domains you have set when adding your platforms in the console interface.\n       *\n       * @param {string} userId\n       * @param {string} secret\n       * @param {string} password\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.Token>}\n       */\n  updateRecovery(userId, secret, password) {\n    if (typeof userId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"userId\"');\n    }\n    if (typeof secret === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"secret\"');\n    }\n    if (typeof password === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"password\"');\n    }\n    const apiPath = \"/account/recovery\";\n    const payload = {};\n    if (typeof userId !== \"undefined\") {\n      payload[\"userId\"] = userId;\n    }\n    if (typeof secret !== \"undefined\") {\n      payload[\"secret\"] = secret;\n    }\n    if (typeof password !== \"undefined\") {\n      payload[\"password\"] = password;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"put\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Get the list of active sessions across different devices for the currently logged in user.\n   *\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.SessionList>}\n   */\n  listSessions() {\n    const apiPath = \"/account/sessions\";\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Delete all sessions from the user account and remove any sessions cookies from the end client.\n   *\n   * @throws {AppwriteException}\n   * @returns {Promise<{}>}\n   */\n  deleteSessions() {\n    const apiPath = \"/account/sessions\";\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"delete\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Use this endpoint to allow a new user to register an anonymous account in your project. This route will also create a new session for the user. To allow the new user to convert an anonymous account to a normal account, you need to update its [email and password](https://appwrite.io/docs/references/cloud/client-web/account#updateEmail) or create an [OAuth2 session](https://appwrite.io/docs/references/cloud/client-web/account#CreateOAuth2Session).\n   *\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Session>}\n   */\n  createAnonymousSession() {\n    const apiPath = \"/account/sessions/anonymous\";\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n       * Allow the user to login into their account by providing a valid email and password combination. This route will create a new session for the user.\n  \n  A user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://appwrite.io/docs/authentication-security#limits).\n       *\n       * @param {string} email\n       * @param {string} password\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.Session>}\n       */\n  createEmailPasswordSession(email, password) {\n    if (typeof email === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"email\"');\n    }\n    if (typeof password === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"password\"');\n    }\n    const apiPath = \"/account/sessions/email\";\n    const payload = {};\n    if (typeof email !== \"undefined\") {\n      payload[\"email\"] = email;\n    }\n    if (typeof password !== \"undefined\") {\n      payload[\"password\"] = password;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Use this endpoint to create a session from token. Provide the **userId** and **secret** parameters from the successful response of authentication flows initiated by token creation. For example, magic URL and phone login.\n   *\n   * @param {string} userId\n   * @param {string} secret\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Session>}\n   */\n  updateMagicURLSession(userId, secret) {\n    if (typeof userId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"userId\"');\n    }\n    if (typeof secret === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"secret\"');\n    }\n    const apiPath = \"/account/sessions/magic-url\";\n    const payload = {};\n    if (typeof userId !== \"undefined\") {\n      payload[\"userId\"] = userId;\n    }\n    if (typeof secret !== \"undefined\") {\n      payload[\"secret\"] = secret;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"put\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Use this endpoint to create a session from token. Provide the **userId** and **secret** parameters from the successful response of authentication flows initiated by token creation. For example, magic URL and phone login.\n   *\n   * @param {string} userId\n   * @param {string} secret\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Session>}\n   */\n  updatePhoneSession(userId, secret) {\n    if (typeof userId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"userId\"');\n    }\n    if (typeof secret === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"secret\"');\n    }\n    const apiPath = \"/account/sessions/phone\";\n    const payload = {};\n    if (typeof userId !== \"undefined\") {\n      payload[\"userId\"] = userId;\n    }\n    if (typeof secret !== \"undefined\") {\n      payload[\"secret\"] = secret;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"put\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Use this endpoint to create a session from token. Provide the **userId** and **secret** parameters from the successful response of authentication flows initiated by token creation. For example, magic URL and phone login.\n   *\n   * @param {string} userId\n   * @param {string} secret\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Session>}\n   */\n  createSession(userId, secret) {\n    if (typeof userId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"userId\"');\n    }\n    if (typeof secret === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"secret\"');\n    }\n    const apiPath = \"/account/sessions/token\";\n    const payload = {};\n    if (typeof userId !== \"undefined\") {\n      payload[\"userId\"] = userId;\n    }\n    if (typeof secret !== \"undefined\") {\n      payload[\"secret\"] = secret;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Use this endpoint to get a logged in user&#039;s session using a Session ID. Inputting &#039;current&#039; will return the current session being used.\n   *\n   * @param {string} sessionId\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Session>}\n   */\n  getSession(sessionId) {\n    if (typeof sessionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"sessionId\"');\n    }\n    const apiPath = \"/account/sessions/{sessionId}\".replace(\"{sessionId}\", sessionId);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Use this endpoint to extend a session&#039;s length. Extending a session is useful when session expiry is short. If the session was created using an OAuth provider, this endpoint refreshes the access token from the provider.\n   *\n   * @param {string} sessionId\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Session>}\n   */\n  updateSession(sessionId) {\n    if (typeof sessionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"sessionId\"');\n    }\n    const apiPath = \"/account/sessions/{sessionId}\".replace(\"{sessionId}\", sessionId);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"patch\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Logout the user. Use &#039;current&#039; as the session ID to logout on this device, use a session ID to logout on another device. If you&#039;re looking to logout the user on all devices, use [Delete Sessions](https://appwrite.io/docs/references/cloud/client-web/account#deleteSessions) instead.\n   *\n   * @param {string} sessionId\n   * @throws {AppwriteException}\n   * @returns {Promise<{}>}\n   */\n  deleteSession(sessionId) {\n    if (typeof sessionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"sessionId\"');\n    }\n    const apiPath = \"/account/sessions/{sessionId}\".replace(\"{sessionId}\", sessionId);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"delete\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Block the currently logged in user account. Behind the scene, the user record is not deleted but permanently blocked from any access. To completely delete a user, use the Users API instead.\n   *\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.User<Preferences>>}\n   */\n  updateStatus() {\n    const apiPath = \"/account/status\";\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"patch\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n       * Sends the user an email with a secret key for creating a session. If the provided user ID has not be registered, a new user will be created. Use the returned user ID and secret and submit a request to the [POST /v1/account/sessions/token](https://appwrite.io/docs/references/cloud/client-web/account#createSession) endpoint to complete the login process. The secret sent to the user&#039;s email is valid for 15 minutes.\n  \n  A user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://appwrite.io/docs/authentication-security#limits).\n       *\n       * @param {string} userId\n       * @param {string} email\n       * @param {boolean} phrase\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.Token>}\n       */\n  createEmailToken(userId, email, phrase) {\n    if (typeof userId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"userId\"');\n    }\n    if (typeof email === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"email\"');\n    }\n    const apiPath = \"/account/tokens/email\";\n    const payload = {};\n    if (typeof userId !== \"undefined\") {\n      payload[\"userId\"] = userId;\n    }\n    if (typeof email !== \"undefined\") {\n      payload[\"email\"] = email;\n    }\n    if (typeof phrase !== \"undefined\") {\n      payload[\"phrase\"] = phrase;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n       * Sends the user an email with a secret key for creating a session. If the provided user ID has not been registered, a new user will be created. When the user clicks the link in the email, the user is redirected back to the URL you provided with the secret key and userId values attached to the URL query string. Use the query string parameters to submit a request to the [POST /v1/account/sessions/token](https://appwrite.io/docs/references/cloud/client-web/account#createSession) endpoint to complete the login process. The link sent to the user&#039;s email address is valid for 1 hour.\n  \n  A user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://appwrite.io/docs/authentication-security#limits).\n  \n       *\n       * @param {string} userId\n       * @param {string} email\n       * @param {string} url\n       * @param {boolean} phrase\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.Token>}\n       */\n  createMagicURLToken(userId, email, url, phrase) {\n    if (typeof userId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"userId\"');\n    }\n    if (typeof email === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"email\"');\n    }\n    const apiPath = \"/account/tokens/magic-url\";\n    const payload = {};\n    if (typeof userId !== \"undefined\") {\n      payload[\"userId\"] = userId;\n    }\n    if (typeof email !== \"undefined\") {\n      payload[\"email\"] = email;\n    }\n    if (typeof url !== \"undefined\") {\n      payload[\"url\"] = url;\n    }\n    if (typeof phrase !== \"undefined\") {\n      payload[\"phrase\"] = phrase;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n       * Allow the user to login to their account using the OAuth2 provider of their choice. Each OAuth2 provider should be enabled from the Appwrite console first. Use the success and failure arguments to provide a redirect URL&#039;s back to your app when login is completed. \n  \n  If authentication succeeds, `userId` and `secret` of a token will be appended to the success URL as query parameters. These can be used to create a new session using the [Create session](https://appwrite.io/docs/references/cloud/client-web/account#createSession) endpoint.\n  \n  A user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://appwrite.io/docs/authentication-security#limits).\n       *\n       * @param {OAuthProvider} provider\n       * @param {string} success\n       * @param {string} failure\n       * @param {string[]} scopes\n       * @throws {AppwriteException}\n       * @returns {Promise<string>}\n       */\n  createOAuth2Token(provider, success, failure, scopes) {\n    if (typeof provider === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"provider\"');\n    }\n    const apiPath = \"/account/tokens/oauth2/{provider}\".replace(\"{provider}\", provider);\n    const payload = {};\n    if (typeof success !== \"undefined\") {\n      payload[\"success\"] = success;\n    }\n    if (typeof failure !== \"undefined\") {\n      payload[\"failure\"] = failure;\n    }\n    if (typeof scopes !== \"undefined\") {\n      payload[\"scopes\"] = scopes;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.redirect(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n       * Sends the user an SMS with a secret key for creating a session. If the provided user ID has not be registered, a new user will be created. Use the returned user ID and secret and submit a request to the [POST /v1/account/sessions/token](https://appwrite.io/docs/references/cloud/client-web/account#createSession) endpoint to complete the login process. The secret sent to the user&#039;s phone is valid for 15 minutes.\n  \n  A user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://appwrite.io/docs/authentication-security#limits).\n       *\n       * @param {string} userId\n       * @param {string} phone\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.Token>}\n       */\n  createPhoneToken(userId, phone) {\n    if (typeof userId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"userId\"');\n    }\n    if (typeof phone === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"phone\"');\n    }\n    const apiPath = \"/account/tokens/phone\";\n    const payload = {};\n    if (typeof userId !== \"undefined\") {\n      payload[\"userId\"] = userId;\n    }\n    if (typeof phone !== \"undefined\") {\n      payload[\"phone\"] = phone;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n       * Use this endpoint to send a verification message to your user email address to confirm they are the valid owners of that address. Both the **userId** and **secret** arguments will be passed as query parameters to the URL you have provided to be attached to the verification email. The provided URL should redirect the user back to your app and allow you to complete the verification process by verifying both the **userId** and **secret** parameters. Learn more about how to [complete the verification process](https://appwrite.io/docs/references/cloud/client-web/account#updateVerification). The verification link sent to the user&#039;s email address is valid for 7 days.\n  \n  Please note that in order to avoid a [Redirect Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md), the only valid redirect URLs are the ones from domains you have set when adding your platforms in the console interface.\n  \n       *\n       * @param {string} url\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.Token>}\n       */\n  createVerification(url) {\n    if (typeof url === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"url\"');\n    }\n    const apiPath = \"/account/verification\";\n    const payload = {};\n    if (typeof url !== \"undefined\") {\n      payload[\"url\"] = url;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Use this endpoint to complete the user email verification process. Use both the **userId** and **secret** parameters that were attached to your app URL to verify the user email ownership. If confirmed this route will return a 200 status code.\n   *\n   * @param {string} userId\n   * @param {string} secret\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Token>}\n   */\n  updateVerification(userId, secret) {\n    if (typeof userId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"userId\"');\n    }\n    if (typeof secret === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"secret\"');\n    }\n    const apiPath = \"/account/verification\";\n    const payload = {};\n    if (typeof userId !== \"undefined\") {\n      payload[\"userId\"] = userId;\n    }\n    if (typeof secret !== \"undefined\") {\n      payload[\"secret\"] = secret;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"put\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Use this endpoint to send a verification SMS to the currently logged in user. This endpoint is meant for use after updating a user&#039;s phone number using the [accountUpdatePhone](https://appwrite.io/docs/references/cloud/client-web/account#updatePhone) endpoint. Learn more about how to [complete the verification process](https://appwrite.io/docs/references/cloud/client-web/account#updatePhoneVerification). The verification code sent to the user&#039;s phone number is valid for 15 minutes.\n   *\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Token>}\n   */\n  createPhoneVerification() {\n    const apiPath = \"/account/verification/phone\";\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Use this endpoint to complete the user phone verification process. Use the **userId** and **secret** that were sent to your user&#039;s phone number to verify the user email ownership. If confirmed this route will return a 200 status code.\n   *\n   * @param {string} userId\n   * @param {string} secret\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Token>}\n   */\n  updatePhoneVerification(userId, secret) {\n    if (typeof userId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"userId\"');\n    }\n    if (typeof secret === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"secret\"');\n    }\n    const apiPath = \"/account/verification/phone\";\n    const payload = {};\n    if (typeof userId !== \"undefined\") {\n      payload[\"userId\"] = userId;\n    }\n    if (typeof secret !== \"undefined\") {\n      payload[\"secret\"] = secret;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"put\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n};\n\n\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=account.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-appwrite/dist/services/account.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-appwrite/dist/services/avatars.mjs":
/*!**************************************************************!*\
  !*** ./node_modules/node-appwrite/dist/services/avatars.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Avatars: () => (/* binding */ Avatars)\n/* harmony export */ });\n/* harmony import */ var _client_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../client.mjs */ \"(ssr)/./node_modules/node-appwrite/dist/client.mjs\");\n\n\n// src/services/avatars.ts\nvar Avatars = class {\n  constructor(client) {\n    this.client = client;\n  }\n  /**\n       * You can use this endpoint to show different browser icons to your users. The code argument receives the browser code as it appears in your user [GET /account/sessions](https://appwrite.io/docs/references/cloud/client-web/account#getSessions) endpoint. Use width, height and quality arguments to change the output settings.\n  \n  When one dimension is specified and the other is 0, the image is scaled with preserved aspect ratio. If both dimensions are 0, the API provides an image at source quality. If dimensions are not specified, the default size of image returned is 100x100px.\n       *\n       * @param {Browser} code\n       * @param {number} width\n       * @param {number} height\n       * @param {number} quality\n       * @throws {AppwriteException}\n       * @returns {Promise<ArrayBuffer>}\n       */\n  getBrowser(code, width, height, quality) {\n    if (typeof code === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"code\"');\n    }\n    const apiPath = \"/avatars/browsers/{code}\".replace(\"{code}\", code);\n    const payload = {};\n    if (typeof width !== \"undefined\") {\n      payload[\"width\"] = width;\n    }\n    if (typeof height !== \"undefined\") {\n      payload[\"height\"] = height;\n    }\n    if (typeof quality !== \"undefined\") {\n      payload[\"quality\"] = quality;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload,\n      \"arrayBuffer\"\n    );\n  }\n  /**\n       * The credit card endpoint will return you the icon of the credit card provider you need. Use width, height and quality arguments to change the output settings.\n  \n  When one dimension is specified and the other is 0, the image is scaled with preserved aspect ratio. If both dimensions are 0, the API provides an image at source quality. If dimensions are not specified, the default size of image returned is 100x100px.\n  \n       *\n       * @param {CreditCard} code\n       * @param {number} width\n       * @param {number} height\n       * @param {number} quality\n       * @throws {AppwriteException}\n       * @returns {Promise<ArrayBuffer>}\n       */\n  getCreditCard(code, width, height, quality) {\n    if (typeof code === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"code\"');\n    }\n    const apiPath = \"/avatars/credit-cards/{code}\".replace(\"{code}\", code);\n    const payload = {};\n    if (typeof width !== \"undefined\") {\n      payload[\"width\"] = width;\n    }\n    if (typeof height !== \"undefined\") {\n      payload[\"height\"] = height;\n    }\n    if (typeof quality !== \"undefined\") {\n      payload[\"quality\"] = quality;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload,\n      \"arrayBuffer\"\n    );\n  }\n  /**\n       * Use this endpoint to fetch the favorite icon (AKA favicon) of any remote website URL.\n  \n  This endpoint does not follow HTTP redirects.\n       *\n       * @param {string} url\n       * @throws {AppwriteException}\n       * @returns {Promise<ArrayBuffer>}\n       */\n  getFavicon(url) {\n    if (typeof url === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"url\"');\n    }\n    const apiPath = \"/avatars/favicon\";\n    const payload = {};\n    if (typeof url !== \"undefined\") {\n      payload[\"url\"] = url;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload,\n      \"arrayBuffer\"\n    );\n  }\n  /**\n       * You can use this endpoint to show different country flags icons to your users. The code argument receives the 2 letter country code. Use width, height and quality arguments to change the output settings. Country codes follow the [ISO 3166-1](https://en.wikipedia.org/wiki/ISO_3166-1) standard.\n  \n  When one dimension is specified and the other is 0, the image is scaled with preserved aspect ratio. If both dimensions are 0, the API provides an image at source quality. If dimensions are not specified, the default size of image returned is 100x100px.\n  \n       *\n       * @param {Flag} code\n       * @param {number} width\n       * @param {number} height\n       * @param {number} quality\n       * @throws {AppwriteException}\n       * @returns {Promise<ArrayBuffer>}\n       */\n  getFlag(code, width, height, quality) {\n    if (typeof code === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"code\"');\n    }\n    const apiPath = \"/avatars/flags/{code}\".replace(\"{code}\", code);\n    const payload = {};\n    if (typeof width !== \"undefined\") {\n      payload[\"width\"] = width;\n    }\n    if (typeof height !== \"undefined\") {\n      payload[\"height\"] = height;\n    }\n    if (typeof quality !== \"undefined\") {\n      payload[\"quality\"] = quality;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload,\n      \"arrayBuffer\"\n    );\n  }\n  /**\n       * Use this endpoint to fetch a remote image URL and crop it to any image size you want. This endpoint is very useful if you need to crop and display remote images in your app or in case you want to make sure a 3rd party image is properly served using a TLS protocol.\n  \n  When one dimension is specified and the other is 0, the image is scaled with preserved aspect ratio. If both dimensions are 0, the API provides an image at source quality. If dimensions are not specified, the default size of image returned is 400x400px.\n  \n  This endpoint does not follow HTTP redirects.\n       *\n       * @param {string} url\n       * @param {number} width\n       * @param {number} height\n       * @throws {AppwriteException}\n       * @returns {Promise<ArrayBuffer>}\n       */\n  getImage(url, width, height) {\n    if (typeof url === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"url\"');\n    }\n    const apiPath = \"/avatars/image\";\n    const payload = {};\n    if (typeof url !== \"undefined\") {\n      payload[\"url\"] = url;\n    }\n    if (typeof width !== \"undefined\") {\n      payload[\"width\"] = width;\n    }\n    if (typeof height !== \"undefined\") {\n      payload[\"height\"] = height;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload,\n      \"arrayBuffer\"\n    );\n  }\n  /**\n       * Use this endpoint to show your user initials avatar icon on your website or app. By default, this route will try to print your logged-in user name or email initials. You can also overwrite the user name if you pass the &#039;name&#039; parameter. If no name is given and no user is logged, an empty avatar will be returned.\n  \n  You can use the color and background params to change the avatar colors. By default, a random theme will be selected. The random theme will persist for the user&#039;s initials when reloading the same theme will always return for the same initials.\n  \n  When one dimension is specified and the other is 0, the image is scaled with preserved aspect ratio. If both dimensions are 0, the API provides an image at source quality. If dimensions are not specified, the default size of image returned is 100x100px.\n  \n       *\n       * @param {string} name\n       * @param {number} width\n       * @param {number} height\n       * @param {string} background\n       * @throws {AppwriteException}\n       * @returns {Promise<ArrayBuffer>}\n       */\n  getInitials(name, width, height, background) {\n    const apiPath = \"/avatars/initials\";\n    const payload = {};\n    if (typeof name !== \"undefined\") {\n      payload[\"name\"] = name;\n    }\n    if (typeof width !== \"undefined\") {\n      payload[\"width\"] = width;\n    }\n    if (typeof height !== \"undefined\") {\n      payload[\"height\"] = height;\n    }\n    if (typeof background !== \"undefined\") {\n      payload[\"background\"] = background;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload,\n      \"arrayBuffer\"\n    );\n  }\n  /**\n       * Converts a given plain text to a QR code image. You can use the query parameters to change the size and style of the resulting image.\n  \n       *\n       * @param {string} text\n       * @param {number} size\n       * @param {number} margin\n       * @param {boolean} download\n       * @throws {AppwriteException}\n       * @returns {Promise<ArrayBuffer>}\n       */\n  getQR(text, size, margin, download) {\n    if (typeof text === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"text\"');\n    }\n    const apiPath = \"/avatars/qr\";\n    const payload = {};\n    if (typeof text !== \"undefined\") {\n      payload[\"text\"] = text;\n    }\n    if (typeof size !== \"undefined\") {\n      payload[\"size\"] = size;\n    }\n    if (typeof margin !== \"undefined\") {\n      payload[\"margin\"] = margin;\n    }\n    if (typeof download !== \"undefined\") {\n      payload[\"download\"] = download;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload,\n      \"arrayBuffer\"\n    );\n  }\n};\n\n\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=avatars.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-appwrite/dist/services/avatars.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-appwrite/dist/services/databases.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/node-appwrite/dist/services/databases.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Databases: () => (/* binding */ Databases)\n/* harmony export */ });\n/* harmony import */ var _client_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../client.mjs */ \"(ssr)/./node_modules/node-appwrite/dist/client.mjs\");\n\n\n// src/services/databases.ts\nvar Databases = class {\n  constructor(client) {\n    this.client = client;\n  }\n  /**\n   * Get a list of all databases from the current Appwrite project. You can use the search parameter to filter your results.\n   *\n   * @param {string[]} queries\n   * @param {string} search\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.DatabaseList>}\n   */\n  list(queries, search) {\n    const apiPath = \"/databases\";\n    const payload = {};\n    if (typeof queries !== \"undefined\") {\n      payload[\"queries\"] = queries;\n    }\n    if (typeof search !== \"undefined\") {\n      payload[\"search\"] = search;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n       * Create a new Database.\n  \n       *\n       * @param {string} databaseId\n       * @param {string} name\n       * @param {boolean} enabled\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.Database>}\n       */\n  create(databaseId, name, enabled) {\n    if (typeof databaseId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"databaseId\"');\n    }\n    if (typeof name === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"name\"');\n    }\n    const apiPath = \"/databases\";\n    const payload = {};\n    if (typeof databaseId !== \"undefined\") {\n      payload[\"databaseId\"] = databaseId;\n    }\n    if (typeof name !== \"undefined\") {\n      payload[\"name\"] = name;\n    }\n    if (typeof enabled !== \"undefined\") {\n      payload[\"enabled\"] = enabled;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Get a database by its unique ID. This endpoint response returns a JSON object with the database metadata.\n   *\n   * @param {string} databaseId\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Database>}\n   */\n  get(databaseId) {\n    if (typeof databaseId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"databaseId\"');\n    }\n    const apiPath = \"/databases/{databaseId}\".replace(\"{databaseId}\", databaseId);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Update a database by its unique ID.\n   *\n   * @param {string} databaseId\n   * @param {string} name\n   * @param {boolean} enabled\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Database>}\n   */\n  update(databaseId, name, enabled) {\n    if (typeof databaseId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"databaseId\"');\n    }\n    if (typeof name === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"name\"');\n    }\n    const apiPath = \"/databases/{databaseId}\".replace(\"{databaseId}\", databaseId);\n    const payload = {};\n    if (typeof name !== \"undefined\") {\n      payload[\"name\"] = name;\n    }\n    if (typeof enabled !== \"undefined\") {\n      payload[\"enabled\"] = enabled;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"put\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Delete a database by its unique ID. Only API keys with with databases.write scope can delete a database.\n   *\n   * @param {string} databaseId\n   * @throws {AppwriteException}\n   * @returns {Promise<{}>}\n   */\n  delete(databaseId) {\n    if (typeof databaseId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"databaseId\"');\n    }\n    const apiPath = \"/databases/{databaseId}\".replace(\"{databaseId}\", databaseId);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"delete\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Get a list of all collections that belong to the provided databaseId. You can use the search parameter to filter your results.\n   *\n   * @param {string} databaseId\n   * @param {string[]} queries\n   * @param {string} search\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.CollectionList>}\n   */\n  listCollections(databaseId, queries, search) {\n    if (typeof databaseId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"databaseId\"');\n    }\n    const apiPath = \"/databases/{databaseId}/collections\".replace(\"{databaseId}\", databaseId);\n    const payload = {};\n    if (typeof queries !== \"undefined\") {\n      payload[\"queries\"] = queries;\n    }\n    if (typeof search !== \"undefined\") {\n      payload[\"search\"] = search;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Create a new Collection. Before using this route, you should create a new database resource using either a [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection) API or directly from your database console.\n   *\n   * @param {string} databaseId\n   * @param {string} collectionId\n   * @param {string} name\n   * @param {string[]} permissions\n   * @param {boolean} documentSecurity\n   * @param {boolean} enabled\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Collection>}\n   */\n  createCollection(databaseId, collectionId, name, permissions, documentSecurity, enabled) {\n    if (typeof databaseId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"databaseId\"');\n    }\n    if (typeof collectionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"collectionId\"');\n    }\n    if (typeof name === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"name\"');\n    }\n    const apiPath = \"/databases/{databaseId}/collections\".replace(\"{databaseId}\", databaseId);\n    const payload = {};\n    if (typeof collectionId !== \"undefined\") {\n      payload[\"collectionId\"] = collectionId;\n    }\n    if (typeof name !== \"undefined\") {\n      payload[\"name\"] = name;\n    }\n    if (typeof permissions !== \"undefined\") {\n      payload[\"permissions\"] = permissions;\n    }\n    if (typeof documentSecurity !== \"undefined\") {\n      payload[\"documentSecurity\"] = documentSecurity;\n    }\n    if (typeof enabled !== \"undefined\") {\n      payload[\"enabled\"] = enabled;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Get a collection by its unique ID. This endpoint response returns a JSON object with the collection metadata.\n   *\n   * @param {string} databaseId\n   * @param {string} collectionId\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Collection>}\n   */\n  getCollection(databaseId, collectionId) {\n    if (typeof databaseId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"databaseId\"');\n    }\n    if (typeof collectionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"collectionId\"');\n    }\n    const apiPath = \"/databases/{databaseId}/collections/{collectionId}\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Update a collection by its unique ID.\n   *\n   * @param {string} databaseId\n   * @param {string} collectionId\n   * @param {string} name\n   * @param {string[]} permissions\n   * @param {boolean} documentSecurity\n   * @param {boolean} enabled\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Collection>}\n   */\n  updateCollection(databaseId, collectionId, name, permissions, documentSecurity, enabled) {\n    if (typeof databaseId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"databaseId\"');\n    }\n    if (typeof collectionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"collectionId\"');\n    }\n    if (typeof name === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"name\"');\n    }\n    const apiPath = \"/databases/{databaseId}/collections/{collectionId}\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId);\n    const payload = {};\n    if (typeof name !== \"undefined\") {\n      payload[\"name\"] = name;\n    }\n    if (typeof permissions !== \"undefined\") {\n      payload[\"permissions\"] = permissions;\n    }\n    if (typeof documentSecurity !== \"undefined\") {\n      payload[\"documentSecurity\"] = documentSecurity;\n    }\n    if (typeof enabled !== \"undefined\") {\n      payload[\"enabled\"] = enabled;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"put\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Delete a collection by its unique ID. Only users with write permissions have access to delete this resource.\n   *\n   * @param {string} databaseId\n   * @param {string} collectionId\n   * @throws {AppwriteException}\n   * @returns {Promise<{}>}\n   */\n  deleteCollection(databaseId, collectionId) {\n    if (typeof databaseId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"databaseId\"');\n    }\n    if (typeof collectionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"collectionId\"');\n    }\n    const apiPath = \"/databases/{databaseId}/collections/{collectionId}\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"delete\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * List attributes in the collection.\n   *\n   * @param {string} databaseId\n   * @param {string} collectionId\n   * @param {string[]} queries\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.AttributeList>}\n   */\n  listAttributes(databaseId, collectionId, queries) {\n    if (typeof databaseId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"databaseId\"');\n    }\n    if (typeof collectionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"collectionId\"');\n    }\n    const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId);\n    const payload = {};\n    if (typeof queries !== \"undefined\") {\n      payload[\"queries\"] = queries;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n       * Create a boolean attribute.\n  \n       *\n       * @param {string} databaseId\n       * @param {string} collectionId\n       * @param {string} key\n       * @param {boolean} required\n       * @param {boolean} xdefault\n       * @param {boolean} array\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.AttributeBoolean>}\n       */\n  createBooleanAttribute(databaseId, collectionId, key, required, xdefault, array) {\n    if (typeof databaseId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"databaseId\"');\n    }\n    if (typeof collectionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"collectionId\"');\n    }\n    if (typeof key === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"key\"');\n    }\n    if (typeof required === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"required\"');\n    }\n    const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes/boolean\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId);\n    const payload = {};\n    if (typeof key !== \"undefined\") {\n      payload[\"key\"] = key;\n    }\n    if (typeof required !== \"undefined\") {\n      payload[\"required\"] = required;\n    }\n    if (typeof xdefault !== \"undefined\") {\n      payload[\"default\"] = xdefault;\n    }\n    if (typeof array !== \"undefined\") {\n      payload[\"array\"] = array;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Update a boolean attribute. Changing the `default` value will not update already existing documents.\n   *\n   * @param {string} databaseId\n   * @param {string} collectionId\n   * @param {string} key\n   * @param {boolean} required\n   * @param {boolean} xdefault\n   * @param {string} newKey\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.AttributeBoolean>}\n   */\n  updateBooleanAttribute(databaseId, collectionId, key, required, xdefault, newKey) {\n    if (typeof databaseId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"databaseId\"');\n    }\n    if (typeof collectionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"collectionId\"');\n    }\n    if (typeof key === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"key\"');\n    }\n    if (typeof required === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"required\"');\n    }\n    if (typeof xdefault === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"xdefault\"');\n    }\n    const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes/boolean/{key}\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId).replace(\"{key}\", key);\n    const payload = {};\n    if (typeof required !== \"undefined\") {\n      payload[\"required\"] = required;\n    }\n    if (typeof xdefault !== \"undefined\") {\n      payload[\"default\"] = xdefault;\n    }\n    if (typeof newKey !== \"undefined\") {\n      payload[\"newKey\"] = newKey;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"patch\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Create a date time attribute according to the ISO 8601 standard.\n   *\n   * @param {string} databaseId\n   * @param {string} collectionId\n   * @param {string} key\n   * @param {boolean} required\n   * @param {string} xdefault\n   * @param {boolean} array\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.AttributeDatetime>}\n   */\n  createDatetimeAttribute(databaseId, collectionId, key, required, xdefault, array) {\n    if (typeof databaseId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"databaseId\"');\n    }\n    if (typeof collectionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"collectionId\"');\n    }\n    if (typeof key === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"key\"');\n    }\n    if (typeof required === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"required\"');\n    }\n    const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes/datetime\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId);\n    const payload = {};\n    if (typeof key !== \"undefined\") {\n      payload[\"key\"] = key;\n    }\n    if (typeof required !== \"undefined\") {\n      payload[\"required\"] = required;\n    }\n    if (typeof xdefault !== \"undefined\") {\n      payload[\"default\"] = xdefault;\n    }\n    if (typeof array !== \"undefined\") {\n      payload[\"array\"] = array;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Update a date time attribute. Changing the `default` value will not update already existing documents.\n   *\n   * @param {string} databaseId\n   * @param {string} collectionId\n   * @param {string} key\n   * @param {boolean} required\n   * @param {string} xdefault\n   * @param {string} newKey\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.AttributeDatetime>}\n   */\n  updateDatetimeAttribute(databaseId, collectionId, key, required, xdefault, newKey) {\n    if (typeof databaseId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"databaseId\"');\n    }\n    if (typeof collectionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"collectionId\"');\n    }\n    if (typeof key === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"key\"');\n    }\n    if (typeof required === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"required\"');\n    }\n    if (typeof xdefault === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"xdefault\"');\n    }\n    const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes/datetime/{key}\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId).replace(\"{key}\", key);\n    const payload = {};\n    if (typeof required !== \"undefined\") {\n      payload[\"required\"] = required;\n    }\n    if (typeof xdefault !== \"undefined\") {\n      payload[\"default\"] = xdefault;\n    }\n    if (typeof newKey !== \"undefined\") {\n      payload[\"newKey\"] = newKey;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"patch\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n       * Create an email attribute.\n  \n       *\n       * @param {string} databaseId\n       * @param {string} collectionId\n       * @param {string} key\n       * @param {boolean} required\n       * @param {string} xdefault\n       * @param {boolean} array\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.AttributeEmail>}\n       */\n  createEmailAttribute(databaseId, collectionId, key, required, xdefault, array) {\n    if (typeof databaseId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"databaseId\"');\n    }\n    if (typeof collectionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"collectionId\"');\n    }\n    if (typeof key === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"key\"');\n    }\n    if (typeof required === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"required\"');\n    }\n    const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes/email\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId);\n    const payload = {};\n    if (typeof key !== \"undefined\") {\n      payload[\"key\"] = key;\n    }\n    if (typeof required !== \"undefined\") {\n      payload[\"required\"] = required;\n    }\n    if (typeof xdefault !== \"undefined\") {\n      payload[\"default\"] = xdefault;\n    }\n    if (typeof array !== \"undefined\") {\n      payload[\"array\"] = array;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n       * Update an email attribute. Changing the `default` value will not update already existing documents.\n  \n       *\n       * @param {string} databaseId\n       * @param {string} collectionId\n       * @param {string} key\n       * @param {boolean} required\n       * @param {string} xdefault\n       * @param {string} newKey\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.AttributeEmail>}\n       */\n  updateEmailAttribute(databaseId, collectionId, key, required, xdefault, newKey) {\n    if (typeof databaseId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"databaseId\"');\n    }\n    if (typeof collectionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"collectionId\"');\n    }\n    if (typeof key === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"key\"');\n    }\n    if (typeof required === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"required\"');\n    }\n    if (typeof xdefault === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"xdefault\"');\n    }\n    const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes/email/{key}\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId).replace(\"{key}\", key);\n    const payload = {};\n    if (typeof required !== \"undefined\") {\n      payload[\"required\"] = required;\n    }\n    if (typeof xdefault !== \"undefined\") {\n      payload[\"default\"] = xdefault;\n    }\n    if (typeof newKey !== \"undefined\") {\n      payload[\"newKey\"] = newKey;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"patch\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n       * Create an enumeration attribute. The `elements` param acts as a white-list of accepted values for this attribute. \n  \n       *\n       * @param {string} databaseId\n       * @param {string} collectionId\n       * @param {string} key\n       * @param {string[]} elements\n       * @param {boolean} required\n       * @param {string} xdefault\n       * @param {boolean} array\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.AttributeEnum>}\n       */\n  createEnumAttribute(databaseId, collectionId, key, elements, required, xdefault, array) {\n    if (typeof databaseId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"databaseId\"');\n    }\n    if (typeof collectionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"collectionId\"');\n    }\n    if (typeof key === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"key\"');\n    }\n    if (typeof elements === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"elements\"');\n    }\n    if (typeof required === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"required\"');\n    }\n    const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes/enum\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId);\n    const payload = {};\n    if (typeof key !== \"undefined\") {\n      payload[\"key\"] = key;\n    }\n    if (typeof elements !== \"undefined\") {\n      payload[\"elements\"] = elements;\n    }\n    if (typeof required !== \"undefined\") {\n      payload[\"required\"] = required;\n    }\n    if (typeof xdefault !== \"undefined\") {\n      payload[\"default\"] = xdefault;\n    }\n    if (typeof array !== \"undefined\") {\n      payload[\"array\"] = array;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n       * Update an enum attribute. Changing the `default` value will not update already existing documents.\n  \n       *\n       * @param {string} databaseId\n       * @param {string} collectionId\n       * @param {string} key\n       * @param {string[]} elements\n       * @param {boolean} required\n       * @param {string} xdefault\n       * @param {string} newKey\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.AttributeEnum>}\n       */\n  updateEnumAttribute(databaseId, collectionId, key, elements, required, xdefault, newKey) {\n    if (typeof databaseId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"databaseId\"');\n    }\n    if (typeof collectionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"collectionId\"');\n    }\n    if (typeof key === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"key\"');\n    }\n    if (typeof elements === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"elements\"');\n    }\n    if (typeof required === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"required\"');\n    }\n    if (typeof xdefault === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"xdefault\"');\n    }\n    const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes/enum/{key}\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId).replace(\"{key}\", key);\n    const payload = {};\n    if (typeof elements !== \"undefined\") {\n      payload[\"elements\"] = elements;\n    }\n    if (typeof required !== \"undefined\") {\n      payload[\"required\"] = required;\n    }\n    if (typeof xdefault !== \"undefined\") {\n      payload[\"default\"] = xdefault;\n    }\n    if (typeof newKey !== \"undefined\") {\n      payload[\"newKey\"] = newKey;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"patch\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n       * Create a float attribute. Optionally, minimum and maximum values can be provided.\n  \n       *\n       * @param {string} databaseId\n       * @param {string} collectionId\n       * @param {string} key\n       * @param {boolean} required\n       * @param {number} min\n       * @param {number} max\n       * @param {number} xdefault\n       * @param {boolean} array\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.AttributeFloat>}\n       */\n  createFloatAttribute(databaseId, collectionId, key, required, min, max, xdefault, array) {\n    if (typeof databaseId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"databaseId\"');\n    }\n    if (typeof collectionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"collectionId\"');\n    }\n    if (typeof key === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"key\"');\n    }\n    if (typeof required === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"required\"');\n    }\n    const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes/float\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId);\n    const payload = {};\n    if (typeof key !== \"undefined\") {\n      payload[\"key\"] = key;\n    }\n    if (typeof required !== \"undefined\") {\n      payload[\"required\"] = required;\n    }\n    if (typeof min !== \"undefined\") {\n      payload[\"min\"] = min;\n    }\n    if (typeof max !== \"undefined\") {\n      payload[\"max\"] = max;\n    }\n    if (typeof xdefault !== \"undefined\") {\n      payload[\"default\"] = xdefault;\n    }\n    if (typeof array !== \"undefined\") {\n      payload[\"array\"] = array;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n       * Update a float attribute. Changing the `default` value will not update already existing documents.\n  \n       *\n       * @param {string} databaseId\n       * @param {string} collectionId\n       * @param {string} key\n       * @param {boolean} required\n       * @param {number} xdefault\n       * @param {number} min\n       * @param {number} max\n       * @param {string} newKey\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.AttributeFloat>}\n       */\n  updateFloatAttribute(databaseId, collectionId, key, required, xdefault, min, max, newKey) {\n    if (typeof databaseId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"databaseId\"');\n    }\n    if (typeof collectionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"collectionId\"');\n    }\n    if (typeof key === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"key\"');\n    }\n    if (typeof required === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"required\"');\n    }\n    if (typeof xdefault === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"xdefault\"');\n    }\n    const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes/float/{key}\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId).replace(\"{key}\", key);\n    const payload = {};\n    if (typeof required !== \"undefined\") {\n      payload[\"required\"] = required;\n    }\n    if (typeof min !== \"undefined\") {\n      payload[\"min\"] = min;\n    }\n    if (typeof max !== \"undefined\") {\n      payload[\"max\"] = max;\n    }\n    if (typeof xdefault !== \"undefined\") {\n      payload[\"default\"] = xdefault;\n    }\n    if (typeof newKey !== \"undefined\") {\n      payload[\"newKey\"] = newKey;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"patch\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n       * Create an integer attribute. Optionally, minimum and maximum values can be provided.\n  \n       *\n       * @param {string} databaseId\n       * @param {string} collectionId\n       * @param {string} key\n       * @param {boolean} required\n       * @param {number} min\n       * @param {number} max\n       * @param {number} xdefault\n       * @param {boolean} array\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.AttributeInteger>}\n       */\n  createIntegerAttribute(databaseId, collectionId, key, required, min, max, xdefault, array) {\n    if (typeof databaseId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"databaseId\"');\n    }\n    if (typeof collectionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"collectionId\"');\n    }\n    if (typeof key === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"key\"');\n    }\n    if (typeof required === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"required\"');\n    }\n    const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes/integer\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId);\n    const payload = {};\n    if (typeof key !== \"undefined\") {\n      payload[\"key\"] = key;\n    }\n    if (typeof required !== \"undefined\") {\n      payload[\"required\"] = required;\n    }\n    if (typeof min !== \"undefined\") {\n      payload[\"min\"] = min;\n    }\n    if (typeof max !== \"undefined\") {\n      payload[\"max\"] = max;\n    }\n    if (typeof xdefault !== \"undefined\") {\n      payload[\"default\"] = xdefault;\n    }\n    if (typeof array !== \"undefined\") {\n      payload[\"array\"] = array;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n       * Update an integer attribute. Changing the `default` value will not update already existing documents.\n  \n       *\n       * @param {string} databaseId\n       * @param {string} collectionId\n       * @param {string} key\n       * @param {boolean} required\n       * @param {number} xdefault\n       * @param {number} min\n       * @param {number} max\n       * @param {string} newKey\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.AttributeInteger>}\n       */\n  updateIntegerAttribute(databaseId, collectionId, key, required, xdefault, min, max, newKey) {\n    if (typeof databaseId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"databaseId\"');\n    }\n    if (typeof collectionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"collectionId\"');\n    }\n    if (typeof key === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"key\"');\n    }\n    if (typeof required === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"required\"');\n    }\n    if (typeof xdefault === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"xdefault\"');\n    }\n    const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes/integer/{key}\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId).replace(\"{key}\", key);\n    const payload = {};\n    if (typeof required !== \"undefined\") {\n      payload[\"required\"] = required;\n    }\n    if (typeof min !== \"undefined\") {\n      payload[\"min\"] = min;\n    }\n    if (typeof max !== \"undefined\") {\n      payload[\"max\"] = max;\n    }\n    if (typeof xdefault !== \"undefined\") {\n      payload[\"default\"] = xdefault;\n    }\n    if (typeof newKey !== \"undefined\") {\n      payload[\"newKey\"] = newKey;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"patch\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n       * Create IP address attribute.\n  \n       *\n       * @param {string} databaseId\n       * @param {string} collectionId\n       * @param {string} key\n       * @param {boolean} required\n       * @param {string} xdefault\n       * @param {boolean} array\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.AttributeIp>}\n       */\n  createIpAttribute(databaseId, collectionId, key, required, xdefault, array) {\n    if (typeof databaseId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"databaseId\"');\n    }\n    if (typeof collectionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"collectionId\"');\n    }\n    if (typeof key === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"key\"');\n    }\n    if (typeof required === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"required\"');\n    }\n    const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes/ip\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId);\n    const payload = {};\n    if (typeof key !== \"undefined\") {\n      payload[\"key\"] = key;\n    }\n    if (typeof required !== \"undefined\") {\n      payload[\"required\"] = required;\n    }\n    if (typeof xdefault !== \"undefined\") {\n      payload[\"default\"] = xdefault;\n    }\n    if (typeof array !== \"undefined\") {\n      payload[\"array\"] = array;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n       * Update an ip attribute. Changing the `default` value will not update already existing documents.\n  \n       *\n       * @param {string} databaseId\n       * @param {string} collectionId\n       * @param {string} key\n       * @param {boolean} required\n       * @param {string} xdefault\n       * @param {string} newKey\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.AttributeIp>}\n       */\n  updateIpAttribute(databaseId, collectionId, key, required, xdefault, newKey) {\n    if (typeof databaseId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"databaseId\"');\n    }\n    if (typeof collectionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"collectionId\"');\n    }\n    if (typeof key === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"key\"');\n    }\n    if (typeof required === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"required\"');\n    }\n    if (typeof xdefault === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"xdefault\"');\n    }\n    const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes/ip/{key}\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId).replace(\"{key}\", key);\n    const payload = {};\n    if (typeof required !== \"undefined\") {\n      payload[\"required\"] = required;\n    }\n    if (typeof xdefault !== \"undefined\") {\n      payload[\"default\"] = xdefault;\n    }\n    if (typeof newKey !== \"undefined\") {\n      payload[\"newKey\"] = newKey;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"patch\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n       * Create relationship attribute. [Learn more about relationship attributes](https://appwrite.io/docs/databases-relationships#relationship-attributes).\n  \n       *\n       * @param {string} databaseId\n       * @param {string} collectionId\n       * @param {string} relatedCollectionId\n       * @param {RelationshipType} type\n       * @param {boolean} twoWay\n       * @param {string} key\n       * @param {string} twoWayKey\n       * @param {RelationMutate} onDelete\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.AttributeRelationship>}\n       */\n  createRelationshipAttribute(databaseId, collectionId, relatedCollectionId, type, twoWay, key, twoWayKey, onDelete) {\n    if (typeof databaseId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"databaseId\"');\n    }\n    if (typeof collectionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"collectionId\"');\n    }\n    if (typeof relatedCollectionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"relatedCollectionId\"');\n    }\n    if (typeof type === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"type\"');\n    }\n    const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes/relationship\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId);\n    const payload = {};\n    if (typeof relatedCollectionId !== \"undefined\") {\n      payload[\"relatedCollectionId\"] = relatedCollectionId;\n    }\n    if (typeof type !== \"undefined\") {\n      payload[\"type\"] = type;\n    }\n    if (typeof twoWay !== \"undefined\") {\n      payload[\"twoWay\"] = twoWay;\n    }\n    if (typeof key !== \"undefined\") {\n      payload[\"key\"] = key;\n    }\n    if (typeof twoWayKey !== \"undefined\") {\n      payload[\"twoWayKey\"] = twoWayKey;\n    }\n    if (typeof onDelete !== \"undefined\") {\n      payload[\"onDelete\"] = onDelete;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n       * Create a string attribute.\n  \n       *\n       * @param {string} databaseId\n       * @param {string} collectionId\n       * @param {string} key\n       * @param {number} size\n       * @param {boolean} required\n       * @param {string} xdefault\n       * @param {boolean} array\n       * @param {boolean} encrypt\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.AttributeString>}\n       */\n  createStringAttribute(databaseId, collectionId, key, size, required, xdefault, array, encrypt) {\n    if (typeof databaseId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"databaseId\"');\n    }\n    if (typeof collectionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"collectionId\"');\n    }\n    if (typeof key === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"key\"');\n    }\n    if (typeof size === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"size\"');\n    }\n    if (typeof required === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"required\"');\n    }\n    const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes/string\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId);\n    const payload = {};\n    if (typeof key !== \"undefined\") {\n      payload[\"key\"] = key;\n    }\n    if (typeof size !== \"undefined\") {\n      payload[\"size\"] = size;\n    }\n    if (typeof required !== \"undefined\") {\n      payload[\"required\"] = required;\n    }\n    if (typeof xdefault !== \"undefined\") {\n      payload[\"default\"] = xdefault;\n    }\n    if (typeof array !== \"undefined\") {\n      payload[\"array\"] = array;\n    }\n    if (typeof encrypt !== \"undefined\") {\n      payload[\"encrypt\"] = encrypt;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n       * Update a string attribute. Changing the `default` value will not update already existing documents.\n  \n       *\n       * @param {string} databaseId\n       * @param {string} collectionId\n       * @param {string} key\n       * @param {boolean} required\n       * @param {string} xdefault\n       * @param {number} size\n       * @param {string} newKey\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.AttributeString>}\n       */\n  updateStringAttribute(databaseId, collectionId, key, required, xdefault, size, newKey) {\n    if (typeof databaseId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"databaseId\"');\n    }\n    if (typeof collectionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"collectionId\"');\n    }\n    if (typeof key === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"key\"');\n    }\n    if (typeof required === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"required\"');\n    }\n    if (typeof xdefault === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"xdefault\"');\n    }\n    const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes/string/{key}\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId).replace(\"{key}\", key);\n    const payload = {};\n    if (typeof required !== \"undefined\") {\n      payload[\"required\"] = required;\n    }\n    if (typeof xdefault !== \"undefined\") {\n      payload[\"default\"] = xdefault;\n    }\n    if (typeof size !== \"undefined\") {\n      payload[\"size\"] = size;\n    }\n    if (typeof newKey !== \"undefined\") {\n      payload[\"newKey\"] = newKey;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"patch\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n       * Create a URL attribute.\n  \n       *\n       * @param {string} databaseId\n       * @param {string} collectionId\n       * @param {string} key\n       * @param {boolean} required\n       * @param {string} xdefault\n       * @param {boolean} array\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.AttributeUrl>}\n       */\n  createUrlAttribute(databaseId, collectionId, key, required, xdefault, array) {\n    if (typeof databaseId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"databaseId\"');\n    }\n    if (typeof collectionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"collectionId\"');\n    }\n    if (typeof key === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"key\"');\n    }\n    if (typeof required === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"required\"');\n    }\n    const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes/url\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId);\n    const payload = {};\n    if (typeof key !== \"undefined\") {\n      payload[\"key\"] = key;\n    }\n    if (typeof required !== \"undefined\") {\n      payload[\"required\"] = required;\n    }\n    if (typeof xdefault !== \"undefined\") {\n      payload[\"default\"] = xdefault;\n    }\n    if (typeof array !== \"undefined\") {\n      payload[\"array\"] = array;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n       * Update an url attribute. Changing the `default` value will not update already existing documents.\n  \n       *\n       * @param {string} databaseId\n       * @param {string} collectionId\n       * @param {string} key\n       * @param {boolean} required\n       * @param {string} xdefault\n       * @param {string} newKey\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.AttributeUrl>}\n       */\n  updateUrlAttribute(databaseId, collectionId, key, required, xdefault, newKey) {\n    if (typeof databaseId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"databaseId\"');\n    }\n    if (typeof collectionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"collectionId\"');\n    }\n    if (typeof key === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"key\"');\n    }\n    if (typeof required === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"required\"');\n    }\n    if (typeof xdefault === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"xdefault\"');\n    }\n    const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes/url/{key}\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId).replace(\"{key}\", key);\n    const payload = {};\n    if (typeof required !== \"undefined\") {\n      payload[\"required\"] = required;\n    }\n    if (typeof xdefault !== \"undefined\") {\n      payload[\"default\"] = xdefault;\n    }\n    if (typeof newKey !== \"undefined\") {\n      payload[\"newKey\"] = newKey;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"patch\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Get attribute by ID.\n   *\n   * @param {string} databaseId\n   * @param {string} collectionId\n   * @param {string} key\n   * @throws {AppwriteException}\n   * @returns {Promise<{}>}\n   */\n  getAttribute(databaseId, collectionId, key) {\n    if (typeof databaseId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"databaseId\"');\n    }\n    if (typeof collectionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"collectionId\"');\n    }\n    if (typeof key === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"key\"');\n    }\n    const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes/{key}\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId).replace(\"{key}\", key);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Deletes an attribute.\n   *\n   * @param {string} databaseId\n   * @param {string} collectionId\n   * @param {string} key\n   * @throws {AppwriteException}\n   * @returns {Promise<{}>}\n   */\n  deleteAttribute(databaseId, collectionId, key) {\n    if (typeof databaseId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"databaseId\"');\n    }\n    if (typeof collectionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"collectionId\"');\n    }\n    if (typeof key === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"key\"');\n    }\n    const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes/{key}\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId).replace(\"{key}\", key);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"delete\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n       * Update relationship attribute. [Learn more about relationship attributes](https://appwrite.io/docs/databases-relationships#relationship-attributes).\n  \n       *\n       * @param {string} databaseId\n       * @param {string} collectionId\n       * @param {string} key\n       * @param {RelationMutate} onDelete\n       * @param {string} newKey\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.AttributeRelationship>}\n       */\n  updateRelationshipAttribute(databaseId, collectionId, key, onDelete, newKey) {\n    if (typeof databaseId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"databaseId\"');\n    }\n    if (typeof collectionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"collectionId\"');\n    }\n    if (typeof key === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"key\"');\n    }\n    const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes/{key}/relationship\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId).replace(\"{key}\", key);\n    const payload = {};\n    if (typeof onDelete !== \"undefined\") {\n      payload[\"onDelete\"] = onDelete;\n    }\n    if (typeof newKey !== \"undefined\") {\n      payload[\"newKey\"] = newKey;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"patch\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Get a list of all the user&#039;s documents in a given collection. You can use the query params to filter your results.\n   *\n   * @param {string} databaseId\n   * @param {string} collectionId\n   * @param {string[]} queries\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.DocumentList<Document>>}\n   */\n  listDocuments(databaseId, collectionId, queries) {\n    if (typeof databaseId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"databaseId\"');\n    }\n    if (typeof collectionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"collectionId\"');\n    }\n    const apiPath = \"/databases/{databaseId}/collections/{collectionId}/documents\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId);\n    const payload = {};\n    if (typeof queries !== \"undefined\") {\n      payload[\"queries\"] = queries;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Create a new Document. Before using this route, you should create a new collection resource using either a [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection) API or directly from your database console.\n   *\n   * @param {string} databaseId\n   * @param {string} collectionId\n   * @param {string} documentId\n   * @param {Omit<Document, keyof Models.Document>} data\n   * @param {string[]} permissions\n   * @throws {AppwriteException}\n   * @returns {Promise<Document>}\n   */\n  createDocument(databaseId, collectionId, documentId, data, permissions) {\n    if (typeof databaseId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"databaseId\"');\n    }\n    if (typeof collectionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"collectionId\"');\n    }\n    if (typeof documentId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"documentId\"');\n    }\n    if (typeof data === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"data\"');\n    }\n    const apiPath = \"/databases/{databaseId}/collections/{collectionId}/documents\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId);\n    const payload = {};\n    if (typeof documentId !== \"undefined\") {\n      payload[\"documentId\"] = documentId;\n    }\n    if (typeof data !== \"undefined\") {\n      payload[\"data\"] = data;\n    }\n    if (typeof permissions !== \"undefined\") {\n      payload[\"permissions\"] = permissions;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Create new Documents. Before using this route, you should create a new collection resource using either a [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection) API or directly from your database console.\n   *\n   * @param {string} databaseId\n   * @param {string} collectionId\n   * @param {object[]} documents\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.DocumentList<Document>>}\n   */\n  createDocuments(databaseId, collectionId, documents) {\n    if (typeof databaseId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"databaseId\"');\n    }\n    if (typeof collectionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"collectionId\"');\n    }\n    if (typeof documents === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"documents\"');\n    }\n    const apiPath = \"/databases/{databaseId}/collections/{collectionId}/documents\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId);\n    const payload = {};\n    if (typeof documents !== \"undefined\") {\n      payload[\"documents\"] = documents;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n       * Create or update Documents. Before using this route, you should create a new collection resource using either a [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection) API or directly from your database console.\n  \n       *\n       * @param {string} databaseId\n       * @param {string} collectionId\n       * @param {object[]} documents\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.DocumentList<Document>>}\n       */\n  upsertDocuments(databaseId, collectionId, documents) {\n    if (typeof databaseId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"databaseId\"');\n    }\n    if (typeof collectionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"collectionId\"');\n    }\n    const apiPath = \"/databases/{databaseId}/collections/{collectionId}/documents\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId);\n    const payload = {};\n    if (typeof documents !== \"undefined\") {\n      payload[\"documents\"] = documents;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"put\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Update all documents that match your queries, if no queries are submitted then all documents are updated. You can pass only specific fields to be updated.\n   *\n   * @param {string} databaseId\n   * @param {string} collectionId\n   * @param {object} data\n   * @param {string[]} queries\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.DocumentList<Document>>}\n   */\n  updateDocuments(databaseId, collectionId, data, queries) {\n    if (typeof databaseId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"databaseId\"');\n    }\n    if (typeof collectionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"collectionId\"');\n    }\n    const apiPath = \"/databases/{databaseId}/collections/{collectionId}/documents\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId);\n    const payload = {};\n    if (typeof data !== \"undefined\") {\n      payload[\"data\"] = data;\n    }\n    if (typeof queries !== \"undefined\") {\n      payload[\"queries\"] = queries;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"patch\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Bulk delete documents using queries, if no queries are passed then all documents are deleted.\n   *\n   * @param {string} databaseId\n   * @param {string} collectionId\n   * @param {string[]} queries\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.DocumentList<Document>>}\n   */\n  deleteDocuments(databaseId, collectionId, queries) {\n    if (typeof databaseId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"databaseId\"');\n    }\n    if (typeof collectionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"collectionId\"');\n    }\n    const apiPath = \"/databases/{databaseId}/collections/{collectionId}/documents\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId);\n    const payload = {};\n    if (typeof queries !== \"undefined\") {\n      payload[\"queries\"] = queries;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"delete\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Get a document by its unique ID. This endpoint response returns a JSON object with the document data.\n   *\n   * @param {string} databaseId\n   * @param {string} collectionId\n   * @param {string} documentId\n   * @param {string[]} queries\n   * @throws {AppwriteException}\n   * @returns {Promise<Document>}\n   */\n  getDocument(databaseId, collectionId, documentId, queries) {\n    if (typeof databaseId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"databaseId\"');\n    }\n    if (typeof collectionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"collectionId\"');\n    }\n    if (typeof documentId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"documentId\"');\n    }\n    const apiPath = \"/databases/{databaseId}/collections/{collectionId}/documents/{documentId}\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId).replace(\"{documentId}\", documentId);\n    const payload = {};\n    if (typeof queries !== \"undefined\") {\n      payload[\"queries\"] = queries;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Update a document by its unique ID. Using the patch method you can pass only specific fields that will get updated.\n   *\n   * @param {string} databaseId\n   * @param {string} collectionId\n   * @param {string} documentId\n   * @param {Partial<Omit<Document, keyof Models.Document>>} data\n   * @param {string[]} permissions\n   * @throws {AppwriteException}\n   * @returns {Promise<Document>}\n   */\n  updateDocument(databaseId, collectionId, documentId, data, permissions) {\n    if (typeof databaseId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"databaseId\"');\n    }\n    if (typeof collectionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"collectionId\"');\n    }\n    if (typeof documentId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"documentId\"');\n    }\n    const apiPath = \"/databases/{databaseId}/collections/{collectionId}/documents/{documentId}\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId).replace(\"{documentId}\", documentId);\n    const payload = {};\n    if (typeof data !== \"undefined\") {\n      payload[\"data\"] = data;\n    }\n    if (typeof permissions !== \"undefined\") {\n      payload[\"permissions\"] = permissions;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"patch\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Delete a document by its unique ID.\n   *\n   * @param {string} databaseId\n   * @param {string} collectionId\n   * @param {string} documentId\n   * @throws {AppwriteException}\n   * @returns {Promise<{}>}\n   */\n  deleteDocument(databaseId, collectionId, documentId) {\n    if (typeof databaseId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"databaseId\"');\n    }\n    if (typeof collectionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"collectionId\"');\n    }\n    if (typeof documentId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"documentId\"');\n    }\n    const apiPath = \"/databases/{databaseId}/collections/{collectionId}/documents/{documentId}\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId).replace(\"{documentId}\", documentId);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"delete\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * List indexes in the collection.\n   *\n   * @param {string} databaseId\n   * @param {string} collectionId\n   * @param {string[]} queries\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.IndexList>}\n   */\n  listIndexes(databaseId, collectionId, queries) {\n    if (typeof databaseId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"databaseId\"');\n    }\n    if (typeof collectionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"collectionId\"');\n    }\n    const apiPath = \"/databases/{databaseId}/collections/{collectionId}/indexes\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId);\n    const payload = {};\n    if (typeof queries !== \"undefined\") {\n      payload[\"queries\"] = queries;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n       * Creates an index on the attributes listed. Your index should include all the attributes you will query in a single request.\n  Attributes can be `key`, `fulltext`, and `unique`.\n       *\n       * @param {string} databaseId\n       * @param {string} collectionId\n       * @param {string} key\n       * @param {IndexType} type\n       * @param {string[]} attributes\n       * @param {string[]} orders\n       * @param {number[]} lengths\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.Index>}\n       */\n  createIndex(databaseId, collectionId, key, type, attributes, orders, lengths) {\n    if (typeof databaseId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"databaseId\"');\n    }\n    if (typeof collectionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"collectionId\"');\n    }\n    if (typeof key === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"key\"');\n    }\n    if (typeof type === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"type\"');\n    }\n    if (typeof attributes === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"attributes\"');\n    }\n    const apiPath = \"/databases/{databaseId}/collections/{collectionId}/indexes\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId);\n    const payload = {};\n    if (typeof key !== \"undefined\") {\n      payload[\"key\"] = key;\n    }\n    if (typeof type !== \"undefined\") {\n      payload[\"type\"] = type;\n    }\n    if (typeof attributes !== \"undefined\") {\n      payload[\"attributes\"] = attributes;\n    }\n    if (typeof orders !== \"undefined\") {\n      payload[\"orders\"] = orders;\n    }\n    if (typeof lengths !== \"undefined\") {\n      payload[\"lengths\"] = lengths;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Get index by ID.\n   *\n   * @param {string} databaseId\n   * @param {string} collectionId\n   * @param {string} key\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Index>}\n   */\n  getIndex(databaseId, collectionId, key) {\n    if (typeof databaseId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"databaseId\"');\n    }\n    if (typeof collectionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"collectionId\"');\n    }\n    if (typeof key === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"key\"');\n    }\n    const apiPath = \"/databases/{databaseId}/collections/{collectionId}/indexes/{key}\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId).replace(\"{key}\", key);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Delete an index.\n   *\n   * @param {string} databaseId\n   * @param {string} collectionId\n   * @param {string} key\n   * @throws {AppwriteException}\n   * @returns {Promise<{}>}\n   */\n  deleteIndex(databaseId, collectionId, key) {\n    if (typeof databaseId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"databaseId\"');\n    }\n    if (typeof collectionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"collectionId\"');\n    }\n    if (typeof key === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"key\"');\n    }\n    const apiPath = \"/databases/{databaseId}/collections/{collectionId}/indexes/{key}\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId).replace(\"{key}\", key);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"delete\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n};\n\n\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=databases.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-appwrite/dist/services/databases.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-appwrite/dist/services/functions.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/node-appwrite/dist/services/functions.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Functions: () => (/* binding */ Functions)\n/* harmony export */ });\n/* harmony import */ var _client_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../client.mjs */ \"(ssr)/./node_modules/node-appwrite/dist/client.mjs\");\n\n\n// src/services/functions.ts\nvar Functions = class {\n  constructor(client) {\n    this.client = client;\n  }\n  /**\n   * Get a list of all the project&#039;s functions. You can use the query params to filter your results.\n   *\n   * @param {string[]} queries\n   * @param {string} search\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.FunctionList>}\n   */\n  list(queries, search) {\n    const apiPath = \"/functions\";\n    const payload = {};\n    if (typeof queries !== \"undefined\") {\n      payload[\"queries\"] = queries;\n    }\n    if (typeof search !== \"undefined\") {\n      payload[\"search\"] = search;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Create a new function. You can pass a list of [permissions](https://appwrite.io/docs/permissions) to allow different project users or team with access to execute the function using the client API.\n   *\n   * @param {string} functionId\n   * @param {string} name\n   * @param {Runtime} runtime\n   * @param {string[]} execute\n   * @param {string[]} events\n   * @param {string} schedule\n   * @param {number} timeout\n   * @param {boolean} enabled\n   * @param {boolean} logging\n   * @param {string} entrypoint\n   * @param {string} commands\n   * @param {string[]} scopes\n   * @param {string} installationId\n   * @param {string} providerRepositoryId\n   * @param {string} providerBranch\n   * @param {boolean} providerSilentMode\n   * @param {string} providerRootDirectory\n   * @param {string} specification\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Function>}\n   */\n  create(functionId, name, runtime, execute, events, schedule, timeout, enabled, logging, entrypoint, commands, scopes, installationId, providerRepositoryId, providerBranch, providerSilentMode, providerRootDirectory, specification) {\n    if (typeof functionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"functionId\"');\n    }\n    if (typeof name === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"name\"');\n    }\n    if (typeof runtime === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"runtime\"');\n    }\n    const apiPath = \"/functions\";\n    const payload = {};\n    if (typeof functionId !== \"undefined\") {\n      payload[\"functionId\"] = functionId;\n    }\n    if (typeof name !== \"undefined\") {\n      payload[\"name\"] = name;\n    }\n    if (typeof runtime !== \"undefined\") {\n      payload[\"runtime\"] = runtime;\n    }\n    if (typeof execute !== \"undefined\") {\n      payload[\"execute\"] = execute;\n    }\n    if (typeof events !== \"undefined\") {\n      payload[\"events\"] = events;\n    }\n    if (typeof schedule !== \"undefined\") {\n      payload[\"schedule\"] = schedule;\n    }\n    if (typeof timeout !== \"undefined\") {\n      payload[\"timeout\"] = timeout;\n    }\n    if (typeof enabled !== \"undefined\") {\n      payload[\"enabled\"] = enabled;\n    }\n    if (typeof logging !== \"undefined\") {\n      payload[\"logging\"] = logging;\n    }\n    if (typeof entrypoint !== \"undefined\") {\n      payload[\"entrypoint\"] = entrypoint;\n    }\n    if (typeof commands !== \"undefined\") {\n      payload[\"commands\"] = commands;\n    }\n    if (typeof scopes !== \"undefined\") {\n      payload[\"scopes\"] = scopes;\n    }\n    if (typeof installationId !== \"undefined\") {\n      payload[\"installationId\"] = installationId;\n    }\n    if (typeof providerRepositoryId !== \"undefined\") {\n      payload[\"providerRepositoryId\"] = providerRepositoryId;\n    }\n    if (typeof providerBranch !== \"undefined\") {\n      payload[\"providerBranch\"] = providerBranch;\n    }\n    if (typeof providerSilentMode !== \"undefined\") {\n      payload[\"providerSilentMode\"] = providerSilentMode;\n    }\n    if (typeof providerRootDirectory !== \"undefined\") {\n      payload[\"providerRootDirectory\"] = providerRootDirectory;\n    }\n    if (typeof specification !== \"undefined\") {\n      payload[\"specification\"] = specification;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Get a list of all runtimes that are currently active on your instance.\n   *\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.RuntimeList>}\n   */\n  listRuntimes() {\n    const apiPath = \"/functions/runtimes\";\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * List allowed function specifications for this instance.\n   *\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.SpecificationList>}\n   */\n  listSpecifications() {\n    const apiPath = \"/functions/specifications\";\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Get a function by its unique ID.\n   *\n   * @param {string} functionId\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Function>}\n   */\n  get(functionId) {\n    if (typeof functionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"functionId\"');\n    }\n    const apiPath = \"/functions/{functionId}\".replace(\"{functionId}\", functionId);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Update function by its unique ID.\n   *\n   * @param {string} functionId\n   * @param {string} name\n   * @param {Runtime} runtime\n   * @param {string[]} execute\n   * @param {string[]} events\n   * @param {string} schedule\n   * @param {number} timeout\n   * @param {boolean} enabled\n   * @param {boolean} logging\n   * @param {string} entrypoint\n   * @param {string} commands\n   * @param {string[]} scopes\n   * @param {string} installationId\n   * @param {string} providerRepositoryId\n   * @param {string} providerBranch\n   * @param {boolean} providerSilentMode\n   * @param {string} providerRootDirectory\n   * @param {string} specification\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Function>}\n   */\n  update(functionId, name, runtime, execute, events, schedule, timeout, enabled, logging, entrypoint, commands, scopes, installationId, providerRepositoryId, providerBranch, providerSilentMode, providerRootDirectory, specification) {\n    if (typeof functionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"functionId\"');\n    }\n    if (typeof name === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"name\"');\n    }\n    const apiPath = \"/functions/{functionId}\".replace(\"{functionId}\", functionId);\n    const payload = {};\n    if (typeof name !== \"undefined\") {\n      payload[\"name\"] = name;\n    }\n    if (typeof runtime !== \"undefined\") {\n      payload[\"runtime\"] = runtime;\n    }\n    if (typeof execute !== \"undefined\") {\n      payload[\"execute\"] = execute;\n    }\n    if (typeof events !== \"undefined\") {\n      payload[\"events\"] = events;\n    }\n    if (typeof schedule !== \"undefined\") {\n      payload[\"schedule\"] = schedule;\n    }\n    if (typeof timeout !== \"undefined\") {\n      payload[\"timeout\"] = timeout;\n    }\n    if (typeof enabled !== \"undefined\") {\n      payload[\"enabled\"] = enabled;\n    }\n    if (typeof logging !== \"undefined\") {\n      payload[\"logging\"] = logging;\n    }\n    if (typeof entrypoint !== \"undefined\") {\n      payload[\"entrypoint\"] = entrypoint;\n    }\n    if (typeof commands !== \"undefined\") {\n      payload[\"commands\"] = commands;\n    }\n    if (typeof scopes !== \"undefined\") {\n      payload[\"scopes\"] = scopes;\n    }\n    if (typeof installationId !== \"undefined\") {\n      payload[\"installationId\"] = installationId;\n    }\n    if (typeof providerRepositoryId !== \"undefined\") {\n      payload[\"providerRepositoryId\"] = providerRepositoryId;\n    }\n    if (typeof providerBranch !== \"undefined\") {\n      payload[\"providerBranch\"] = providerBranch;\n    }\n    if (typeof providerSilentMode !== \"undefined\") {\n      payload[\"providerSilentMode\"] = providerSilentMode;\n    }\n    if (typeof providerRootDirectory !== \"undefined\") {\n      payload[\"providerRootDirectory\"] = providerRootDirectory;\n    }\n    if (typeof specification !== \"undefined\") {\n      payload[\"specification\"] = specification;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"put\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Delete a function by its unique ID.\n   *\n   * @param {string} functionId\n   * @throws {AppwriteException}\n   * @returns {Promise<{}>}\n   */\n  delete(functionId) {\n    if (typeof functionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"functionId\"');\n    }\n    const apiPath = \"/functions/{functionId}\".replace(\"{functionId}\", functionId);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"delete\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Update the function active deployment. Use this endpoint to switch the code deployment that should be used when visitor opens your function.\n   *\n   * @param {string} functionId\n   * @param {string} deploymentId\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Function>}\n   */\n  updateFunctionDeployment(functionId, deploymentId) {\n    if (typeof functionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"functionId\"');\n    }\n    if (typeof deploymentId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"deploymentId\"');\n    }\n    const apiPath = \"/functions/{functionId}/deployment\".replace(\"{functionId}\", functionId);\n    const payload = {};\n    if (typeof deploymentId !== \"undefined\") {\n      payload[\"deploymentId\"] = deploymentId;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"patch\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Get a list of all the function&#039;s code deployments. You can use the query params to filter your results.\n   *\n   * @param {string} functionId\n   * @param {string[]} queries\n   * @param {string} search\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.DeploymentList>}\n   */\n  listDeployments(functionId, queries, search) {\n    if (typeof functionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"functionId\"');\n    }\n    const apiPath = \"/functions/{functionId}/deployments\".replace(\"{functionId}\", functionId);\n    const payload = {};\n    if (typeof queries !== \"undefined\") {\n      payload[\"queries\"] = queries;\n    }\n    if (typeof search !== \"undefined\") {\n      payload[\"search\"] = search;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n       * Create a new function code deployment. Use this endpoint to upload a new version of your code function. To execute your newly uploaded code, you&#039;ll need to update the function&#039;s deployment to use your new deployment UID.\n  \n  This endpoint accepts a tar.gz file compressed with your code. Make sure to include any dependencies your code has within the compressed file. You can learn more about code packaging in the [Appwrite Cloud Functions tutorial](https://appwrite.io/docs/functions).\n  \n  Use the &quot;command&quot; param to set the entrypoint used to execute your code.\n       *\n       * @param {string} functionId\n       * @param {File} code\n       * @param {boolean} activate\n       * @param {string} entrypoint\n       * @param {string} commands\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.Deployment>}\n       */\n  createDeployment(functionId, code, activate, entrypoint, commands, onProgress = (progress) => {\n  }) {\n    if (typeof functionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"functionId\"');\n    }\n    if (typeof code === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"code\"');\n    }\n    if (typeof activate === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"activate\"');\n    }\n    const apiPath = \"/functions/{functionId}/deployments\".replace(\"{functionId}\", functionId);\n    const payload = {};\n    if (typeof entrypoint !== \"undefined\") {\n      payload[\"entrypoint\"] = entrypoint;\n    }\n    if (typeof commands !== \"undefined\") {\n      payload[\"commands\"] = commands;\n    }\n    if (typeof code !== \"undefined\") {\n      payload[\"code\"] = code;\n    }\n    if (typeof activate !== \"undefined\") {\n      payload[\"activate\"] = activate;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"multipart/form-data\"\n    };\n    return this.client.chunkedUpload(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload,\n      onProgress\n    );\n  }\n  /**\n   * Create a new build for an existing function deployment. This endpoint allows you to rebuild a deployment with the updated function configuration, including its entrypoint and build commands if they have been modified. The build process will be queued and executed asynchronously. The original deployment&#039;s code will be preserved and used for the new build.\n   *\n   * @param {string} functionId\n   * @param {string} deploymentId\n   * @param {string} buildId\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Deployment>}\n   */\n  createDuplicateDeployment(functionId, deploymentId, buildId) {\n    if (typeof functionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"functionId\"');\n    }\n    if (typeof deploymentId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"deploymentId\"');\n    }\n    const apiPath = \"/functions/{functionId}/deployments/duplicate\".replace(\"{functionId}\", functionId);\n    const payload = {};\n    if (typeof deploymentId !== \"undefined\") {\n      payload[\"deploymentId\"] = deploymentId;\n    }\n    if (typeof buildId !== \"undefined\") {\n      payload[\"buildId\"] = buildId;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n       * Create a deployment based on a template.\n  \n  Use this endpoint with combination of [listTemplates](https://appwrite.io/docs/server/functions#listTemplates) to find the template details.\n       *\n       * @param {string} functionId\n       * @param {string} repository\n       * @param {string} owner\n       * @param {string} rootDirectory\n       * @param {string} version\n       * @param {boolean} activate\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.Deployment>}\n       */\n  createTemplateDeployment(functionId, repository, owner, rootDirectory, version, activate) {\n    if (typeof functionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"functionId\"');\n    }\n    if (typeof repository === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"repository\"');\n    }\n    if (typeof owner === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"owner\"');\n    }\n    if (typeof rootDirectory === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"rootDirectory\"');\n    }\n    if (typeof version === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"version\"');\n    }\n    const apiPath = \"/functions/{functionId}/deployments/template\".replace(\"{functionId}\", functionId);\n    const payload = {};\n    if (typeof repository !== \"undefined\") {\n      payload[\"repository\"] = repository;\n    }\n    if (typeof owner !== \"undefined\") {\n      payload[\"owner\"] = owner;\n    }\n    if (typeof rootDirectory !== \"undefined\") {\n      payload[\"rootDirectory\"] = rootDirectory;\n    }\n    if (typeof version !== \"undefined\") {\n      payload[\"version\"] = version;\n    }\n    if (typeof activate !== \"undefined\") {\n      payload[\"activate\"] = activate;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n       * Create a deployment when a function is connected to VCS.\n  \n  This endpoint lets you create deployment from a branch, commit, or a tag.\n       *\n       * @param {string} functionId\n       * @param {VCSDeploymentType} type\n       * @param {string} reference\n       * @param {boolean} activate\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.Deployment>}\n       */\n  createVcsDeployment(functionId, type, reference, activate) {\n    if (typeof functionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"functionId\"');\n    }\n    if (typeof type === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"type\"');\n    }\n    if (typeof reference === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"reference\"');\n    }\n    const apiPath = \"/functions/{functionId}/deployments/vcs\".replace(\"{functionId}\", functionId);\n    const payload = {};\n    if (typeof type !== \"undefined\") {\n      payload[\"type\"] = type;\n    }\n    if (typeof reference !== \"undefined\") {\n      payload[\"reference\"] = reference;\n    }\n    if (typeof activate !== \"undefined\") {\n      payload[\"activate\"] = activate;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Get a function deployment by its unique ID.\n   *\n   * @param {string} functionId\n   * @param {string} deploymentId\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Deployment>}\n   */\n  getDeployment(functionId, deploymentId) {\n    if (typeof functionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"functionId\"');\n    }\n    if (typeof deploymentId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"deploymentId\"');\n    }\n    const apiPath = \"/functions/{functionId}/deployments/{deploymentId}\".replace(\"{functionId}\", functionId).replace(\"{deploymentId}\", deploymentId);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Delete a code deployment by its unique ID.\n   *\n   * @param {string} functionId\n   * @param {string} deploymentId\n   * @throws {AppwriteException}\n   * @returns {Promise<{}>}\n   */\n  deleteDeployment(functionId, deploymentId) {\n    if (typeof functionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"functionId\"');\n    }\n    if (typeof deploymentId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"deploymentId\"');\n    }\n    const apiPath = \"/functions/{functionId}/deployments/{deploymentId}\".replace(\"{functionId}\", functionId).replace(\"{deploymentId}\", deploymentId);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"delete\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Get a function deployment content by its unique ID. The endpoint response return with a &#039;Content-Disposition: attachment&#039; header that tells the browser to start downloading the file to user downloads directory.\n   *\n   * @param {string} functionId\n   * @param {string} deploymentId\n   * @param {DeploymentDownloadType} type\n   * @throws {AppwriteException}\n   * @returns {Promise<ArrayBuffer>}\n   */\n  getDeploymentDownload(functionId, deploymentId, type) {\n    if (typeof functionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"functionId\"');\n    }\n    if (typeof deploymentId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"deploymentId\"');\n    }\n    const apiPath = \"/functions/{functionId}/deployments/{deploymentId}/download\".replace(\"{functionId}\", functionId).replace(\"{deploymentId}\", deploymentId);\n    const payload = {};\n    if (typeof type !== \"undefined\") {\n      payload[\"type\"] = type;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload,\n      \"arrayBuffer\"\n    );\n  }\n  /**\n   * Cancel an ongoing function deployment build. If the build is already in progress, it will be stopped and marked as canceled. If the build hasn&#039;t started yet, it will be marked as canceled without executing. You cannot cancel builds that have already completed (status &#039;ready&#039;) or failed. The response includes the final build status and details.\n   *\n   * @param {string} functionId\n   * @param {string} deploymentId\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Deployment>}\n   */\n  updateDeploymentStatus(functionId, deploymentId) {\n    if (typeof functionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"functionId\"');\n    }\n    if (typeof deploymentId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"deploymentId\"');\n    }\n    const apiPath = \"/functions/{functionId}/deployments/{deploymentId}/status\".replace(\"{functionId}\", functionId).replace(\"{deploymentId}\", deploymentId);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"patch\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Get a list of all the current user function execution logs. You can use the query params to filter your results.\n   *\n   * @param {string} functionId\n   * @param {string[]} queries\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.ExecutionList>}\n   */\n  listExecutions(functionId, queries) {\n    if (typeof functionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"functionId\"');\n    }\n    const apiPath = \"/functions/{functionId}/executions\".replace(\"{functionId}\", functionId);\n    const payload = {};\n    if (typeof queries !== \"undefined\") {\n      payload[\"queries\"] = queries;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Trigger a function execution. The returned object will return you the current execution status. You can ping the `Get Execution` endpoint to get updates on the current execution status. Once this endpoint is called, your function execution process will start asynchronously.\n   *\n   * @param {string} functionId\n   * @param {string} body\n   * @param {boolean} async\n   * @param {string} xpath\n   * @param {ExecutionMethod} method\n   * @param {object} headers\n   * @param {string} scheduledAt\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Execution>}\n   */\n  createExecution(functionId, body, async, xpath, method, headers, scheduledAt) {\n    if (typeof functionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"functionId\"');\n    }\n    const apiPath = \"/functions/{functionId}/executions\".replace(\"{functionId}\", functionId);\n    const payload = {};\n    if (typeof body !== \"undefined\") {\n      payload[\"body\"] = body;\n    }\n    if (typeof async !== \"undefined\") {\n      payload[\"async\"] = async;\n    }\n    if (typeof xpath !== \"undefined\") {\n      payload[\"path\"] = xpath;\n    }\n    if (typeof method !== \"undefined\") {\n      payload[\"method\"] = method;\n    }\n    if (typeof headers !== \"undefined\") {\n      payload[\"headers\"] = headers;\n    }\n    if (typeof scheduledAt !== \"undefined\") {\n      payload[\"scheduledAt\"] = scheduledAt;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Get a function execution log by its unique ID.\n   *\n   * @param {string} functionId\n   * @param {string} executionId\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Execution>}\n   */\n  getExecution(functionId, executionId) {\n    if (typeof functionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"functionId\"');\n    }\n    if (typeof executionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"executionId\"');\n    }\n    const apiPath = \"/functions/{functionId}/executions/{executionId}\".replace(\"{functionId}\", functionId).replace(\"{executionId}\", executionId);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Delete a function execution by its unique ID.\n   *\n   * @param {string} functionId\n   * @param {string} executionId\n   * @throws {AppwriteException}\n   * @returns {Promise<{}>}\n   */\n  deleteExecution(functionId, executionId) {\n    if (typeof functionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"functionId\"');\n    }\n    if (typeof executionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"executionId\"');\n    }\n    const apiPath = \"/functions/{functionId}/executions/{executionId}\".replace(\"{functionId}\", functionId).replace(\"{executionId}\", executionId);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"delete\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Get a list of all variables of a specific function.\n   *\n   * @param {string} functionId\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.VariableList>}\n   */\n  listVariables(functionId) {\n    if (typeof functionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"functionId\"');\n    }\n    const apiPath = \"/functions/{functionId}/variables\".replace(\"{functionId}\", functionId);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Create a new function environment variable. These variables can be accessed in the function at runtime as environment variables.\n   *\n   * @param {string} functionId\n   * @param {string} key\n   * @param {string} value\n   * @param {boolean} secret\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Variable>}\n   */\n  createVariable(functionId, key, value, secret) {\n    if (typeof functionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"functionId\"');\n    }\n    if (typeof key === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"key\"');\n    }\n    if (typeof value === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"value\"');\n    }\n    const apiPath = \"/functions/{functionId}/variables\".replace(\"{functionId}\", functionId);\n    const payload = {};\n    if (typeof key !== \"undefined\") {\n      payload[\"key\"] = key;\n    }\n    if (typeof value !== \"undefined\") {\n      payload[\"value\"] = value;\n    }\n    if (typeof secret !== \"undefined\") {\n      payload[\"secret\"] = secret;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Get a variable by its unique ID.\n   *\n   * @param {string} functionId\n   * @param {string} variableId\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Variable>}\n   */\n  getVariable(functionId, variableId) {\n    if (typeof functionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"functionId\"');\n    }\n    if (typeof variableId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"variableId\"');\n    }\n    const apiPath = \"/functions/{functionId}/variables/{variableId}\".replace(\"{functionId}\", functionId).replace(\"{variableId}\", variableId);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Update variable by its unique ID.\n   *\n   * @param {string} functionId\n   * @param {string} variableId\n   * @param {string} key\n   * @param {string} value\n   * @param {boolean} secret\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Variable>}\n   */\n  updateVariable(functionId, variableId, key, value, secret) {\n    if (typeof functionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"functionId\"');\n    }\n    if (typeof variableId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"variableId\"');\n    }\n    if (typeof key === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"key\"');\n    }\n    const apiPath = \"/functions/{functionId}/variables/{variableId}\".replace(\"{functionId}\", functionId).replace(\"{variableId}\", variableId);\n    const payload = {};\n    if (typeof key !== \"undefined\") {\n      payload[\"key\"] = key;\n    }\n    if (typeof value !== \"undefined\") {\n      payload[\"value\"] = value;\n    }\n    if (typeof secret !== \"undefined\") {\n      payload[\"secret\"] = secret;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"put\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Delete a variable by its unique ID.\n   *\n   * @param {string} functionId\n   * @param {string} variableId\n   * @throws {AppwriteException}\n   * @returns {Promise<{}>}\n   */\n  deleteVariable(functionId, variableId) {\n    if (typeof functionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"functionId\"');\n    }\n    if (typeof variableId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"variableId\"');\n    }\n    const apiPath = \"/functions/{functionId}/variables/{variableId}\".replace(\"{functionId}\", functionId).replace(\"{variableId}\", variableId);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"delete\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n};\n\n\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=functions.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-appwrite/dist/services/functions.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-appwrite/dist/services/graphql.mjs":
/*!**************************************************************!*\
  !*** ./node_modules/node-appwrite/dist/services/graphql.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Graphql: () => (/* binding */ Graphql)\n/* harmony export */ });\n/* harmony import */ var _client_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../client.mjs */ \"(ssr)/./node_modules/node-appwrite/dist/client.mjs\");\n\n\n// src/services/graphql.ts\nvar Graphql = class {\n  constructor(client) {\n    this.client = client;\n  }\n  /**\n   * Execute a GraphQL mutation.\n   *\n   * @param {object} query\n   * @throws {AppwriteException}\n   * @returns {Promise<{}>}\n   */\n  query(query) {\n    if (typeof query === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"query\"');\n    }\n    const apiPath = \"/graphql\";\n    const payload = {};\n    if (typeof query !== \"undefined\") {\n      payload[\"query\"] = query;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"x-sdk-graphql\": \"true\",\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Execute a GraphQL mutation.\n   *\n   * @param {object} query\n   * @throws {AppwriteException}\n   * @returns {Promise<{}>}\n   */\n  mutation(query) {\n    if (typeof query === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"query\"');\n    }\n    const apiPath = \"/graphql/mutation\";\n    const payload = {};\n    if (typeof query !== \"undefined\") {\n      payload[\"query\"] = query;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"x-sdk-graphql\": \"true\",\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n};\n\n\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=graphql.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L3NlcnZpY2VzL2dyYXBocWwubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQWtEOztBQUVsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGNBQWM7QUFDZCxlQUFlLFVBQVU7QUFDekI7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLDBEQUFpQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsY0FBYztBQUNkLGVBQWUsVUFBVTtBQUN6QjtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsMERBQWlCO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVtQjtBQUNuQjtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2Rpc3Qvc2VydmljZXMvZ3JhcGhxbC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwd3JpdGVFeGNlcHRpb24gfSBmcm9tICcuLi9jbGllbnQubWpzJztcblxuLy8gc3JjL3NlcnZpY2VzL2dyYXBocWwudHNcbnZhciBHcmFwaHFsID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcihjbGllbnQpIHtcbiAgICB0aGlzLmNsaWVudCA9IGNsaWVudDtcbiAgfVxuICAvKipcbiAgICogRXhlY3V0ZSBhIEdyYXBoUUwgbXV0YXRpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBxdWVyeVxuICAgKiBAdGhyb3dzIHtBcHB3cml0ZUV4Y2VwdGlvbn1cbiAgICogQHJldHVybnMge1Byb21pc2U8e30+fVxuICAgKi9cbiAgcXVlcnkocXVlcnkpIHtcbiAgICBpZiAodHlwZW9mIHF1ZXJ5ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgQXBwd3JpdGVFeGNlcHRpb24oJ01pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyOiBcInF1ZXJ5XCInKTtcbiAgICB9XG4gICAgY29uc3QgYXBpUGF0aCA9IFwiL2dyYXBocWxcIjtcbiAgICBjb25zdCBwYXlsb2FkID0ge307XG4gICAgaWYgKHR5cGVvZiBxdWVyeSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcInF1ZXJ5XCJdID0gcXVlcnk7XG4gICAgfVxuICAgIGNvbnN0IHVyaSA9IG5ldyBVUkwodGhpcy5jbGllbnQuY29uZmlnLmVuZHBvaW50ICsgYXBpUGF0aCk7XG4gICAgY29uc3QgYXBpSGVhZGVycyA9IHtcbiAgICAgIFwieC1zZGstZ3JhcGhxbFwiOiBcInRydWVcIixcbiAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiXG4gICAgfTtcbiAgICByZXR1cm4gdGhpcy5jbGllbnQuY2FsbChcbiAgICAgIFwicG9zdFwiLFxuICAgICAgdXJpLFxuICAgICAgYXBpSGVhZGVycyxcbiAgICAgIHBheWxvYWRcbiAgICApO1xuICB9XG4gIC8qKlxuICAgKiBFeGVjdXRlIGEgR3JhcGhRTCBtdXRhdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IHF1ZXJ5XG4gICAqIEB0aHJvd3Mge0FwcHdyaXRlRXhjZXB0aW9ufVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx7fT59XG4gICAqL1xuICBtdXRhdGlvbihxdWVyeSkge1xuICAgIGlmICh0eXBlb2YgcXVlcnkgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBBcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwicXVlcnlcIicpO1xuICAgIH1cbiAgICBjb25zdCBhcGlQYXRoID0gXCIvZ3JhcGhxbC9tdXRhdGlvblwiO1xuICAgIGNvbnN0IHBheWxvYWQgPSB7fTtcbiAgICBpZiAodHlwZW9mIHF1ZXJ5ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBwYXlsb2FkW1wicXVlcnlcIl0gPSBxdWVyeTtcbiAgICB9XG4gICAgY29uc3QgdXJpID0gbmV3IFVSTCh0aGlzLmNsaWVudC5jb25maWcuZW5kcG9pbnQgKyBhcGlQYXRoKTtcbiAgICBjb25zdCBhcGlIZWFkZXJzID0ge1xuICAgICAgXCJ4LXNkay1ncmFwaHFsXCI6IFwidHJ1ZVwiLFxuICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCJcbiAgICB9O1xuICAgIHJldHVybiB0aGlzLmNsaWVudC5jYWxsKFxuICAgICAgXCJwb3N0XCIsXG4gICAgICB1cmksXG4gICAgICBhcGlIZWFkZXJzLFxuICAgICAgcGF5bG9hZFxuICAgICk7XG4gIH1cbn07XG5cbmV4cG9ydCB7IEdyYXBocWwgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW91dC5qcy5tYXBcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdyYXBocWwubWpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-appwrite/dist/services/graphql.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-appwrite/dist/services/health.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/node-appwrite/dist/services/health.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Health: () => (/* binding */ Health)\n/* harmony export */ });\n/* harmony import */ var _client_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../client.mjs */ \"(ssr)/./node_modules/node-appwrite/dist/client.mjs\");\n\n\n// src/services/health.ts\nvar Health = class {\n  constructor(client) {\n    this.client = client;\n  }\n  /**\n   * Check the Appwrite HTTP server is up and responsive.\n   *\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.HealthStatus>}\n   */\n  get() {\n    const apiPath = \"/health\";\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Check the Appwrite Antivirus server is up and connection is successful.\n   *\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.HealthAntivirus>}\n   */\n  getAntivirus() {\n    const apiPath = \"/health/anti-virus\";\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Check the Appwrite in-memory cache servers are up and connection is successful.\n   *\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.HealthStatus>}\n   */\n  getCache() {\n    const apiPath = \"/health/cache\";\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Get the SSL certificate for a domain\n   *\n   * @param {string} domain\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.HealthCertificate>}\n   */\n  getCertificate(domain) {\n    const apiPath = \"/health/certificate\";\n    const payload = {};\n    if (typeof domain !== \"undefined\") {\n      payload[\"domain\"] = domain;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Check the Appwrite database servers are up and connection is successful.\n   *\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.HealthStatus>}\n   */\n  getDB() {\n    const apiPath = \"/health/db\";\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Check the Appwrite pub-sub servers are up and connection is successful.\n   *\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.HealthStatus>}\n   */\n  getPubSub() {\n    const apiPath = \"/health/pubsub\";\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Get the number of builds that are waiting to be processed in the Appwrite internal queue server.\n   *\n   * @param {number} threshold\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.HealthQueue>}\n   */\n  getQueueBuilds(threshold) {\n    const apiPath = \"/health/queue/builds\";\n    const payload = {};\n    if (typeof threshold !== \"undefined\") {\n      payload[\"threshold\"] = threshold;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Get the number of certificates that are waiting to be issued against [Letsencrypt](https://letsencrypt.org/) in the Appwrite internal queue server.\n   *\n   * @param {number} threshold\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.HealthQueue>}\n   */\n  getQueueCertificates(threshold) {\n    const apiPath = \"/health/queue/certificates\";\n    const payload = {};\n    if (typeof threshold !== \"undefined\") {\n      payload[\"threshold\"] = threshold;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Get the number of database changes that are waiting to be processed in the Appwrite internal queue server.\n   *\n   * @param {string} name\n   * @param {number} threshold\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.HealthQueue>}\n   */\n  getQueueDatabases(name, threshold) {\n    const apiPath = \"/health/queue/databases\";\n    const payload = {};\n    if (typeof name !== \"undefined\") {\n      payload[\"name\"] = name;\n    }\n    if (typeof threshold !== \"undefined\") {\n      payload[\"threshold\"] = threshold;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Get the number of background destructive changes that are waiting to be processed in the Appwrite internal queue server.\n   *\n   * @param {number} threshold\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.HealthQueue>}\n   */\n  getQueueDeletes(threshold) {\n    const apiPath = \"/health/queue/deletes\";\n    const payload = {};\n    if (typeof threshold !== \"undefined\") {\n      payload[\"threshold\"] = threshold;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n       * Returns the amount of failed jobs in a given queue.\n  \n       *\n       * @param {Name} name\n       * @param {number} threshold\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.HealthQueue>}\n       */\n  getFailedJobs(name, threshold) {\n    if (typeof name === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"name\"');\n    }\n    const apiPath = \"/health/queue/failed/{name}\".replace(\"{name}\", name);\n    const payload = {};\n    if (typeof threshold !== \"undefined\") {\n      payload[\"threshold\"] = threshold;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Get the number of function executions that are waiting to be processed in the Appwrite internal queue server.\n   *\n   * @param {number} threshold\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.HealthQueue>}\n   */\n  getQueueFunctions(threshold) {\n    const apiPath = \"/health/queue/functions\";\n    const payload = {};\n    if (typeof threshold !== \"undefined\") {\n      payload[\"threshold\"] = threshold;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Get the number of logs that are waiting to be processed in the Appwrite internal queue server.\n   *\n   * @param {number} threshold\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.HealthQueue>}\n   */\n  getQueueLogs(threshold) {\n    const apiPath = \"/health/queue/logs\";\n    const payload = {};\n    if (typeof threshold !== \"undefined\") {\n      payload[\"threshold\"] = threshold;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Get the number of mails that are waiting to be processed in the Appwrite internal queue server.\n   *\n   * @param {number} threshold\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.HealthQueue>}\n   */\n  getQueueMails(threshold) {\n    const apiPath = \"/health/queue/mails\";\n    const payload = {};\n    if (typeof threshold !== \"undefined\") {\n      payload[\"threshold\"] = threshold;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Get the number of messages that are waiting to be processed in the Appwrite internal queue server.\n   *\n   * @param {number} threshold\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.HealthQueue>}\n   */\n  getQueueMessaging(threshold) {\n    const apiPath = \"/health/queue/messaging\";\n    const payload = {};\n    if (typeof threshold !== \"undefined\") {\n      payload[\"threshold\"] = threshold;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Get the number of migrations that are waiting to be processed in the Appwrite internal queue server.\n   *\n   * @param {number} threshold\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.HealthQueue>}\n   */\n  getQueueMigrations(threshold) {\n    const apiPath = \"/health/queue/migrations\";\n    const payload = {};\n    if (typeof threshold !== \"undefined\") {\n      payload[\"threshold\"] = threshold;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Get the number of metrics that are waiting to be processed in the Appwrite stats resources queue.\n   *\n   * @param {number} threshold\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.HealthQueue>}\n   */\n  getQueueStatsResources(threshold) {\n    const apiPath = \"/health/queue/stats-resources\";\n    const payload = {};\n    if (typeof threshold !== \"undefined\") {\n      payload[\"threshold\"] = threshold;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Get the number of metrics that are waiting to be processed in the Appwrite internal queue server.\n   *\n   * @param {number} threshold\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.HealthQueue>}\n   */\n  getQueueUsage(threshold) {\n    const apiPath = \"/health/queue/stats-usage\";\n    const payload = {};\n    if (typeof threshold !== \"undefined\") {\n      payload[\"threshold\"] = threshold;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Get the number of webhooks that are waiting to be processed in the Appwrite internal queue server.\n   *\n   * @param {number} threshold\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.HealthQueue>}\n   */\n  getQueueWebhooks(threshold) {\n    const apiPath = \"/health/queue/webhooks\";\n    const payload = {};\n    if (typeof threshold !== \"undefined\") {\n      payload[\"threshold\"] = threshold;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Check the Appwrite storage device is up and connection is successful.\n   *\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.HealthStatus>}\n   */\n  getStorage() {\n    const apiPath = \"/health/storage\";\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Check the Appwrite local storage device is up and connection is successful.\n   *\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.HealthStatus>}\n   */\n  getStorageLocal() {\n    const apiPath = \"/health/storage/local\";\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Check the Appwrite server time is synced with Google remote NTP server. We use this technology to smoothly handle leap seconds with no disruptive events. The [Network Time Protocol](https://en.wikipedia.org/wiki/Network_Time_Protocol) (NTP) is used by hundreds of millions of computers and devices to synchronize their clocks over the Internet. If your computer sets its own clock, it likely uses NTP.\n   *\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.HealthTime>}\n   */\n  getTime() {\n    const apiPath = \"/health/time\";\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n};\n\n\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=health.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-appwrite/dist/services/health.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-appwrite/dist/services/locale.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/node-appwrite/dist/services/locale.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Locale: () => (/* binding */ Locale)\n/* harmony export */ });\n// src/services/locale.ts\nvar Locale = class {\n  constructor(client) {\n    this.client = client;\n  }\n  /**\n       * Get the current user location based on IP. Returns an object with user country code, country name, continent name, continent code, ip address and suggested currency. You can use the locale header to get the data in a supported language.\n  \n  ([IP Geolocation by DB-IP](https://db-ip.com))\n       *\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.Locale>}\n       */\n  get() {\n    const apiPath = \"/locale\";\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * List of all locale codes in [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes).\n   *\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.LocaleCodeList>}\n   */\n  listCodes() {\n    const apiPath = \"/locale/codes\";\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * List of all continents. You can use the locale header to get the data in a supported language.\n   *\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.ContinentList>}\n   */\n  listContinents() {\n    const apiPath = \"/locale/continents\";\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * List of all countries. You can use the locale header to get the data in a supported language.\n   *\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.CountryList>}\n   */\n  listCountries() {\n    const apiPath = \"/locale/countries\";\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * List of all countries that are currently members of the EU. You can use the locale header to get the data in a supported language.\n   *\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.CountryList>}\n   */\n  listCountriesEU() {\n    const apiPath = \"/locale/countries/eu\";\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * List of all countries phone codes. You can use the locale header to get the data in a supported language.\n   *\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.PhoneList>}\n   */\n  listCountriesPhones() {\n    const apiPath = \"/locale/countries/phones\";\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * List of all currencies, including currency symbol, name, plural, and decimal digits for all major and minor currencies. You can use the locale header to get the data in a supported language.\n   *\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.CurrencyList>}\n   */\n  listCurrencies() {\n    const apiPath = \"/locale/currencies\";\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * List of all languages classified by ISO 639-1 including 2-letter code, name in English, and name in the respective language.\n   *\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.LanguageList>}\n   */\n  listLanguages() {\n    const apiPath = \"/locale/languages\";\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n};\n\n\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=locale.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L3NlcnZpY2VzL2xvY2FsZS5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZCxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2QsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZCxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2QsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZCxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFa0I7QUFDbEI7QUFDQSIsInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L3NlcnZpY2VzL2xvY2FsZS5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL3NlcnZpY2VzL2xvY2FsZS50c1xudmFyIExvY2FsZSA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoY2xpZW50KSB7XG4gICAgdGhpcy5jbGllbnQgPSBjbGllbnQ7XG4gIH1cbiAgLyoqXG4gICAgICAgKiBHZXQgdGhlIGN1cnJlbnQgdXNlciBsb2NhdGlvbiBiYXNlZCBvbiBJUC4gUmV0dXJucyBhbiBvYmplY3Qgd2l0aCB1c2VyIGNvdW50cnkgY29kZSwgY291bnRyeSBuYW1lLCBjb250aW5lbnQgbmFtZSwgY29udGluZW50IGNvZGUsIGlwIGFkZHJlc3MgYW5kIHN1Z2dlc3RlZCBjdXJyZW5jeS4gWW91IGNhbiB1c2UgdGhlIGxvY2FsZSBoZWFkZXIgdG8gZ2V0IHRoZSBkYXRhIGluIGEgc3VwcG9ydGVkIGxhbmd1YWdlLlxuICBcbiAgKFtJUCBHZW9sb2NhdGlvbiBieSBEQi1JUF0oaHR0cHM6Ly9kYi1pcC5jb20pKVxuICAgICAgICpcbiAgICAgICAqIEB0aHJvd3Mge0FwcHdyaXRlRXhjZXB0aW9ufVxuICAgICAgICogQHJldHVybnMge1Byb21pc2U8TW9kZWxzLkxvY2FsZT59XG4gICAgICAgKi9cbiAgZ2V0KCkge1xuICAgIGNvbnN0IGFwaVBhdGggPSBcIi9sb2NhbGVcIjtcbiAgICBjb25zdCBwYXlsb2FkID0ge307XG4gICAgY29uc3QgdXJpID0gbmV3IFVSTCh0aGlzLmNsaWVudC5jb25maWcuZW5kcG9pbnQgKyBhcGlQYXRoKTtcbiAgICBjb25zdCBhcGlIZWFkZXJzID0ge307XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LmNhbGwoXG4gICAgICBcImdldFwiLFxuICAgICAgdXJpLFxuICAgICAgYXBpSGVhZGVycyxcbiAgICAgIHBheWxvYWRcbiAgICApO1xuICB9XG4gIC8qKlxuICAgKiBMaXN0IG9mIGFsbCBsb2NhbGUgY29kZXMgaW4gW0lTTyA2MzktMV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGlzdF9vZl9JU09fNjM5LTFfY29kZXMpLlxuICAgKlxuICAgKiBAdGhyb3dzIHtBcHB3cml0ZUV4Y2VwdGlvbn1cbiAgICogQHJldHVybnMge1Byb21pc2U8TW9kZWxzLkxvY2FsZUNvZGVMaXN0Pn1cbiAgICovXG4gIGxpc3RDb2RlcygpIHtcbiAgICBjb25zdCBhcGlQYXRoID0gXCIvbG9jYWxlL2NvZGVzXCI7XG4gICAgY29uc3QgcGF5bG9hZCA9IHt9O1xuICAgIGNvbnN0IHVyaSA9IG5ldyBVUkwodGhpcy5jbGllbnQuY29uZmlnLmVuZHBvaW50ICsgYXBpUGF0aCk7XG4gICAgY29uc3QgYXBpSGVhZGVycyA9IHt9O1xuICAgIHJldHVybiB0aGlzLmNsaWVudC5jYWxsKFxuICAgICAgXCJnZXRcIixcbiAgICAgIHVyaSxcbiAgICAgIGFwaUhlYWRlcnMsXG4gICAgICBwYXlsb2FkXG4gICAgKTtcbiAgfVxuICAvKipcbiAgICogTGlzdCBvZiBhbGwgY29udGluZW50cy4gWW91IGNhbiB1c2UgdGhlIGxvY2FsZSBoZWFkZXIgdG8gZ2V0IHRoZSBkYXRhIGluIGEgc3VwcG9ydGVkIGxhbmd1YWdlLlxuICAgKlxuICAgKiBAdGhyb3dzIHtBcHB3cml0ZUV4Y2VwdGlvbn1cbiAgICogQHJldHVybnMge1Byb21pc2U8TW9kZWxzLkNvbnRpbmVudExpc3Q+fVxuICAgKi9cbiAgbGlzdENvbnRpbmVudHMoKSB7XG4gICAgY29uc3QgYXBpUGF0aCA9IFwiL2xvY2FsZS9jb250aW5lbnRzXCI7XG4gICAgY29uc3QgcGF5bG9hZCA9IHt9O1xuICAgIGNvbnN0IHVyaSA9IG5ldyBVUkwodGhpcy5jbGllbnQuY29uZmlnLmVuZHBvaW50ICsgYXBpUGF0aCk7XG4gICAgY29uc3QgYXBpSGVhZGVycyA9IHt9O1xuICAgIHJldHVybiB0aGlzLmNsaWVudC5jYWxsKFxuICAgICAgXCJnZXRcIixcbiAgICAgIHVyaSxcbiAgICAgIGFwaUhlYWRlcnMsXG4gICAgICBwYXlsb2FkXG4gICAgKTtcbiAgfVxuICAvKipcbiAgICogTGlzdCBvZiBhbGwgY291bnRyaWVzLiBZb3UgY2FuIHVzZSB0aGUgbG9jYWxlIGhlYWRlciB0byBnZXQgdGhlIGRhdGEgaW4gYSBzdXBwb3J0ZWQgbGFuZ3VhZ2UuXG4gICAqXG4gICAqIEB0aHJvd3Mge0FwcHdyaXRlRXhjZXB0aW9ufVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxNb2RlbHMuQ291bnRyeUxpc3Q+fVxuICAgKi9cbiAgbGlzdENvdW50cmllcygpIHtcbiAgICBjb25zdCBhcGlQYXRoID0gXCIvbG9jYWxlL2NvdW50cmllc1wiO1xuICAgIGNvbnN0IHBheWxvYWQgPSB7fTtcbiAgICBjb25zdCB1cmkgPSBuZXcgVVJMKHRoaXMuY2xpZW50LmNvbmZpZy5lbmRwb2ludCArIGFwaVBhdGgpO1xuICAgIGNvbnN0IGFwaUhlYWRlcnMgPSB7fTtcbiAgICByZXR1cm4gdGhpcy5jbGllbnQuY2FsbChcbiAgICAgIFwiZ2V0XCIsXG4gICAgICB1cmksXG4gICAgICBhcGlIZWFkZXJzLFxuICAgICAgcGF5bG9hZFxuICAgICk7XG4gIH1cbiAgLyoqXG4gICAqIExpc3Qgb2YgYWxsIGNvdW50cmllcyB0aGF0IGFyZSBjdXJyZW50bHkgbWVtYmVycyBvZiB0aGUgRVUuIFlvdSBjYW4gdXNlIHRoZSBsb2NhbGUgaGVhZGVyIHRvIGdldCB0aGUgZGF0YSBpbiBhIHN1cHBvcnRlZCBsYW5ndWFnZS5cbiAgICpcbiAgICogQHRocm93cyB7QXBwd3JpdGVFeGNlcHRpb259XG4gICAqIEByZXR1cm5zIHtQcm9taXNlPE1vZGVscy5Db3VudHJ5TGlzdD59XG4gICAqL1xuICBsaXN0Q291bnRyaWVzRVUoKSB7XG4gICAgY29uc3QgYXBpUGF0aCA9IFwiL2xvY2FsZS9jb3VudHJpZXMvZXVcIjtcbiAgICBjb25zdCBwYXlsb2FkID0ge307XG4gICAgY29uc3QgdXJpID0gbmV3IFVSTCh0aGlzLmNsaWVudC5jb25maWcuZW5kcG9pbnQgKyBhcGlQYXRoKTtcbiAgICBjb25zdCBhcGlIZWFkZXJzID0ge307XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LmNhbGwoXG4gICAgICBcImdldFwiLFxuICAgICAgdXJpLFxuICAgICAgYXBpSGVhZGVycyxcbiAgICAgIHBheWxvYWRcbiAgICApO1xuICB9XG4gIC8qKlxuICAgKiBMaXN0IG9mIGFsbCBjb3VudHJpZXMgcGhvbmUgY29kZXMuIFlvdSBjYW4gdXNlIHRoZSBsb2NhbGUgaGVhZGVyIHRvIGdldCB0aGUgZGF0YSBpbiBhIHN1cHBvcnRlZCBsYW5ndWFnZS5cbiAgICpcbiAgICogQHRocm93cyB7QXBwd3JpdGVFeGNlcHRpb259XG4gICAqIEByZXR1cm5zIHtQcm9taXNlPE1vZGVscy5QaG9uZUxpc3Q+fVxuICAgKi9cbiAgbGlzdENvdW50cmllc1Bob25lcygpIHtcbiAgICBjb25zdCBhcGlQYXRoID0gXCIvbG9jYWxlL2NvdW50cmllcy9waG9uZXNcIjtcbiAgICBjb25zdCBwYXlsb2FkID0ge307XG4gICAgY29uc3QgdXJpID0gbmV3IFVSTCh0aGlzLmNsaWVudC5jb25maWcuZW5kcG9pbnQgKyBhcGlQYXRoKTtcbiAgICBjb25zdCBhcGlIZWFkZXJzID0ge307XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LmNhbGwoXG4gICAgICBcImdldFwiLFxuICAgICAgdXJpLFxuICAgICAgYXBpSGVhZGVycyxcbiAgICAgIHBheWxvYWRcbiAgICApO1xuICB9XG4gIC8qKlxuICAgKiBMaXN0IG9mIGFsbCBjdXJyZW5jaWVzLCBpbmNsdWRpbmcgY3VycmVuY3kgc3ltYm9sLCBuYW1lLCBwbHVyYWwsIGFuZCBkZWNpbWFsIGRpZ2l0cyBmb3IgYWxsIG1ham9yIGFuZCBtaW5vciBjdXJyZW5jaWVzLiBZb3UgY2FuIHVzZSB0aGUgbG9jYWxlIGhlYWRlciB0byBnZXQgdGhlIGRhdGEgaW4gYSBzdXBwb3J0ZWQgbGFuZ3VhZ2UuXG4gICAqXG4gICAqIEB0aHJvd3Mge0FwcHdyaXRlRXhjZXB0aW9ufVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxNb2RlbHMuQ3VycmVuY3lMaXN0Pn1cbiAgICovXG4gIGxpc3RDdXJyZW5jaWVzKCkge1xuICAgIGNvbnN0IGFwaVBhdGggPSBcIi9sb2NhbGUvY3VycmVuY2llc1wiO1xuICAgIGNvbnN0IHBheWxvYWQgPSB7fTtcbiAgICBjb25zdCB1cmkgPSBuZXcgVVJMKHRoaXMuY2xpZW50LmNvbmZpZy5lbmRwb2ludCArIGFwaVBhdGgpO1xuICAgIGNvbnN0IGFwaUhlYWRlcnMgPSB7fTtcbiAgICByZXR1cm4gdGhpcy5jbGllbnQuY2FsbChcbiAgICAgIFwiZ2V0XCIsXG4gICAgICB1cmksXG4gICAgICBhcGlIZWFkZXJzLFxuICAgICAgcGF5bG9hZFxuICAgICk7XG4gIH1cbiAgLyoqXG4gICAqIExpc3Qgb2YgYWxsIGxhbmd1YWdlcyBjbGFzc2lmaWVkIGJ5IElTTyA2MzktMSBpbmNsdWRpbmcgMi1sZXR0ZXIgY29kZSwgbmFtZSBpbiBFbmdsaXNoLCBhbmQgbmFtZSBpbiB0aGUgcmVzcGVjdGl2ZSBsYW5ndWFnZS5cbiAgICpcbiAgICogQHRocm93cyB7QXBwd3JpdGVFeGNlcHRpb259XG4gICAqIEByZXR1cm5zIHtQcm9taXNlPE1vZGVscy5MYW5ndWFnZUxpc3Q+fVxuICAgKi9cbiAgbGlzdExhbmd1YWdlcygpIHtcbiAgICBjb25zdCBhcGlQYXRoID0gXCIvbG9jYWxlL2xhbmd1YWdlc1wiO1xuICAgIGNvbnN0IHBheWxvYWQgPSB7fTtcbiAgICBjb25zdCB1cmkgPSBuZXcgVVJMKHRoaXMuY2xpZW50LmNvbmZpZy5lbmRwb2ludCArIGFwaVBhdGgpO1xuICAgIGNvbnN0IGFwaUhlYWRlcnMgPSB7fTtcbiAgICByZXR1cm4gdGhpcy5jbGllbnQuY2FsbChcbiAgICAgIFwiZ2V0XCIsXG4gICAgICB1cmksXG4gICAgICBhcGlIZWFkZXJzLFxuICAgICAgcGF5bG9hZFxuICAgICk7XG4gIH1cbn07XG5cbmV4cG9ydCB7IExvY2FsZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b3V0LmpzLm1hcFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9jYWxlLm1qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-appwrite/dist/services/locale.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-appwrite/dist/services/messaging.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/node-appwrite/dist/services/messaging.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Messaging: () => (/* binding */ Messaging)\n/* harmony export */ });\n/* harmony import */ var _client_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../client.mjs */ \"(ssr)/./node_modules/node-appwrite/dist/client.mjs\");\n\n\n// src/services/messaging.ts\nvar Messaging = class {\n  constructor(client) {\n    this.client = client;\n  }\n  /**\n   * Get a list of all messages from the current Appwrite project.\n   *\n   * @param {string[]} queries\n   * @param {string} search\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.MessageList>}\n   */\n  listMessages(queries, search) {\n    const apiPath = \"/messaging/messages\";\n    const payload = {};\n    if (typeof queries !== \"undefined\") {\n      payload[\"queries\"] = queries;\n    }\n    if (typeof search !== \"undefined\") {\n      payload[\"search\"] = search;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Create a new email message.\n   *\n   * @param {string} messageId\n   * @param {string} subject\n   * @param {string} content\n   * @param {string[]} topics\n   * @param {string[]} users\n   * @param {string[]} targets\n   * @param {string[]} cc\n   * @param {string[]} bcc\n   * @param {string[]} attachments\n   * @param {boolean} draft\n   * @param {boolean} html\n   * @param {string} scheduledAt\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Message>}\n   */\n  createEmail(messageId, subject, content, topics, users, targets, cc, bcc, attachments, draft, html, scheduledAt) {\n    if (typeof messageId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"messageId\"');\n    }\n    if (typeof subject === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"subject\"');\n    }\n    if (typeof content === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"content\"');\n    }\n    const apiPath = \"/messaging/messages/email\";\n    const payload = {};\n    if (typeof messageId !== \"undefined\") {\n      payload[\"messageId\"] = messageId;\n    }\n    if (typeof subject !== \"undefined\") {\n      payload[\"subject\"] = subject;\n    }\n    if (typeof content !== \"undefined\") {\n      payload[\"content\"] = content;\n    }\n    if (typeof topics !== \"undefined\") {\n      payload[\"topics\"] = topics;\n    }\n    if (typeof users !== \"undefined\") {\n      payload[\"users\"] = users;\n    }\n    if (typeof targets !== \"undefined\") {\n      payload[\"targets\"] = targets;\n    }\n    if (typeof cc !== \"undefined\") {\n      payload[\"cc\"] = cc;\n    }\n    if (typeof bcc !== \"undefined\") {\n      payload[\"bcc\"] = bcc;\n    }\n    if (typeof attachments !== \"undefined\") {\n      payload[\"attachments\"] = attachments;\n    }\n    if (typeof draft !== \"undefined\") {\n      payload[\"draft\"] = draft;\n    }\n    if (typeof html !== \"undefined\") {\n      payload[\"html\"] = html;\n    }\n    if (typeof scheduledAt !== \"undefined\") {\n      payload[\"scheduledAt\"] = scheduledAt;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n       * Update an email message by its unique ID. This endpoint only works on messages that are in draft status. Messages that are already processing, sent, or failed cannot be updated.\n  \n       *\n       * @param {string} messageId\n       * @param {string[]} topics\n       * @param {string[]} users\n       * @param {string[]} targets\n       * @param {string} subject\n       * @param {string} content\n       * @param {boolean} draft\n       * @param {boolean} html\n       * @param {string[]} cc\n       * @param {string[]} bcc\n       * @param {string} scheduledAt\n       * @param {string[]} attachments\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.Message>}\n       */\n  updateEmail(messageId, topics, users, targets, subject, content, draft, html, cc, bcc, scheduledAt, attachments) {\n    if (typeof messageId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"messageId\"');\n    }\n    const apiPath = \"/messaging/messages/email/{messageId}\".replace(\"{messageId}\", messageId);\n    const payload = {};\n    if (typeof topics !== \"undefined\") {\n      payload[\"topics\"] = topics;\n    }\n    if (typeof users !== \"undefined\") {\n      payload[\"users\"] = users;\n    }\n    if (typeof targets !== \"undefined\") {\n      payload[\"targets\"] = targets;\n    }\n    if (typeof subject !== \"undefined\") {\n      payload[\"subject\"] = subject;\n    }\n    if (typeof content !== \"undefined\") {\n      payload[\"content\"] = content;\n    }\n    if (typeof draft !== \"undefined\") {\n      payload[\"draft\"] = draft;\n    }\n    if (typeof html !== \"undefined\") {\n      payload[\"html\"] = html;\n    }\n    if (typeof cc !== \"undefined\") {\n      payload[\"cc\"] = cc;\n    }\n    if (typeof bcc !== \"undefined\") {\n      payload[\"bcc\"] = bcc;\n    }\n    if (typeof scheduledAt !== \"undefined\") {\n      payload[\"scheduledAt\"] = scheduledAt;\n    }\n    if (typeof attachments !== \"undefined\") {\n      payload[\"attachments\"] = attachments;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"patch\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Create a new push notification.\n   *\n   * @param {string} messageId\n   * @param {string} title\n   * @param {string} body\n   * @param {string[]} topics\n   * @param {string[]} users\n   * @param {string[]} targets\n   * @param {object} data\n   * @param {string} action\n   * @param {string} image\n   * @param {string} icon\n   * @param {string} sound\n   * @param {string} color\n   * @param {string} tag\n   * @param {number} badge\n   * @param {boolean} draft\n   * @param {string} scheduledAt\n   * @param {boolean} contentAvailable\n   * @param {boolean} critical\n   * @param {MessagePriority} priority\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Message>}\n   */\n  createPush(messageId, title, body, topics, users, targets, data, action, image, icon, sound, color, tag, badge, draft, scheduledAt, contentAvailable, critical, priority) {\n    if (typeof messageId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"messageId\"');\n    }\n    const apiPath = \"/messaging/messages/push\";\n    const payload = {};\n    if (typeof messageId !== \"undefined\") {\n      payload[\"messageId\"] = messageId;\n    }\n    if (typeof title !== \"undefined\") {\n      payload[\"title\"] = title;\n    }\n    if (typeof body !== \"undefined\") {\n      payload[\"body\"] = body;\n    }\n    if (typeof topics !== \"undefined\") {\n      payload[\"topics\"] = topics;\n    }\n    if (typeof users !== \"undefined\") {\n      payload[\"users\"] = users;\n    }\n    if (typeof targets !== \"undefined\") {\n      payload[\"targets\"] = targets;\n    }\n    if (typeof data !== \"undefined\") {\n      payload[\"data\"] = data;\n    }\n    if (typeof action !== \"undefined\") {\n      payload[\"action\"] = action;\n    }\n    if (typeof image !== \"undefined\") {\n      payload[\"image\"] = image;\n    }\n    if (typeof icon !== \"undefined\") {\n      payload[\"icon\"] = icon;\n    }\n    if (typeof sound !== \"undefined\") {\n      payload[\"sound\"] = sound;\n    }\n    if (typeof color !== \"undefined\") {\n      payload[\"color\"] = color;\n    }\n    if (typeof tag !== \"undefined\") {\n      payload[\"tag\"] = tag;\n    }\n    if (typeof badge !== \"undefined\") {\n      payload[\"badge\"] = badge;\n    }\n    if (typeof draft !== \"undefined\") {\n      payload[\"draft\"] = draft;\n    }\n    if (typeof scheduledAt !== \"undefined\") {\n      payload[\"scheduledAt\"] = scheduledAt;\n    }\n    if (typeof contentAvailable !== \"undefined\") {\n      payload[\"contentAvailable\"] = contentAvailable;\n    }\n    if (typeof critical !== \"undefined\") {\n      payload[\"critical\"] = critical;\n    }\n    if (typeof priority !== \"undefined\") {\n      payload[\"priority\"] = priority;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n       * Update a push notification by its unique ID. This endpoint only works on messages that are in draft status. Messages that are already processing, sent, or failed cannot be updated.\n  \n       *\n       * @param {string} messageId\n       * @param {string[]} topics\n       * @param {string[]} users\n       * @param {string[]} targets\n       * @param {string} title\n       * @param {string} body\n       * @param {object} data\n       * @param {string} action\n       * @param {string} image\n       * @param {string} icon\n       * @param {string} sound\n       * @param {string} color\n       * @param {string} tag\n       * @param {number} badge\n       * @param {boolean} draft\n       * @param {string} scheduledAt\n       * @param {boolean} contentAvailable\n       * @param {boolean} critical\n       * @param {MessagePriority} priority\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.Message>}\n       */\n  updatePush(messageId, topics, users, targets, title, body, data, action, image, icon, sound, color, tag, badge, draft, scheduledAt, contentAvailable, critical, priority) {\n    if (typeof messageId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"messageId\"');\n    }\n    const apiPath = \"/messaging/messages/push/{messageId}\".replace(\"{messageId}\", messageId);\n    const payload = {};\n    if (typeof topics !== \"undefined\") {\n      payload[\"topics\"] = topics;\n    }\n    if (typeof users !== \"undefined\") {\n      payload[\"users\"] = users;\n    }\n    if (typeof targets !== \"undefined\") {\n      payload[\"targets\"] = targets;\n    }\n    if (typeof title !== \"undefined\") {\n      payload[\"title\"] = title;\n    }\n    if (typeof body !== \"undefined\") {\n      payload[\"body\"] = body;\n    }\n    if (typeof data !== \"undefined\") {\n      payload[\"data\"] = data;\n    }\n    if (typeof action !== \"undefined\") {\n      payload[\"action\"] = action;\n    }\n    if (typeof image !== \"undefined\") {\n      payload[\"image\"] = image;\n    }\n    if (typeof icon !== \"undefined\") {\n      payload[\"icon\"] = icon;\n    }\n    if (typeof sound !== \"undefined\") {\n      payload[\"sound\"] = sound;\n    }\n    if (typeof color !== \"undefined\") {\n      payload[\"color\"] = color;\n    }\n    if (typeof tag !== \"undefined\") {\n      payload[\"tag\"] = tag;\n    }\n    if (typeof badge !== \"undefined\") {\n      payload[\"badge\"] = badge;\n    }\n    if (typeof draft !== \"undefined\") {\n      payload[\"draft\"] = draft;\n    }\n    if (typeof scheduledAt !== \"undefined\") {\n      payload[\"scheduledAt\"] = scheduledAt;\n    }\n    if (typeof contentAvailable !== \"undefined\") {\n      payload[\"contentAvailable\"] = contentAvailable;\n    }\n    if (typeof critical !== \"undefined\") {\n      payload[\"critical\"] = critical;\n    }\n    if (typeof priority !== \"undefined\") {\n      payload[\"priority\"] = priority;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"patch\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Create a new SMS message.\n   *\n   * @param {string} messageId\n   * @param {string} content\n   * @param {string[]} topics\n   * @param {string[]} users\n   * @param {string[]} targets\n   * @param {boolean} draft\n   * @param {string} scheduledAt\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Message>}\n   */\n  createSms(messageId, content, topics, users, targets, draft, scheduledAt) {\n    if (typeof messageId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"messageId\"');\n    }\n    if (typeof content === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"content\"');\n    }\n    const apiPath = \"/messaging/messages/sms\";\n    const payload = {};\n    if (typeof messageId !== \"undefined\") {\n      payload[\"messageId\"] = messageId;\n    }\n    if (typeof content !== \"undefined\") {\n      payload[\"content\"] = content;\n    }\n    if (typeof topics !== \"undefined\") {\n      payload[\"topics\"] = topics;\n    }\n    if (typeof users !== \"undefined\") {\n      payload[\"users\"] = users;\n    }\n    if (typeof targets !== \"undefined\") {\n      payload[\"targets\"] = targets;\n    }\n    if (typeof draft !== \"undefined\") {\n      payload[\"draft\"] = draft;\n    }\n    if (typeof scheduledAt !== \"undefined\") {\n      payload[\"scheduledAt\"] = scheduledAt;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n       * Update an SMS message by its unique ID. This endpoint only works on messages that are in draft status. Messages that are already processing, sent, or failed cannot be updated.\n  \n       *\n       * @param {string} messageId\n       * @param {string[]} topics\n       * @param {string[]} users\n       * @param {string[]} targets\n       * @param {string} content\n       * @param {boolean} draft\n       * @param {string} scheduledAt\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.Message>}\n       */\n  updateSms(messageId, topics, users, targets, content, draft, scheduledAt) {\n    if (typeof messageId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"messageId\"');\n    }\n    const apiPath = \"/messaging/messages/sms/{messageId}\".replace(\"{messageId}\", messageId);\n    const payload = {};\n    if (typeof topics !== \"undefined\") {\n      payload[\"topics\"] = topics;\n    }\n    if (typeof users !== \"undefined\") {\n      payload[\"users\"] = users;\n    }\n    if (typeof targets !== \"undefined\") {\n      payload[\"targets\"] = targets;\n    }\n    if (typeof content !== \"undefined\") {\n      payload[\"content\"] = content;\n    }\n    if (typeof draft !== \"undefined\") {\n      payload[\"draft\"] = draft;\n    }\n    if (typeof scheduledAt !== \"undefined\") {\n      payload[\"scheduledAt\"] = scheduledAt;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"patch\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n       * Get a message by its unique ID.\n  \n       *\n       * @param {string} messageId\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.Message>}\n       */\n  getMessage(messageId) {\n    if (typeof messageId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"messageId\"');\n    }\n    const apiPath = \"/messaging/messages/{messageId}\".replace(\"{messageId}\", messageId);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Delete a message. If the message is not a draft or scheduled, but has been sent, this will not recall the message.\n   *\n   * @param {string} messageId\n   * @throws {AppwriteException}\n   * @returns {Promise<{}>}\n   */\n  delete(messageId) {\n    if (typeof messageId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"messageId\"');\n    }\n    const apiPath = \"/messaging/messages/{messageId}\".replace(\"{messageId}\", messageId);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"delete\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Get the message activity logs listed by its unique ID.\n   *\n   * @param {string} messageId\n   * @param {string[]} queries\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.LogList>}\n   */\n  listMessageLogs(messageId, queries) {\n    if (typeof messageId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"messageId\"');\n    }\n    const apiPath = \"/messaging/messages/{messageId}/logs\".replace(\"{messageId}\", messageId);\n    const payload = {};\n    if (typeof queries !== \"undefined\") {\n      payload[\"queries\"] = queries;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Get a list of the targets associated with a message.\n   *\n   * @param {string} messageId\n   * @param {string[]} queries\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.TargetList>}\n   */\n  listTargets(messageId, queries) {\n    if (typeof messageId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"messageId\"');\n    }\n    const apiPath = \"/messaging/messages/{messageId}/targets\".replace(\"{messageId}\", messageId);\n    const payload = {};\n    if (typeof queries !== \"undefined\") {\n      payload[\"queries\"] = queries;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Get a list of all providers from the current Appwrite project.\n   *\n   * @param {string[]} queries\n   * @param {string} search\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.ProviderList>}\n   */\n  listProviders(queries, search) {\n    const apiPath = \"/messaging/providers\";\n    const payload = {};\n    if (typeof queries !== \"undefined\") {\n      payload[\"queries\"] = queries;\n    }\n    if (typeof search !== \"undefined\") {\n      payload[\"search\"] = search;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Create a new Apple Push Notification service provider.\n   *\n   * @param {string} providerId\n   * @param {string} name\n   * @param {string} authKey\n   * @param {string} authKeyId\n   * @param {string} teamId\n   * @param {string} bundleId\n   * @param {boolean} sandbox\n   * @param {boolean} enabled\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Provider>}\n   */\n  createApnsProvider(providerId, name, authKey, authKeyId, teamId, bundleId, sandbox, enabled) {\n    if (typeof providerId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"providerId\"');\n    }\n    if (typeof name === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"name\"');\n    }\n    const apiPath = \"/messaging/providers/apns\";\n    const payload = {};\n    if (typeof providerId !== \"undefined\") {\n      payload[\"providerId\"] = providerId;\n    }\n    if (typeof name !== \"undefined\") {\n      payload[\"name\"] = name;\n    }\n    if (typeof authKey !== \"undefined\") {\n      payload[\"authKey\"] = authKey;\n    }\n    if (typeof authKeyId !== \"undefined\") {\n      payload[\"authKeyId\"] = authKeyId;\n    }\n    if (typeof teamId !== \"undefined\") {\n      payload[\"teamId\"] = teamId;\n    }\n    if (typeof bundleId !== \"undefined\") {\n      payload[\"bundleId\"] = bundleId;\n    }\n    if (typeof sandbox !== \"undefined\") {\n      payload[\"sandbox\"] = sandbox;\n    }\n    if (typeof enabled !== \"undefined\") {\n      payload[\"enabled\"] = enabled;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Update a Apple Push Notification service provider by its unique ID.\n   *\n   * @param {string} providerId\n   * @param {string} name\n   * @param {boolean} enabled\n   * @param {string} authKey\n   * @param {string} authKeyId\n   * @param {string} teamId\n   * @param {string} bundleId\n   * @param {boolean} sandbox\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Provider>}\n   */\n  updateApnsProvider(providerId, name, enabled, authKey, authKeyId, teamId, bundleId, sandbox) {\n    if (typeof providerId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"providerId\"');\n    }\n    const apiPath = \"/messaging/providers/apns/{providerId}\".replace(\"{providerId}\", providerId);\n    const payload = {};\n    if (typeof name !== \"undefined\") {\n      payload[\"name\"] = name;\n    }\n    if (typeof enabled !== \"undefined\") {\n      payload[\"enabled\"] = enabled;\n    }\n    if (typeof authKey !== \"undefined\") {\n      payload[\"authKey\"] = authKey;\n    }\n    if (typeof authKeyId !== \"undefined\") {\n      payload[\"authKeyId\"] = authKeyId;\n    }\n    if (typeof teamId !== \"undefined\") {\n      payload[\"teamId\"] = teamId;\n    }\n    if (typeof bundleId !== \"undefined\") {\n      payload[\"bundleId\"] = bundleId;\n    }\n    if (typeof sandbox !== \"undefined\") {\n      payload[\"sandbox\"] = sandbox;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"patch\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Create a new Firebase Cloud Messaging provider.\n   *\n   * @param {string} providerId\n   * @param {string} name\n   * @param {object} serviceAccountJSON\n   * @param {boolean} enabled\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Provider>}\n   */\n  createFcmProvider(providerId, name, serviceAccountJSON, enabled) {\n    if (typeof providerId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"providerId\"');\n    }\n    if (typeof name === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"name\"');\n    }\n    const apiPath = \"/messaging/providers/fcm\";\n    const payload = {};\n    if (typeof providerId !== \"undefined\") {\n      payload[\"providerId\"] = providerId;\n    }\n    if (typeof name !== \"undefined\") {\n      payload[\"name\"] = name;\n    }\n    if (typeof serviceAccountJSON !== \"undefined\") {\n      payload[\"serviceAccountJSON\"] = serviceAccountJSON;\n    }\n    if (typeof enabled !== \"undefined\") {\n      payload[\"enabled\"] = enabled;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Update a Firebase Cloud Messaging provider by its unique ID.\n   *\n   * @param {string} providerId\n   * @param {string} name\n   * @param {boolean} enabled\n   * @param {object} serviceAccountJSON\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Provider>}\n   */\n  updateFcmProvider(providerId, name, enabled, serviceAccountJSON) {\n    if (typeof providerId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"providerId\"');\n    }\n    const apiPath = \"/messaging/providers/fcm/{providerId}\".replace(\"{providerId}\", providerId);\n    const payload = {};\n    if (typeof name !== \"undefined\") {\n      payload[\"name\"] = name;\n    }\n    if (typeof enabled !== \"undefined\") {\n      payload[\"enabled\"] = enabled;\n    }\n    if (typeof serviceAccountJSON !== \"undefined\") {\n      payload[\"serviceAccountJSON\"] = serviceAccountJSON;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"patch\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Create a new Mailgun provider.\n   *\n   * @param {string} providerId\n   * @param {string} name\n   * @param {string} apiKey\n   * @param {string} domain\n   * @param {boolean} isEuRegion\n   * @param {string} fromName\n   * @param {string} fromEmail\n   * @param {string} replyToName\n   * @param {string} replyToEmail\n   * @param {boolean} enabled\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Provider>}\n   */\n  createMailgunProvider(providerId, name, apiKey, domain, isEuRegion, fromName, fromEmail, replyToName, replyToEmail, enabled) {\n    if (typeof providerId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"providerId\"');\n    }\n    if (typeof name === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"name\"');\n    }\n    const apiPath = \"/messaging/providers/mailgun\";\n    const payload = {};\n    if (typeof providerId !== \"undefined\") {\n      payload[\"providerId\"] = providerId;\n    }\n    if (typeof name !== \"undefined\") {\n      payload[\"name\"] = name;\n    }\n    if (typeof apiKey !== \"undefined\") {\n      payload[\"apiKey\"] = apiKey;\n    }\n    if (typeof domain !== \"undefined\") {\n      payload[\"domain\"] = domain;\n    }\n    if (typeof isEuRegion !== \"undefined\") {\n      payload[\"isEuRegion\"] = isEuRegion;\n    }\n    if (typeof fromName !== \"undefined\") {\n      payload[\"fromName\"] = fromName;\n    }\n    if (typeof fromEmail !== \"undefined\") {\n      payload[\"fromEmail\"] = fromEmail;\n    }\n    if (typeof replyToName !== \"undefined\") {\n      payload[\"replyToName\"] = replyToName;\n    }\n    if (typeof replyToEmail !== \"undefined\") {\n      payload[\"replyToEmail\"] = replyToEmail;\n    }\n    if (typeof enabled !== \"undefined\") {\n      payload[\"enabled\"] = enabled;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Update a Mailgun provider by its unique ID.\n   *\n   * @param {string} providerId\n   * @param {string} name\n   * @param {string} apiKey\n   * @param {string} domain\n   * @param {boolean} isEuRegion\n   * @param {boolean} enabled\n   * @param {string} fromName\n   * @param {string} fromEmail\n   * @param {string} replyToName\n   * @param {string} replyToEmail\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Provider>}\n   */\n  updateMailgunProvider(providerId, name, apiKey, domain, isEuRegion, enabled, fromName, fromEmail, replyToName, replyToEmail) {\n    if (typeof providerId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"providerId\"');\n    }\n    const apiPath = \"/messaging/providers/mailgun/{providerId}\".replace(\"{providerId}\", providerId);\n    const payload = {};\n    if (typeof name !== \"undefined\") {\n      payload[\"name\"] = name;\n    }\n    if (typeof apiKey !== \"undefined\") {\n      payload[\"apiKey\"] = apiKey;\n    }\n    if (typeof domain !== \"undefined\") {\n      payload[\"domain\"] = domain;\n    }\n    if (typeof isEuRegion !== \"undefined\") {\n      payload[\"isEuRegion\"] = isEuRegion;\n    }\n    if (typeof enabled !== \"undefined\") {\n      payload[\"enabled\"] = enabled;\n    }\n    if (typeof fromName !== \"undefined\") {\n      payload[\"fromName\"] = fromName;\n    }\n    if (typeof fromEmail !== \"undefined\") {\n      payload[\"fromEmail\"] = fromEmail;\n    }\n    if (typeof replyToName !== \"undefined\") {\n      payload[\"replyToName\"] = replyToName;\n    }\n    if (typeof replyToEmail !== \"undefined\") {\n      payload[\"replyToEmail\"] = replyToEmail;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"patch\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Create a new MSG91 provider.\n   *\n   * @param {string} providerId\n   * @param {string} name\n   * @param {string} templateId\n   * @param {string} senderId\n   * @param {string} authKey\n   * @param {boolean} enabled\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Provider>}\n   */\n  createMsg91Provider(providerId, name, templateId, senderId, authKey, enabled) {\n    if (typeof providerId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"providerId\"');\n    }\n    if (typeof name === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"name\"');\n    }\n    const apiPath = \"/messaging/providers/msg91\";\n    const payload = {};\n    if (typeof providerId !== \"undefined\") {\n      payload[\"providerId\"] = providerId;\n    }\n    if (typeof name !== \"undefined\") {\n      payload[\"name\"] = name;\n    }\n    if (typeof templateId !== \"undefined\") {\n      payload[\"templateId\"] = templateId;\n    }\n    if (typeof senderId !== \"undefined\") {\n      payload[\"senderId\"] = senderId;\n    }\n    if (typeof authKey !== \"undefined\") {\n      payload[\"authKey\"] = authKey;\n    }\n    if (typeof enabled !== \"undefined\") {\n      payload[\"enabled\"] = enabled;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Update a MSG91 provider by its unique ID.\n   *\n   * @param {string} providerId\n   * @param {string} name\n   * @param {boolean} enabled\n   * @param {string} templateId\n   * @param {string} senderId\n   * @param {string} authKey\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Provider>}\n   */\n  updateMsg91Provider(providerId, name, enabled, templateId, senderId, authKey) {\n    if (typeof providerId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"providerId\"');\n    }\n    const apiPath = \"/messaging/providers/msg91/{providerId}\".replace(\"{providerId}\", providerId);\n    const payload = {};\n    if (typeof name !== \"undefined\") {\n      payload[\"name\"] = name;\n    }\n    if (typeof enabled !== \"undefined\") {\n      payload[\"enabled\"] = enabled;\n    }\n    if (typeof templateId !== \"undefined\") {\n      payload[\"templateId\"] = templateId;\n    }\n    if (typeof senderId !== \"undefined\") {\n      payload[\"senderId\"] = senderId;\n    }\n    if (typeof authKey !== \"undefined\") {\n      payload[\"authKey\"] = authKey;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"patch\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Create a new Sendgrid provider.\n   *\n   * @param {string} providerId\n   * @param {string} name\n   * @param {string} apiKey\n   * @param {string} fromName\n   * @param {string} fromEmail\n   * @param {string} replyToName\n   * @param {string} replyToEmail\n   * @param {boolean} enabled\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Provider>}\n   */\n  createSendgridProvider(providerId, name, apiKey, fromName, fromEmail, replyToName, replyToEmail, enabled) {\n    if (typeof providerId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"providerId\"');\n    }\n    if (typeof name === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"name\"');\n    }\n    const apiPath = \"/messaging/providers/sendgrid\";\n    const payload = {};\n    if (typeof providerId !== \"undefined\") {\n      payload[\"providerId\"] = providerId;\n    }\n    if (typeof name !== \"undefined\") {\n      payload[\"name\"] = name;\n    }\n    if (typeof apiKey !== \"undefined\") {\n      payload[\"apiKey\"] = apiKey;\n    }\n    if (typeof fromName !== \"undefined\") {\n      payload[\"fromName\"] = fromName;\n    }\n    if (typeof fromEmail !== \"undefined\") {\n      payload[\"fromEmail\"] = fromEmail;\n    }\n    if (typeof replyToName !== \"undefined\") {\n      payload[\"replyToName\"] = replyToName;\n    }\n    if (typeof replyToEmail !== \"undefined\") {\n      payload[\"replyToEmail\"] = replyToEmail;\n    }\n    if (typeof enabled !== \"undefined\") {\n      payload[\"enabled\"] = enabled;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Update a Sendgrid provider by its unique ID.\n   *\n   * @param {string} providerId\n   * @param {string} name\n   * @param {boolean} enabled\n   * @param {string} apiKey\n   * @param {string} fromName\n   * @param {string} fromEmail\n   * @param {string} replyToName\n   * @param {string} replyToEmail\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Provider>}\n   */\n  updateSendgridProvider(providerId, name, enabled, apiKey, fromName, fromEmail, replyToName, replyToEmail) {\n    if (typeof providerId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"providerId\"');\n    }\n    const apiPath = \"/messaging/providers/sendgrid/{providerId}\".replace(\"{providerId}\", providerId);\n    const payload = {};\n    if (typeof name !== \"undefined\") {\n      payload[\"name\"] = name;\n    }\n    if (typeof enabled !== \"undefined\") {\n      payload[\"enabled\"] = enabled;\n    }\n    if (typeof apiKey !== \"undefined\") {\n      payload[\"apiKey\"] = apiKey;\n    }\n    if (typeof fromName !== \"undefined\") {\n      payload[\"fromName\"] = fromName;\n    }\n    if (typeof fromEmail !== \"undefined\") {\n      payload[\"fromEmail\"] = fromEmail;\n    }\n    if (typeof replyToName !== \"undefined\") {\n      payload[\"replyToName\"] = replyToName;\n    }\n    if (typeof replyToEmail !== \"undefined\") {\n      payload[\"replyToEmail\"] = replyToEmail;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"patch\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Create a new SMTP provider.\n   *\n   * @param {string} providerId\n   * @param {string} name\n   * @param {string} host\n   * @param {number} port\n   * @param {string} username\n   * @param {string} password\n   * @param {SmtpEncryption} encryption\n   * @param {boolean} autoTLS\n   * @param {string} mailer\n   * @param {string} fromName\n   * @param {string} fromEmail\n   * @param {string} replyToName\n   * @param {string} replyToEmail\n   * @param {boolean} enabled\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Provider>}\n   */\n  createSmtpProvider(providerId, name, host, port, username, password, encryption, autoTLS, mailer, fromName, fromEmail, replyToName, replyToEmail, enabled) {\n    if (typeof providerId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"providerId\"');\n    }\n    if (typeof name === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"name\"');\n    }\n    if (typeof host === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"host\"');\n    }\n    const apiPath = \"/messaging/providers/smtp\";\n    const payload = {};\n    if (typeof providerId !== \"undefined\") {\n      payload[\"providerId\"] = providerId;\n    }\n    if (typeof name !== \"undefined\") {\n      payload[\"name\"] = name;\n    }\n    if (typeof host !== \"undefined\") {\n      payload[\"host\"] = host;\n    }\n    if (typeof port !== \"undefined\") {\n      payload[\"port\"] = port;\n    }\n    if (typeof username !== \"undefined\") {\n      payload[\"username\"] = username;\n    }\n    if (typeof password !== \"undefined\") {\n      payload[\"password\"] = password;\n    }\n    if (typeof encryption !== \"undefined\") {\n      payload[\"encryption\"] = encryption;\n    }\n    if (typeof autoTLS !== \"undefined\") {\n      payload[\"autoTLS\"] = autoTLS;\n    }\n    if (typeof mailer !== \"undefined\") {\n      payload[\"mailer\"] = mailer;\n    }\n    if (typeof fromName !== \"undefined\") {\n      payload[\"fromName\"] = fromName;\n    }\n    if (typeof fromEmail !== \"undefined\") {\n      payload[\"fromEmail\"] = fromEmail;\n    }\n    if (typeof replyToName !== \"undefined\") {\n      payload[\"replyToName\"] = replyToName;\n    }\n    if (typeof replyToEmail !== \"undefined\") {\n      payload[\"replyToEmail\"] = replyToEmail;\n    }\n    if (typeof enabled !== \"undefined\") {\n      payload[\"enabled\"] = enabled;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Update a SMTP provider by its unique ID.\n   *\n   * @param {string} providerId\n   * @param {string} name\n   * @param {string} host\n   * @param {number} port\n   * @param {string} username\n   * @param {string} password\n   * @param {SmtpEncryption} encryption\n   * @param {boolean} autoTLS\n   * @param {string} mailer\n   * @param {string} fromName\n   * @param {string} fromEmail\n   * @param {string} replyToName\n   * @param {string} replyToEmail\n   * @param {boolean} enabled\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Provider>}\n   */\n  updateSmtpProvider(providerId, name, host, port, username, password, encryption, autoTLS, mailer, fromName, fromEmail, replyToName, replyToEmail, enabled) {\n    if (typeof providerId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"providerId\"');\n    }\n    const apiPath = \"/messaging/providers/smtp/{providerId}\".replace(\"{providerId}\", providerId);\n    const payload = {};\n    if (typeof name !== \"undefined\") {\n      payload[\"name\"] = name;\n    }\n    if (typeof host !== \"undefined\") {\n      payload[\"host\"] = host;\n    }\n    if (typeof port !== \"undefined\") {\n      payload[\"port\"] = port;\n    }\n    if (typeof username !== \"undefined\") {\n      payload[\"username\"] = username;\n    }\n    if (typeof password !== \"undefined\") {\n      payload[\"password\"] = password;\n    }\n    if (typeof encryption !== \"undefined\") {\n      payload[\"encryption\"] = encryption;\n    }\n    if (typeof autoTLS !== \"undefined\") {\n      payload[\"autoTLS\"] = autoTLS;\n    }\n    if (typeof mailer !== \"undefined\") {\n      payload[\"mailer\"] = mailer;\n    }\n    if (typeof fromName !== \"undefined\") {\n      payload[\"fromName\"] = fromName;\n    }\n    if (typeof fromEmail !== \"undefined\") {\n      payload[\"fromEmail\"] = fromEmail;\n    }\n    if (typeof replyToName !== \"undefined\") {\n      payload[\"replyToName\"] = replyToName;\n    }\n    if (typeof replyToEmail !== \"undefined\") {\n      payload[\"replyToEmail\"] = replyToEmail;\n    }\n    if (typeof enabled !== \"undefined\") {\n      payload[\"enabled\"] = enabled;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"patch\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Create a new Telesign provider.\n   *\n   * @param {string} providerId\n   * @param {string} name\n   * @param {string} from\n   * @param {string} customerId\n   * @param {string} apiKey\n   * @param {boolean} enabled\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Provider>}\n   */\n  createTelesignProvider(providerId, name, from, customerId, apiKey, enabled) {\n    if (typeof providerId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"providerId\"');\n    }\n    if (typeof name === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"name\"');\n    }\n    const apiPath = \"/messaging/providers/telesign\";\n    const payload = {};\n    if (typeof providerId !== \"undefined\") {\n      payload[\"providerId\"] = providerId;\n    }\n    if (typeof name !== \"undefined\") {\n      payload[\"name\"] = name;\n    }\n    if (typeof from !== \"undefined\") {\n      payload[\"from\"] = from;\n    }\n    if (typeof customerId !== \"undefined\") {\n      payload[\"customerId\"] = customerId;\n    }\n    if (typeof apiKey !== \"undefined\") {\n      payload[\"apiKey\"] = apiKey;\n    }\n    if (typeof enabled !== \"undefined\") {\n      payload[\"enabled\"] = enabled;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Update a Telesign provider by its unique ID.\n   *\n   * @param {string} providerId\n   * @param {string} name\n   * @param {boolean} enabled\n   * @param {string} customerId\n   * @param {string} apiKey\n   * @param {string} from\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Provider>}\n   */\n  updateTelesignProvider(providerId, name, enabled, customerId, apiKey, from) {\n    if (typeof providerId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"providerId\"');\n    }\n    const apiPath = \"/messaging/providers/telesign/{providerId}\".replace(\"{providerId}\", providerId);\n    const payload = {};\n    if (typeof name !== \"undefined\") {\n      payload[\"name\"] = name;\n    }\n    if (typeof enabled !== \"undefined\") {\n      payload[\"enabled\"] = enabled;\n    }\n    if (typeof customerId !== \"undefined\") {\n      payload[\"customerId\"] = customerId;\n    }\n    if (typeof apiKey !== \"undefined\") {\n      payload[\"apiKey\"] = apiKey;\n    }\n    if (typeof from !== \"undefined\") {\n      payload[\"from\"] = from;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"patch\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Create a new Textmagic provider.\n   *\n   * @param {string} providerId\n   * @param {string} name\n   * @param {string} from\n   * @param {string} username\n   * @param {string} apiKey\n   * @param {boolean} enabled\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Provider>}\n   */\n  createTextmagicProvider(providerId, name, from, username, apiKey, enabled) {\n    if (typeof providerId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"providerId\"');\n    }\n    if (typeof name === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"name\"');\n    }\n    const apiPath = \"/messaging/providers/textmagic\";\n    const payload = {};\n    if (typeof providerId !== \"undefined\") {\n      payload[\"providerId\"] = providerId;\n    }\n    if (typeof name !== \"undefined\") {\n      payload[\"name\"] = name;\n    }\n    if (typeof from !== \"undefined\") {\n      payload[\"from\"] = from;\n    }\n    if (typeof username !== \"undefined\") {\n      payload[\"username\"] = username;\n    }\n    if (typeof apiKey !== \"undefined\") {\n      payload[\"apiKey\"] = apiKey;\n    }\n    if (typeof enabled !== \"undefined\") {\n      payload[\"enabled\"] = enabled;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Update a Textmagic provider by its unique ID.\n   *\n   * @param {string} providerId\n   * @param {string} name\n   * @param {boolean} enabled\n   * @param {string} username\n   * @param {string} apiKey\n   * @param {string} from\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Provider>}\n   */\n  updateTextmagicProvider(providerId, name, enabled, username, apiKey, from) {\n    if (typeof providerId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"providerId\"');\n    }\n    const apiPath = \"/messaging/providers/textmagic/{providerId}\".replace(\"{providerId}\", providerId);\n    const payload = {};\n    if (typeof name !== \"undefined\") {\n      payload[\"name\"] = name;\n    }\n    if (typeof enabled !== \"undefined\") {\n      payload[\"enabled\"] = enabled;\n    }\n    if (typeof username !== \"undefined\") {\n      payload[\"username\"] = username;\n    }\n    if (typeof apiKey !== \"undefined\") {\n      payload[\"apiKey\"] = apiKey;\n    }\n    if (typeof from !== \"undefined\") {\n      payload[\"from\"] = from;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"patch\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Create a new Twilio provider.\n   *\n   * @param {string} providerId\n   * @param {string} name\n   * @param {string} from\n   * @param {string} accountSid\n   * @param {string} authToken\n   * @param {boolean} enabled\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Provider>}\n   */\n  createTwilioProvider(providerId, name, from, accountSid, authToken, enabled) {\n    if (typeof providerId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"providerId\"');\n    }\n    if (typeof name === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"name\"');\n    }\n    const apiPath = \"/messaging/providers/twilio\";\n    const payload = {};\n    if (typeof providerId !== \"undefined\") {\n      payload[\"providerId\"] = providerId;\n    }\n    if (typeof name !== \"undefined\") {\n      payload[\"name\"] = name;\n    }\n    if (typeof from !== \"undefined\") {\n      payload[\"from\"] = from;\n    }\n    if (typeof accountSid !== \"undefined\") {\n      payload[\"accountSid\"] = accountSid;\n    }\n    if (typeof authToken !== \"undefined\") {\n      payload[\"authToken\"] = authToken;\n    }\n    if (typeof enabled !== \"undefined\") {\n      payload[\"enabled\"] = enabled;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Update a Twilio provider by its unique ID.\n   *\n   * @param {string} providerId\n   * @param {string} name\n   * @param {boolean} enabled\n   * @param {string} accountSid\n   * @param {string} authToken\n   * @param {string} from\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Provider>}\n   */\n  updateTwilioProvider(providerId, name, enabled, accountSid, authToken, from) {\n    if (typeof providerId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"providerId\"');\n    }\n    const apiPath = \"/messaging/providers/twilio/{providerId}\".replace(\"{providerId}\", providerId);\n    const payload = {};\n    if (typeof name !== \"undefined\") {\n      payload[\"name\"] = name;\n    }\n    if (typeof enabled !== \"undefined\") {\n      payload[\"enabled\"] = enabled;\n    }\n    if (typeof accountSid !== \"undefined\") {\n      payload[\"accountSid\"] = accountSid;\n    }\n    if (typeof authToken !== \"undefined\") {\n      payload[\"authToken\"] = authToken;\n    }\n    if (typeof from !== \"undefined\") {\n      payload[\"from\"] = from;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"patch\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Create a new Vonage provider.\n   *\n   * @param {string} providerId\n   * @param {string} name\n   * @param {string} from\n   * @param {string} apiKey\n   * @param {string} apiSecret\n   * @param {boolean} enabled\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Provider>}\n   */\n  createVonageProvider(providerId, name, from, apiKey, apiSecret, enabled) {\n    if (typeof providerId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"providerId\"');\n    }\n    if (typeof name === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"name\"');\n    }\n    const apiPath = \"/messaging/providers/vonage\";\n    const payload = {};\n    if (typeof providerId !== \"undefined\") {\n      payload[\"providerId\"] = providerId;\n    }\n    if (typeof name !== \"undefined\") {\n      payload[\"name\"] = name;\n    }\n    if (typeof from !== \"undefined\") {\n      payload[\"from\"] = from;\n    }\n    if (typeof apiKey !== \"undefined\") {\n      payload[\"apiKey\"] = apiKey;\n    }\n    if (typeof apiSecret !== \"undefined\") {\n      payload[\"apiSecret\"] = apiSecret;\n    }\n    if (typeof enabled !== \"undefined\") {\n      payload[\"enabled\"] = enabled;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Update a Vonage provider by its unique ID.\n   *\n   * @param {string} providerId\n   * @param {string} name\n   * @param {boolean} enabled\n   * @param {string} apiKey\n   * @param {string} apiSecret\n   * @param {string} from\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Provider>}\n   */\n  updateVonageProvider(providerId, name, enabled, apiKey, apiSecret, from) {\n    if (typeof providerId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"providerId\"');\n    }\n    const apiPath = \"/messaging/providers/vonage/{providerId}\".replace(\"{providerId}\", providerId);\n    const payload = {};\n    if (typeof name !== \"undefined\") {\n      payload[\"name\"] = name;\n    }\n    if (typeof enabled !== \"undefined\") {\n      payload[\"enabled\"] = enabled;\n    }\n    if (typeof apiKey !== \"undefined\") {\n      payload[\"apiKey\"] = apiKey;\n    }\n    if (typeof apiSecret !== \"undefined\") {\n      payload[\"apiSecret\"] = apiSecret;\n    }\n    if (typeof from !== \"undefined\") {\n      payload[\"from\"] = from;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"patch\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n       * Get a provider by its unique ID.\n  \n       *\n       * @param {string} providerId\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.Provider>}\n       */\n  getProvider(providerId) {\n    if (typeof providerId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"providerId\"');\n    }\n    const apiPath = \"/messaging/providers/{providerId}\".replace(\"{providerId}\", providerId);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Delete a provider by its unique ID.\n   *\n   * @param {string} providerId\n   * @throws {AppwriteException}\n   * @returns {Promise<{}>}\n   */\n  deleteProvider(providerId) {\n    if (typeof providerId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"providerId\"');\n    }\n    const apiPath = \"/messaging/providers/{providerId}\".replace(\"{providerId}\", providerId);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"delete\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Get the provider activity logs listed by its unique ID.\n   *\n   * @param {string} providerId\n   * @param {string[]} queries\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.LogList>}\n   */\n  listProviderLogs(providerId, queries) {\n    if (typeof providerId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"providerId\"');\n    }\n    const apiPath = \"/messaging/providers/{providerId}/logs\".replace(\"{providerId}\", providerId);\n    const payload = {};\n    if (typeof queries !== \"undefined\") {\n      payload[\"queries\"] = queries;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Get the subscriber activity logs listed by its unique ID.\n   *\n   * @param {string} subscriberId\n   * @param {string[]} queries\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.LogList>}\n   */\n  listSubscriberLogs(subscriberId, queries) {\n    if (typeof subscriberId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"subscriberId\"');\n    }\n    const apiPath = \"/messaging/subscribers/{subscriberId}/logs\".replace(\"{subscriberId}\", subscriberId);\n    const payload = {};\n    if (typeof queries !== \"undefined\") {\n      payload[\"queries\"] = queries;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Get a list of all topics from the current Appwrite project.\n   *\n   * @param {string[]} queries\n   * @param {string} search\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.TopicList>}\n   */\n  listTopics(queries, search) {\n    const apiPath = \"/messaging/topics\";\n    const payload = {};\n    if (typeof queries !== \"undefined\") {\n      payload[\"queries\"] = queries;\n    }\n    if (typeof search !== \"undefined\") {\n      payload[\"search\"] = search;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Create a new topic.\n   *\n   * @param {string} topicId\n   * @param {string} name\n   * @param {string[]} subscribe\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Topic>}\n   */\n  createTopic(topicId, name, subscribe) {\n    if (typeof topicId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"topicId\"');\n    }\n    if (typeof name === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"name\"');\n    }\n    const apiPath = \"/messaging/topics\";\n    const payload = {};\n    if (typeof topicId !== \"undefined\") {\n      payload[\"topicId\"] = topicId;\n    }\n    if (typeof name !== \"undefined\") {\n      payload[\"name\"] = name;\n    }\n    if (typeof subscribe !== \"undefined\") {\n      payload[\"subscribe\"] = subscribe;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n       * Get a topic by its unique ID.\n  \n       *\n       * @param {string} topicId\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.Topic>}\n       */\n  getTopic(topicId) {\n    if (typeof topicId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"topicId\"');\n    }\n    const apiPath = \"/messaging/topics/{topicId}\".replace(\"{topicId}\", topicId);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n       * Update a topic by its unique ID.\n  \n       *\n       * @param {string} topicId\n       * @param {string} name\n       * @param {string[]} subscribe\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.Topic>}\n       */\n  updateTopic(topicId, name, subscribe) {\n    if (typeof topicId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"topicId\"');\n    }\n    const apiPath = \"/messaging/topics/{topicId}\".replace(\"{topicId}\", topicId);\n    const payload = {};\n    if (typeof name !== \"undefined\") {\n      payload[\"name\"] = name;\n    }\n    if (typeof subscribe !== \"undefined\") {\n      payload[\"subscribe\"] = subscribe;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"patch\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Delete a topic by its unique ID.\n   *\n   * @param {string} topicId\n   * @throws {AppwriteException}\n   * @returns {Promise<{}>}\n   */\n  deleteTopic(topicId) {\n    if (typeof topicId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"topicId\"');\n    }\n    const apiPath = \"/messaging/topics/{topicId}\".replace(\"{topicId}\", topicId);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"delete\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Get the topic activity logs listed by its unique ID.\n   *\n   * @param {string} topicId\n   * @param {string[]} queries\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.LogList>}\n   */\n  listTopicLogs(topicId, queries) {\n    if (typeof topicId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"topicId\"');\n    }\n    const apiPath = \"/messaging/topics/{topicId}/logs\".replace(\"{topicId}\", topicId);\n    const payload = {};\n    if (typeof queries !== \"undefined\") {\n      payload[\"queries\"] = queries;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Get a list of all subscribers from the current Appwrite project.\n   *\n   * @param {string} topicId\n   * @param {string[]} queries\n   * @param {string} search\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.SubscriberList>}\n   */\n  listSubscribers(topicId, queries, search) {\n    if (typeof topicId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"topicId\"');\n    }\n    const apiPath = \"/messaging/topics/{topicId}/subscribers\".replace(\"{topicId}\", topicId);\n    const payload = {};\n    if (typeof queries !== \"undefined\") {\n      payload[\"queries\"] = queries;\n    }\n    if (typeof search !== \"undefined\") {\n      payload[\"search\"] = search;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Create a new subscriber.\n   *\n   * @param {string} topicId\n   * @param {string} subscriberId\n   * @param {string} targetId\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Subscriber>}\n   */\n  createSubscriber(topicId, subscriberId, targetId) {\n    if (typeof topicId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"topicId\"');\n    }\n    if (typeof subscriberId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"subscriberId\"');\n    }\n    if (typeof targetId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"targetId\"');\n    }\n    const apiPath = \"/messaging/topics/{topicId}/subscribers\".replace(\"{topicId}\", topicId);\n    const payload = {};\n    if (typeof subscriberId !== \"undefined\") {\n      payload[\"subscriberId\"] = subscriberId;\n    }\n    if (typeof targetId !== \"undefined\") {\n      payload[\"targetId\"] = targetId;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n       * Get a subscriber by its unique ID.\n  \n       *\n       * @param {string} topicId\n       * @param {string} subscriberId\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.Subscriber>}\n       */\n  getSubscriber(topicId, subscriberId) {\n    if (typeof topicId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"topicId\"');\n    }\n    if (typeof subscriberId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"subscriberId\"');\n    }\n    const apiPath = \"/messaging/topics/{topicId}/subscribers/{subscriberId}\".replace(\"{topicId}\", topicId).replace(\"{subscriberId}\", subscriberId);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Delete a subscriber by its unique ID.\n   *\n   * @param {string} topicId\n   * @param {string} subscriberId\n   * @throws {AppwriteException}\n   * @returns {Promise<{}>}\n   */\n  deleteSubscriber(topicId, subscriberId) {\n    if (typeof topicId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"topicId\"');\n    }\n    if (typeof subscriberId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"subscriberId\"');\n    }\n    const apiPath = \"/messaging/topics/{topicId}/subscribers/{subscriberId}\".replace(\"{topicId}\", topicId).replace(\"{subscriberId}\", subscriberId);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"delete\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n};\n\n\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=messaging.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-appwrite/dist/services/messaging.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-appwrite/dist/services/sites.mjs":
/*!************************************************************!*\
  !*** ./node_modules/node-appwrite/dist/services/sites.mjs ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Sites: () => (/* binding */ Sites)\n/* harmony export */ });\n/* harmony import */ var _client_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../client.mjs */ \"(ssr)/./node_modules/node-appwrite/dist/client.mjs\");\n\n\n// src/services/sites.ts\nvar Sites = class {\n  constructor(client) {\n    this.client = client;\n  }\n  /**\n   * Get a list of all the project&#039;s sites. You can use the query params to filter your results.\n   *\n   * @param {string[]} queries\n   * @param {string} search\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.SiteList>}\n   */\n  list(queries, search) {\n    const apiPath = \"/sites\";\n    const payload = {};\n    if (typeof queries !== \"undefined\") {\n      payload[\"queries\"] = queries;\n    }\n    if (typeof search !== \"undefined\") {\n      payload[\"search\"] = search;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Create a new site.\n   *\n   * @param {string} siteId\n   * @param {string} name\n   * @param {Framework} framework\n   * @param {BuildRuntime} buildRuntime\n   * @param {boolean} enabled\n   * @param {boolean} logging\n   * @param {number} timeout\n   * @param {string} installCommand\n   * @param {string} buildCommand\n   * @param {string} outputDirectory\n   * @param {Adapter} adapter\n   * @param {string} installationId\n   * @param {string} fallbackFile\n   * @param {string} providerRepositoryId\n   * @param {string} providerBranch\n   * @param {boolean} providerSilentMode\n   * @param {string} providerRootDirectory\n   * @param {string} specification\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Site>}\n   */\n  create(siteId, name, framework, buildRuntime, enabled, logging, timeout, installCommand, buildCommand, outputDirectory, adapter, installationId, fallbackFile, providerRepositoryId, providerBranch, providerSilentMode, providerRootDirectory, specification) {\n    if (typeof siteId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"siteId\"');\n    }\n    if (typeof name === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"name\"');\n    }\n    if (typeof framework === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"framework\"');\n    }\n    if (typeof buildRuntime === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"buildRuntime\"');\n    }\n    const apiPath = \"/sites\";\n    const payload = {};\n    if (typeof siteId !== \"undefined\") {\n      payload[\"siteId\"] = siteId;\n    }\n    if (typeof name !== \"undefined\") {\n      payload[\"name\"] = name;\n    }\n    if (typeof framework !== \"undefined\") {\n      payload[\"framework\"] = framework;\n    }\n    if (typeof enabled !== \"undefined\") {\n      payload[\"enabled\"] = enabled;\n    }\n    if (typeof logging !== \"undefined\") {\n      payload[\"logging\"] = logging;\n    }\n    if (typeof timeout !== \"undefined\") {\n      payload[\"timeout\"] = timeout;\n    }\n    if (typeof installCommand !== \"undefined\") {\n      payload[\"installCommand\"] = installCommand;\n    }\n    if (typeof buildCommand !== \"undefined\") {\n      payload[\"buildCommand\"] = buildCommand;\n    }\n    if (typeof outputDirectory !== \"undefined\") {\n      payload[\"outputDirectory\"] = outputDirectory;\n    }\n    if (typeof buildRuntime !== \"undefined\") {\n      payload[\"buildRuntime\"] = buildRuntime;\n    }\n    if (typeof adapter !== \"undefined\") {\n      payload[\"adapter\"] = adapter;\n    }\n    if (typeof installationId !== \"undefined\") {\n      payload[\"installationId\"] = installationId;\n    }\n    if (typeof fallbackFile !== \"undefined\") {\n      payload[\"fallbackFile\"] = fallbackFile;\n    }\n    if (typeof providerRepositoryId !== \"undefined\") {\n      payload[\"providerRepositoryId\"] = providerRepositoryId;\n    }\n    if (typeof providerBranch !== \"undefined\") {\n      payload[\"providerBranch\"] = providerBranch;\n    }\n    if (typeof providerSilentMode !== \"undefined\") {\n      payload[\"providerSilentMode\"] = providerSilentMode;\n    }\n    if (typeof providerRootDirectory !== \"undefined\") {\n      payload[\"providerRootDirectory\"] = providerRootDirectory;\n    }\n    if (typeof specification !== \"undefined\") {\n      payload[\"specification\"] = specification;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Get a list of all frameworks that are currently available on the server instance.\n   *\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.FrameworkList>}\n   */\n  listFrameworks() {\n    const apiPath = \"/sites/frameworks\";\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * List allowed site specifications for this instance.\n   *\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.SpecificationList>}\n   */\n  listSpecifications() {\n    const apiPath = \"/sites/specifications\";\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Get a site by its unique ID.\n   *\n   * @param {string} siteId\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Site>}\n   */\n  get(siteId) {\n    if (typeof siteId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"siteId\"');\n    }\n    const apiPath = \"/sites/{siteId}\".replace(\"{siteId}\", siteId);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Update site by its unique ID.\n   *\n   * @param {string} siteId\n   * @param {string} name\n   * @param {Framework} framework\n   * @param {boolean} enabled\n   * @param {boolean} logging\n   * @param {number} timeout\n   * @param {string} installCommand\n   * @param {string} buildCommand\n   * @param {string} outputDirectory\n   * @param {BuildRuntime} buildRuntime\n   * @param {Adapter} adapter\n   * @param {string} fallbackFile\n   * @param {string} installationId\n   * @param {string} providerRepositoryId\n   * @param {string} providerBranch\n   * @param {boolean} providerSilentMode\n   * @param {string} providerRootDirectory\n   * @param {string} specification\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Site>}\n   */\n  update(siteId, name, framework, enabled, logging, timeout, installCommand, buildCommand, outputDirectory, buildRuntime, adapter, fallbackFile, installationId, providerRepositoryId, providerBranch, providerSilentMode, providerRootDirectory, specification) {\n    if (typeof siteId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"siteId\"');\n    }\n    if (typeof name === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"name\"');\n    }\n    if (typeof framework === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"framework\"');\n    }\n    const apiPath = \"/sites/{siteId}\".replace(\"{siteId}\", siteId);\n    const payload = {};\n    if (typeof name !== \"undefined\") {\n      payload[\"name\"] = name;\n    }\n    if (typeof framework !== \"undefined\") {\n      payload[\"framework\"] = framework;\n    }\n    if (typeof enabled !== \"undefined\") {\n      payload[\"enabled\"] = enabled;\n    }\n    if (typeof logging !== \"undefined\") {\n      payload[\"logging\"] = logging;\n    }\n    if (typeof timeout !== \"undefined\") {\n      payload[\"timeout\"] = timeout;\n    }\n    if (typeof installCommand !== \"undefined\") {\n      payload[\"installCommand\"] = installCommand;\n    }\n    if (typeof buildCommand !== \"undefined\") {\n      payload[\"buildCommand\"] = buildCommand;\n    }\n    if (typeof outputDirectory !== \"undefined\") {\n      payload[\"outputDirectory\"] = outputDirectory;\n    }\n    if (typeof buildRuntime !== \"undefined\") {\n      payload[\"buildRuntime\"] = buildRuntime;\n    }\n    if (typeof adapter !== \"undefined\") {\n      payload[\"adapter\"] = adapter;\n    }\n    if (typeof fallbackFile !== \"undefined\") {\n      payload[\"fallbackFile\"] = fallbackFile;\n    }\n    if (typeof installationId !== \"undefined\") {\n      payload[\"installationId\"] = installationId;\n    }\n    if (typeof providerRepositoryId !== \"undefined\") {\n      payload[\"providerRepositoryId\"] = providerRepositoryId;\n    }\n    if (typeof providerBranch !== \"undefined\") {\n      payload[\"providerBranch\"] = providerBranch;\n    }\n    if (typeof providerSilentMode !== \"undefined\") {\n      payload[\"providerSilentMode\"] = providerSilentMode;\n    }\n    if (typeof providerRootDirectory !== \"undefined\") {\n      payload[\"providerRootDirectory\"] = providerRootDirectory;\n    }\n    if (typeof specification !== \"undefined\") {\n      payload[\"specification\"] = specification;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"put\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Delete a site by its unique ID.\n   *\n   * @param {string} siteId\n   * @throws {AppwriteException}\n   * @returns {Promise<{}>}\n   */\n  delete(siteId) {\n    if (typeof siteId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"siteId\"');\n    }\n    const apiPath = \"/sites/{siteId}\".replace(\"{siteId}\", siteId);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"delete\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Update the site active deployment. Use this endpoint to switch the code deployment that should be used when visitor opens your site.\n   *\n   * @param {string} siteId\n   * @param {string} deploymentId\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Site>}\n   */\n  updateSiteDeployment(siteId, deploymentId) {\n    if (typeof siteId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"siteId\"');\n    }\n    if (typeof deploymentId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"deploymentId\"');\n    }\n    const apiPath = \"/sites/{siteId}/deployment\".replace(\"{siteId}\", siteId);\n    const payload = {};\n    if (typeof deploymentId !== \"undefined\") {\n      payload[\"deploymentId\"] = deploymentId;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"patch\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Get a list of all the site&#039;s code deployments. You can use the query params to filter your results.\n   *\n   * @param {string} siteId\n   * @param {string[]} queries\n   * @param {string} search\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.DeploymentList>}\n   */\n  listDeployments(siteId, queries, search) {\n    if (typeof siteId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"siteId\"');\n    }\n    const apiPath = \"/sites/{siteId}/deployments\".replace(\"{siteId}\", siteId);\n    const payload = {};\n    if (typeof queries !== \"undefined\") {\n      payload[\"queries\"] = queries;\n    }\n    if (typeof search !== \"undefined\") {\n      payload[\"search\"] = search;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Create a new site code deployment. Use this endpoint to upload a new version of your site code. To activate your newly uploaded code, you&#039;ll need to update the function&#039;s deployment to use your new deployment ID.\n   *\n   * @param {string} siteId\n   * @param {File} code\n   * @param {boolean} activate\n   * @param {string} installCommand\n   * @param {string} buildCommand\n   * @param {string} outputDirectory\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Deployment>}\n   */\n  createDeployment(siteId, code, activate, installCommand, buildCommand, outputDirectory, onProgress = (progress) => {\n  }) {\n    if (typeof siteId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"siteId\"');\n    }\n    if (typeof code === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"code\"');\n    }\n    if (typeof activate === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"activate\"');\n    }\n    const apiPath = \"/sites/{siteId}/deployments\".replace(\"{siteId}\", siteId);\n    const payload = {};\n    if (typeof installCommand !== \"undefined\") {\n      payload[\"installCommand\"] = installCommand;\n    }\n    if (typeof buildCommand !== \"undefined\") {\n      payload[\"buildCommand\"] = buildCommand;\n    }\n    if (typeof outputDirectory !== \"undefined\") {\n      payload[\"outputDirectory\"] = outputDirectory;\n    }\n    if (typeof code !== \"undefined\") {\n      payload[\"code\"] = code;\n    }\n    if (typeof activate !== \"undefined\") {\n      payload[\"activate\"] = activate;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"multipart/form-data\"\n    };\n    return this.client.chunkedUpload(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload,\n      onProgress\n    );\n  }\n  /**\n   * Create a new build for an existing site deployment. This endpoint allows you to rebuild a deployment with the updated site configuration, including its commands and output directory if they have been modified. The build process will be queued and executed asynchronously. The original deployment&#039;s code will be preserved and used for the new build.\n   *\n   * @param {string} siteId\n   * @param {string} deploymentId\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Deployment>}\n   */\n  createDuplicateDeployment(siteId, deploymentId) {\n    if (typeof siteId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"siteId\"');\n    }\n    if (typeof deploymentId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"deploymentId\"');\n    }\n    const apiPath = \"/sites/{siteId}/deployments/duplicate\".replace(\"{siteId}\", siteId);\n    const payload = {};\n    if (typeof deploymentId !== \"undefined\") {\n      payload[\"deploymentId\"] = deploymentId;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n       * Create a deployment based on a template.\n  \n  Use this endpoint with combination of [listTemplates](https://appwrite.io/docs/server/sites#listTemplates) to find the template details.\n       *\n       * @param {string} siteId\n       * @param {string} repository\n       * @param {string} owner\n       * @param {string} rootDirectory\n       * @param {string} version\n       * @param {boolean} activate\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.Deployment>}\n       */\n  createTemplateDeployment(siteId, repository, owner, rootDirectory, version, activate) {\n    if (typeof siteId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"siteId\"');\n    }\n    if (typeof repository === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"repository\"');\n    }\n    if (typeof owner === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"owner\"');\n    }\n    if (typeof rootDirectory === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"rootDirectory\"');\n    }\n    if (typeof version === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"version\"');\n    }\n    const apiPath = \"/sites/{siteId}/deployments/template\".replace(\"{siteId}\", siteId);\n    const payload = {};\n    if (typeof repository !== \"undefined\") {\n      payload[\"repository\"] = repository;\n    }\n    if (typeof owner !== \"undefined\") {\n      payload[\"owner\"] = owner;\n    }\n    if (typeof rootDirectory !== \"undefined\") {\n      payload[\"rootDirectory\"] = rootDirectory;\n    }\n    if (typeof version !== \"undefined\") {\n      payload[\"version\"] = version;\n    }\n    if (typeof activate !== \"undefined\") {\n      payload[\"activate\"] = activate;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n       * Create a deployment when a site is connected to VCS.\n  \n  This endpoint lets you create deployment from a branch, commit, or a tag.\n       *\n       * @param {string} siteId\n       * @param {VCSDeploymentType} type\n       * @param {string} reference\n       * @param {boolean} activate\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.Deployment>}\n       */\n  createVcsDeployment(siteId, type, reference, activate) {\n    if (typeof siteId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"siteId\"');\n    }\n    if (typeof type === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"type\"');\n    }\n    if (typeof reference === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"reference\"');\n    }\n    const apiPath = \"/sites/{siteId}/deployments/vcs\".replace(\"{siteId}\", siteId);\n    const payload = {};\n    if (typeof type !== \"undefined\") {\n      payload[\"type\"] = type;\n    }\n    if (typeof reference !== \"undefined\") {\n      payload[\"reference\"] = reference;\n    }\n    if (typeof activate !== \"undefined\") {\n      payload[\"activate\"] = activate;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Get a site deployment by its unique ID.\n   *\n   * @param {string} siteId\n   * @param {string} deploymentId\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Deployment>}\n   */\n  getDeployment(siteId, deploymentId) {\n    if (typeof siteId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"siteId\"');\n    }\n    if (typeof deploymentId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"deploymentId\"');\n    }\n    const apiPath = \"/sites/{siteId}/deployments/{deploymentId}\".replace(\"{siteId}\", siteId).replace(\"{deploymentId}\", deploymentId);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Delete a site deployment by its unique ID.\n   *\n   * @param {string} siteId\n   * @param {string} deploymentId\n   * @throws {AppwriteException}\n   * @returns {Promise<{}>}\n   */\n  deleteDeployment(siteId, deploymentId) {\n    if (typeof siteId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"siteId\"');\n    }\n    if (typeof deploymentId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"deploymentId\"');\n    }\n    const apiPath = \"/sites/{siteId}/deployments/{deploymentId}\".replace(\"{siteId}\", siteId).replace(\"{deploymentId}\", deploymentId);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"delete\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Get a site deployment content by its unique ID. The endpoint response return with a &#039;Content-Disposition: attachment&#039; header that tells the browser to start downloading the file to user downloads directory.\n   *\n   * @param {string} siteId\n   * @param {string} deploymentId\n   * @param {DeploymentDownloadType} type\n   * @throws {AppwriteException}\n   * @returns {Promise<ArrayBuffer>}\n   */\n  getDeploymentDownload(siteId, deploymentId, type) {\n    if (typeof siteId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"siteId\"');\n    }\n    if (typeof deploymentId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"deploymentId\"');\n    }\n    const apiPath = \"/sites/{siteId}/deployments/{deploymentId}/download\".replace(\"{siteId}\", siteId).replace(\"{deploymentId}\", deploymentId);\n    const payload = {};\n    if (typeof type !== \"undefined\") {\n      payload[\"type\"] = type;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload,\n      \"arrayBuffer\"\n    );\n  }\n  /**\n   * Cancel an ongoing site deployment build. If the build is already in progress, it will be stopped and marked as canceled. If the build hasn&#039;t started yet, it will be marked as canceled without executing. You cannot cancel builds that have already completed (status &#039;ready&#039;) or failed. The response includes the final build status and details.\n   *\n   * @param {string} siteId\n   * @param {string} deploymentId\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Deployment>}\n   */\n  updateDeploymentStatus(siteId, deploymentId) {\n    if (typeof siteId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"siteId\"');\n    }\n    if (typeof deploymentId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"deploymentId\"');\n    }\n    const apiPath = \"/sites/{siteId}/deployments/{deploymentId}/status\".replace(\"{siteId}\", siteId).replace(\"{deploymentId}\", deploymentId);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"patch\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Get a list of all site logs. You can use the query params to filter your results.\n   *\n   * @param {string} siteId\n   * @param {string[]} queries\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.ExecutionList>}\n   */\n  listLogs(siteId, queries) {\n    if (typeof siteId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"siteId\"');\n    }\n    const apiPath = \"/sites/{siteId}/logs\".replace(\"{siteId}\", siteId);\n    const payload = {};\n    if (typeof queries !== \"undefined\") {\n      payload[\"queries\"] = queries;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Get a site request log by its unique ID.\n   *\n   * @param {string} siteId\n   * @param {string} logId\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Execution>}\n   */\n  getLog(siteId, logId) {\n    if (typeof siteId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"siteId\"');\n    }\n    if (typeof logId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"logId\"');\n    }\n    const apiPath = \"/sites/{siteId}/logs/{logId}\".replace(\"{siteId}\", siteId).replace(\"{logId}\", logId);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Delete a site log by its unique ID.\n   *\n   * @param {string} siteId\n   * @param {string} logId\n   * @throws {AppwriteException}\n   * @returns {Promise<{}>}\n   */\n  deleteLog(siteId, logId) {\n    if (typeof siteId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"siteId\"');\n    }\n    if (typeof logId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"logId\"');\n    }\n    const apiPath = \"/sites/{siteId}/logs/{logId}\".replace(\"{siteId}\", siteId).replace(\"{logId}\", logId);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"delete\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Get a list of all variables of a specific site.\n   *\n   * @param {string} siteId\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.VariableList>}\n   */\n  listVariables(siteId) {\n    if (typeof siteId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"siteId\"');\n    }\n    const apiPath = \"/sites/{siteId}/variables\".replace(\"{siteId}\", siteId);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Create a new site variable. These variables can be accessed during build and runtime (server-side rendering) as environment variables.\n   *\n   * @param {string} siteId\n   * @param {string} key\n   * @param {string} value\n   * @param {boolean} secret\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Variable>}\n   */\n  createVariable(siteId, key, value, secret) {\n    if (typeof siteId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"siteId\"');\n    }\n    if (typeof key === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"key\"');\n    }\n    if (typeof value === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"value\"');\n    }\n    const apiPath = \"/sites/{siteId}/variables\".replace(\"{siteId}\", siteId);\n    const payload = {};\n    if (typeof key !== \"undefined\") {\n      payload[\"key\"] = key;\n    }\n    if (typeof value !== \"undefined\") {\n      payload[\"value\"] = value;\n    }\n    if (typeof secret !== \"undefined\") {\n      payload[\"secret\"] = secret;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Get a variable by its unique ID.\n   *\n   * @param {string} siteId\n   * @param {string} variableId\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Variable>}\n   */\n  getVariable(siteId, variableId) {\n    if (typeof siteId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"siteId\"');\n    }\n    if (typeof variableId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"variableId\"');\n    }\n    const apiPath = \"/sites/{siteId}/variables/{variableId}\".replace(\"{siteId}\", siteId).replace(\"{variableId}\", variableId);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Update variable by its unique ID.\n   *\n   * @param {string} siteId\n   * @param {string} variableId\n   * @param {string} key\n   * @param {string} value\n   * @param {boolean} secret\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Variable>}\n   */\n  updateVariable(siteId, variableId, key, value, secret) {\n    if (typeof siteId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"siteId\"');\n    }\n    if (typeof variableId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"variableId\"');\n    }\n    if (typeof key === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"key\"');\n    }\n    const apiPath = \"/sites/{siteId}/variables/{variableId}\".replace(\"{siteId}\", siteId).replace(\"{variableId}\", variableId);\n    const payload = {};\n    if (typeof key !== \"undefined\") {\n      payload[\"key\"] = key;\n    }\n    if (typeof value !== \"undefined\") {\n      payload[\"value\"] = value;\n    }\n    if (typeof secret !== \"undefined\") {\n      payload[\"secret\"] = secret;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"put\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Delete a variable by its unique ID.\n   *\n   * @param {string} siteId\n   * @param {string} variableId\n   * @throws {AppwriteException}\n   * @returns {Promise<{}>}\n   */\n  deleteVariable(siteId, variableId) {\n    if (typeof siteId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"siteId\"');\n    }\n    if (typeof variableId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"variableId\"');\n    }\n    const apiPath = \"/sites/{siteId}/variables/{variableId}\".replace(\"{siteId}\", siteId).replace(\"{variableId}\", variableId);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"delete\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n};\n\n\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=sites.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-appwrite/dist/services/sites.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-appwrite/dist/services/storage.mjs":
/*!**************************************************************!*\
  !*** ./node_modules/node-appwrite/dist/services/storage.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Storage: () => (/* binding */ Storage)\n/* harmony export */ });\n/* harmony import */ var _client_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../client.mjs */ \"(ssr)/./node_modules/node-appwrite/dist/client.mjs\");\n\n\n// src/services/storage.ts\nvar Storage = class {\n  constructor(client) {\n    this.client = client;\n  }\n  /**\n   * Get a list of all the storage buckets. You can use the query params to filter your results.\n   *\n   * @param {string[]} queries\n   * @param {string} search\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.BucketList>}\n   */\n  listBuckets(queries, search) {\n    const apiPath = \"/storage/buckets\";\n    const payload = {};\n    if (typeof queries !== \"undefined\") {\n      payload[\"queries\"] = queries;\n    }\n    if (typeof search !== \"undefined\") {\n      payload[\"search\"] = search;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Create a new storage bucket.\n   *\n   * @param {string} bucketId\n   * @param {string} name\n   * @param {string[]} permissions\n   * @param {boolean} fileSecurity\n   * @param {boolean} enabled\n   * @param {number} maximumFileSize\n   * @param {string[]} allowedFileExtensions\n   * @param {Compression} compression\n   * @param {boolean} encryption\n   * @param {boolean} antivirus\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Bucket>}\n   */\n  createBucket(bucketId, name, permissions, fileSecurity, enabled, maximumFileSize, allowedFileExtensions, compression, encryption, antivirus) {\n    if (typeof bucketId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"bucketId\"');\n    }\n    if (typeof name === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"name\"');\n    }\n    const apiPath = \"/storage/buckets\";\n    const payload = {};\n    if (typeof bucketId !== \"undefined\") {\n      payload[\"bucketId\"] = bucketId;\n    }\n    if (typeof name !== \"undefined\") {\n      payload[\"name\"] = name;\n    }\n    if (typeof permissions !== \"undefined\") {\n      payload[\"permissions\"] = permissions;\n    }\n    if (typeof fileSecurity !== \"undefined\") {\n      payload[\"fileSecurity\"] = fileSecurity;\n    }\n    if (typeof enabled !== \"undefined\") {\n      payload[\"enabled\"] = enabled;\n    }\n    if (typeof maximumFileSize !== \"undefined\") {\n      payload[\"maximumFileSize\"] = maximumFileSize;\n    }\n    if (typeof allowedFileExtensions !== \"undefined\") {\n      payload[\"allowedFileExtensions\"] = allowedFileExtensions;\n    }\n    if (typeof compression !== \"undefined\") {\n      payload[\"compression\"] = compression;\n    }\n    if (typeof encryption !== \"undefined\") {\n      payload[\"encryption\"] = encryption;\n    }\n    if (typeof antivirus !== \"undefined\") {\n      payload[\"antivirus\"] = antivirus;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Get a storage bucket by its unique ID. This endpoint response returns a JSON object with the storage bucket metadata.\n   *\n   * @param {string} bucketId\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Bucket>}\n   */\n  getBucket(bucketId) {\n    if (typeof bucketId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"bucketId\"');\n    }\n    const apiPath = \"/storage/buckets/{bucketId}\".replace(\"{bucketId}\", bucketId);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Update a storage bucket by its unique ID.\n   *\n   * @param {string} bucketId\n   * @param {string} name\n   * @param {string[]} permissions\n   * @param {boolean} fileSecurity\n   * @param {boolean} enabled\n   * @param {number} maximumFileSize\n   * @param {string[]} allowedFileExtensions\n   * @param {Compression} compression\n   * @param {boolean} encryption\n   * @param {boolean} antivirus\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Bucket>}\n   */\n  updateBucket(bucketId, name, permissions, fileSecurity, enabled, maximumFileSize, allowedFileExtensions, compression, encryption, antivirus) {\n    if (typeof bucketId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"bucketId\"');\n    }\n    if (typeof name === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"name\"');\n    }\n    const apiPath = \"/storage/buckets/{bucketId}\".replace(\"{bucketId}\", bucketId);\n    const payload = {};\n    if (typeof name !== \"undefined\") {\n      payload[\"name\"] = name;\n    }\n    if (typeof permissions !== \"undefined\") {\n      payload[\"permissions\"] = permissions;\n    }\n    if (typeof fileSecurity !== \"undefined\") {\n      payload[\"fileSecurity\"] = fileSecurity;\n    }\n    if (typeof enabled !== \"undefined\") {\n      payload[\"enabled\"] = enabled;\n    }\n    if (typeof maximumFileSize !== \"undefined\") {\n      payload[\"maximumFileSize\"] = maximumFileSize;\n    }\n    if (typeof allowedFileExtensions !== \"undefined\") {\n      payload[\"allowedFileExtensions\"] = allowedFileExtensions;\n    }\n    if (typeof compression !== \"undefined\") {\n      payload[\"compression\"] = compression;\n    }\n    if (typeof encryption !== \"undefined\") {\n      payload[\"encryption\"] = encryption;\n    }\n    if (typeof antivirus !== \"undefined\") {\n      payload[\"antivirus\"] = antivirus;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"put\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Delete a storage bucket by its unique ID.\n   *\n   * @param {string} bucketId\n   * @throws {AppwriteException}\n   * @returns {Promise<{}>}\n   */\n  deleteBucket(bucketId) {\n    if (typeof bucketId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"bucketId\"');\n    }\n    const apiPath = \"/storage/buckets/{bucketId}\".replace(\"{bucketId}\", bucketId);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"delete\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Get a list of all the user files. You can use the query params to filter your results.\n   *\n   * @param {string} bucketId\n   * @param {string[]} queries\n   * @param {string} search\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.FileList>}\n   */\n  listFiles(bucketId, queries, search) {\n    if (typeof bucketId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"bucketId\"');\n    }\n    const apiPath = \"/storage/buckets/{bucketId}/files\".replace(\"{bucketId}\", bucketId);\n    const payload = {};\n    if (typeof queries !== \"undefined\") {\n      payload[\"queries\"] = queries;\n    }\n    if (typeof search !== \"undefined\") {\n      payload[\"search\"] = search;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n       * Create a new file. Before using this route, you should create a new bucket resource using either a [server integration](https://appwrite.io/docs/server/storage#storageCreateBucket) API or directly from your Appwrite console.\n  \n  Larger files should be uploaded using multiple requests with the [content-range](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Range) header to send a partial request with a maximum supported chunk of `5MB`. The `content-range` header values should always be in bytes.\n  \n  When the first request is sent, the server will return the **File** object, and the subsequent part request must include the file&#039;s **id** in `x-appwrite-id` header to allow the server to know that the partial upload is for the existing file and not for a new one.\n  \n  If you&#039;re creating a new file using one of the Appwrite SDKs, all the chunking logic will be managed by the SDK internally.\n  \n       *\n       * @param {string} bucketId\n       * @param {string} fileId\n       * @param {File} file\n       * @param {string[]} permissions\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.File>}\n       */\n  createFile(bucketId, fileId, file, permissions, onProgress = (progress) => {\n  }) {\n    if (typeof bucketId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"bucketId\"');\n    }\n    if (typeof fileId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"fileId\"');\n    }\n    if (typeof file === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"file\"');\n    }\n    const apiPath = \"/storage/buckets/{bucketId}/files\".replace(\"{bucketId}\", bucketId);\n    const payload = {};\n    if (typeof fileId !== \"undefined\") {\n      payload[\"fileId\"] = fileId;\n    }\n    if (typeof file !== \"undefined\") {\n      payload[\"file\"] = file;\n    }\n    if (typeof permissions !== \"undefined\") {\n      payload[\"permissions\"] = permissions;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"multipart/form-data\"\n    };\n    return this.client.chunkedUpload(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload,\n      onProgress\n    );\n  }\n  /**\n   * Get a file by its unique ID. This endpoint response returns a JSON object with the file metadata.\n   *\n   * @param {string} bucketId\n   * @param {string} fileId\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.File>}\n   */\n  getFile(bucketId, fileId) {\n    if (typeof bucketId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"bucketId\"');\n    }\n    if (typeof fileId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"fileId\"');\n    }\n    const apiPath = \"/storage/buckets/{bucketId}/files/{fileId}\".replace(\"{bucketId}\", bucketId).replace(\"{fileId}\", fileId);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Update a file by its unique ID. Only users with write permissions have access to update this resource.\n   *\n   * @param {string} bucketId\n   * @param {string} fileId\n   * @param {string} name\n   * @param {string[]} permissions\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.File>}\n   */\n  updateFile(bucketId, fileId, name, permissions) {\n    if (typeof bucketId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"bucketId\"');\n    }\n    if (typeof fileId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"fileId\"');\n    }\n    const apiPath = \"/storage/buckets/{bucketId}/files/{fileId}\".replace(\"{bucketId}\", bucketId).replace(\"{fileId}\", fileId);\n    const payload = {};\n    if (typeof name !== \"undefined\") {\n      payload[\"name\"] = name;\n    }\n    if (typeof permissions !== \"undefined\") {\n      payload[\"permissions\"] = permissions;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"put\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Delete a file by its unique ID. Only users with write permissions have access to delete this resource.\n   *\n   * @param {string} bucketId\n   * @param {string} fileId\n   * @throws {AppwriteException}\n   * @returns {Promise<{}>}\n   */\n  deleteFile(bucketId, fileId) {\n    if (typeof bucketId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"bucketId\"');\n    }\n    if (typeof fileId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"fileId\"');\n    }\n    const apiPath = \"/storage/buckets/{bucketId}/files/{fileId}\".replace(\"{bucketId}\", bucketId).replace(\"{fileId}\", fileId);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"delete\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Get a file content by its unique ID. The endpoint response return with a &#039;Content-Disposition: attachment&#039; header that tells the browser to start downloading the file to user downloads directory.\n   *\n   * @param {string} bucketId\n   * @param {string} fileId\n   * @param {string} token\n   * @throws {AppwriteException}\n   * @returns {Promise<ArrayBuffer>}\n   */\n  getFileDownload(bucketId, fileId, token) {\n    if (typeof bucketId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"bucketId\"');\n    }\n    if (typeof fileId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"fileId\"');\n    }\n    const apiPath = \"/storage/buckets/{bucketId}/files/{fileId}/download\".replace(\"{bucketId}\", bucketId).replace(\"{fileId}\", fileId);\n    const payload = {};\n    if (typeof token !== \"undefined\") {\n      payload[\"token\"] = token;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload,\n      \"arrayBuffer\"\n    );\n  }\n  /**\n   * Get a file preview image. Currently, this method supports preview for image files (jpg, png, and gif), other supported formats, like pdf, docs, slides, and spreadsheets, will return the file icon image. You can also pass query string arguments for cutting and resizing your preview image. Preview is supported only for image files smaller than 10MB.\n   *\n   * @param {string} bucketId\n   * @param {string} fileId\n   * @param {number} width\n   * @param {number} height\n   * @param {ImageGravity} gravity\n   * @param {number} quality\n   * @param {number} borderWidth\n   * @param {string} borderColor\n   * @param {number} borderRadius\n   * @param {number} opacity\n   * @param {number} rotation\n   * @param {string} background\n   * @param {ImageFormat} output\n   * @param {string} token\n   * @throws {AppwriteException}\n   * @returns {Promise<ArrayBuffer>}\n   */\n  getFilePreview(bucketId, fileId, width, height, gravity, quality, borderWidth, borderColor, borderRadius, opacity, rotation, background, output, token) {\n    if (typeof bucketId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"bucketId\"');\n    }\n    if (typeof fileId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"fileId\"');\n    }\n    const apiPath = \"/storage/buckets/{bucketId}/files/{fileId}/preview\".replace(\"{bucketId}\", bucketId).replace(\"{fileId}\", fileId);\n    const payload = {};\n    if (typeof width !== \"undefined\") {\n      payload[\"width\"] = width;\n    }\n    if (typeof height !== \"undefined\") {\n      payload[\"height\"] = height;\n    }\n    if (typeof gravity !== \"undefined\") {\n      payload[\"gravity\"] = gravity;\n    }\n    if (typeof quality !== \"undefined\") {\n      payload[\"quality\"] = quality;\n    }\n    if (typeof borderWidth !== \"undefined\") {\n      payload[\"borderWidth\"] = borderWidth;\n    }\n    if (typeof borderColor !== \"undefined\") {\n      payload[\"borderColor\"] = borderColor;\n    }\n    if (typeof borderRadius !== \"undefined\") {\n      payload[\"borderRadius\"] = borderRadius;\n    }\n    if (typeof opacity !== \"undefined\") {\n      payload[\"opacity\"] = opacity;\n    }\n    if (typeof rotation !== \"undefined\") {\n      payload[\"rotation\"] = rotation;\n    }\n    if (typeof background !== \"undefined\") {\n      payload[\"background\"] = background;\n    }\n    if (typeof output !== \"undefined\") {\n      payload[\"output\"] = output;\n    }\n    if (typeof token !== \"undefined\") {\n      payload[\"token\"] = token;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload,\n      \"arrayBuffer\"\n    );\n  }\n  /**\n   * Get a file content by its unique ID. This endpoint is similar to the download method but returns with no  &#039;Content-Disposition: attachment&#039; header.\n   *\n   * @param {string} bucketId\n   * @param {string} fileId\n   * @param {string} token\n   * @throws {AppwriteException}\n   * @returns {Promise<ArrayBuffer>}\n   */\n  getFileView(bucketId, fileId, token) {\n    if (typeof bucketId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"bucketId\"');\n    }\n    if (typeof fileId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"fileId\"');\n    }\n    const apiPath = \"/storage/buckets/{bucketId}/files/{fileId}/view\".replace(\"{bucketId}\", bucketId).replace(\"{fileId}\", fileId);\n    const payload = {};\n    if (typeof token !== \"undefined\") {\n      payload[\"token\"] = token;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload,\n      \"arrayBuffer\"\n    );\n  }\n};\n\n\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=storage.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L3NlcnZpY2VzL3N0b3JhZ2UubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQWtEOztBQUVsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxVQUFVO0FBQ3ZCLGFBQWEsUUFBUTtBQUNyQixjQUFjO0FBQ2QsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixhQUFhLFVBQVU7QUFDdkIsYUFBYSxTQUFTO0FBQ3RCLGFBQWEsU0FBUztBQUN0QixhQUFhLFFBQVE7QUFDckIsYUFBYSxVQUFVO0FBQ3ZCLGFBQWEsYUFBYTtBQUMxQixhQUFhLFNBQVM7QUFDdEIsYUFBYSxTQUFTO0FBQ3RCLGNBQWM7QUFDZCxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLDBEQUFpQjtBQUNqQztBQUNBO0FBQ0EsZ0JBQWdCLDBEQUFpQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGNBQWM7QUFDZCxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLDBEQUFpQjtBQUNqQztBQUNBLHVDQUF1QyxTQUFTLFlBQVksU0FBUztBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsYUFBYSxVQUFVO0FBQ3ZCLGFBQWEsU0FBUztBQUN0QixhQUFhLFNBQVM7QUFDdEIsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsVUFBVTtBQUN2QixhQUFhLGFBQWE7QUFDMUIsYUFBYSxTQUFTO0FBQ3RCLGFBQWEsU0FBUztBQUN0QixjQUFjO0FBQ2QsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiwwREFBaUI7QUFDakM7QUFDQTtBQUNBLGdCQUFnQiwwREFBaUI7QUFDakM7QUFDQSx1Q0FBdUMsU0FBUyxZQUFZLFNBQVM7QUFDckU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGNBQWM7QUFDZCxlQUFlLFVBQVU7QUFDekI7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLDBEQUFpQjtBQUNqQztBQUNBLHVDQUF1QyxTQUFTLFlBQVksU0FBUztBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxVQUFVO0FBQ3ZCLGFBQWEsUUFBUTtBQUNyQixjQUFjO0FBQ2QsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiwwREFBaUI7QUFDakM7QUFDQSx1Q0FBdUMsU0FBUyxrQkFBa0IsU0FBUztBQUMzRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5SUFBeUk7QUFDekk7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBLGlCQUFpQixRQUFRO0FBQ3pCLGlCQUFpQixRQUFRO0FBQ3pCLGlCQUFpQixNQUFNO0FBQ3ZCLGlCQUFpQixVQUFVO0FBQzNCLGtCQUFrQjtBQUNsQixtQkFBbUI7QUFDbkI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdCQUFnQiwwREFBaUI7QUFDakM7QUFDQTtBQUNBLGdCQUFnQiwwREFBaUI7QUFDakM7QUFDQTtBQUNBLGdCQUFnQiwwREFBaUI7QUFDakM7QUFDQSx1Q0FBdUMsU0FBUyxrQkFBa0IsU0FBUztBQUMzRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsY0FBYztBQUNkLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsMERBQWlCO0FBQ2pDO0FBQ0E7QUFDQSxnQkFBZ0IsMERBQWlCO0FBQ2pDO0FBQ0EsdUNBQXVDLFNBQVMsUUFBUSxPQUFPLFlBQVksU0FBUyx1QkFBdUIsT0FBTztBQUNsSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsVUFBVTtBQUN2QixjQUFjO0FBQ2QsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiwwREFBaUI7QUFDakM7QUFDQTtBQUNBLGdCQUFnQiwwREFBaUI7QUFDakM7QUFDQSx1Q0FBdUMsU0FBUyxRQUFRLE9BQU8sWUFBWSxTQUFTLHVCQUF1QixPQUFPO0FBQ2xIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsY0FBYztBQUNkLGVBQWUsVUFBVTtBQUN6QjtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsMERBQWlCO0FBQ2pDO0FBQ0E7QUFDQSxnQkFBZ0IsMERBQWlCO0FBQ2pDO0FBQ0EsdUNBQXVDLFNBQVMsUUFBUSxPQUFPLFlBQVksU0FBUyx1QkFBdUIsT0FBTztBQUNsSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9GQUFvRixzQ0FBc0M7QUFDMUg7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixjQUFjO0FBQ2QsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiwwREFBaUI7QUFDakM7QUFDQTtBQUNBLGdCQUFnQiwwREFBaUI7QUFDakM7QUFDQSx1Q0FBdUMsU0FBUyxRQUFRLE9BQU8scUJBQXFCLFNBQVMsdUJBQXVCLE9BQU87QUFDM0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixhQUFhLGNBQWM7QUFDM0IsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsYUFBYTtBQUMxQixhQUFhLFFBQVE7QUFDckIsY0FBYztBQUNkLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsMERBQWlCO0FBQ2pDO0FBQ0E7QUFDQSxnQkFBZ0IsMERBQWlCO0FBQ2pDO0FBQ0EsdUNBQXVDLFNBQVMsUUFBUSxPQUFPLG9CQUFvQixTQUFTLHVCQUF1QixPQUFPO0FBQzFIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFIQUFxSCxzQ0FBc0M7QUFDM0o7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixjQUFjO0FBQ2QsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiwwREFBaUI7QUFDakM7QUFDQTtBQUNBLGdCQUFnQiwwREFBaUI7QUFDakM7QUFDQSx1Q0FBdUMsU0FBUyxRQUFRLE9BQU8saUJBQWlCLFNBQVMsdUJBQXVCLE9BQU87QUFDdkg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVtQjtBQUNuQjtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2Rpc3Qvc2VydmljZXMvc3RvcmFnZS5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwd3JpdGVFeGNlcHRpb24gfSBmcm9tICcuLi9jbGllbnQubWpzJztcblxuLy8gc3JjL3NlcnZpY2VzL3N0b3JhZ2UudHNcbnZhciBTdG9yYWdlID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcihjbGllbnQpIHtcbiAgICB0aGlzLmNsaWVudCA9IGNsaWVudDtcbiAgfVxuICAvKipcbiAgICogR2V0IGEgbGlzdCBvZiBhbGwgdGhlIHN0b3JhZ2UgYnVja2V0cy4gWW91IGNhbiB1c2UgdGhlIHF1ZXJ5IHBhcmFtcyB0byBmaWx0ZXIgeW91ciByZXN1bHRzLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBxdWVyaWVzXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzZWFyY2hcbiAgICogQHRocm93cyB7QXBwd3JpdGVFeGNlcHRpb259XG4gICAqIEByZXR1cm5zIHtQcm9taXNlPE1vZGVscy5CdWNrZXRMaXN0Pn1cbiAgICovXG4gIGxpc3RCdWNrZXRzKHF1ZXJpZXMsIHNlYXJjaCkge1xuICAgIGNvbnN0IGFwaVBhdGggPSBcIi9zdG9yYWdlL2J1Y2tldHNcIjtcbiAgICBjb25zdCBwYXlsb2FkID0ge307XG4gICAgaWYgKHR5cGVvZiBxdWVyaWVzICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBwYXlsb2FkW1wicXVlcmllc1wiXSA9IHF1ZXJpZXM7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygc2VhcmNoICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBwYXlsb2FkW1wic2VhcmNoXCJdID0gc2VhcmNoO1xuICAgIH1cbiAgICBjb25zdCB1cmkgPSBuZXcgVVJMKHRoaXMuY2xpZW50LmNvbmZpZy5lbmRwb2ludCArIGFwaVBhdGgpO1xuICAgIGNvbnN0IGFwaUhlYWRlcnMgPSB7fTtcbiAgICByZXR1cm4gdGhpcy5jbGllbnQuY2FsbChcbiAgICAgIFwiZ2V0XCIsXG4gICAgICB1cmksXG4gICAgICBhcGlIZWFkZXJzLFxuICAgICAgcGF5bG9hZFxuICAgICk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBzdG9yYWdlIGJ1Y2tldC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGJ1Y2tldElkXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAqIEBwYXJhbSB7c3RyaW5nW119IHBlcm1pc3Npb25zXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gZmlsZVNlY3VyaXR5XG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gZW5hYmxlZFxuICAgKiBAcGFyYW0ge251bWJlcn0gbWF4aW11bUZpbGVTaXplXG4gICAqIEBwYXJhbSB7c3RyaW5nW119IGFsbG93ZWRGaWxlRXh0ZW5zaW9uc1xuICAgKiBAcGFyYW0ge0NvbXByZXNzaW9ufSBjb21wcmVzc2lvblxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGVuY3J5cHRpb25cbiAgICogQHBhcmFtIHtib29sZWFufSBhbnRpdmlydXNcbiAgICogQHRocm93cyB7QXBwd3JpdGVFeGNlcHRpb259XG4gICAqIEByZXR1cm5zIHtQcm9taXNlPE1vZGVscy5CdWNrZXQ+fVxuICAgKi9cbiAgY3JlYXRlQnVja2V0KGJ1Y2tldElkLCBuYW1lLCBwZXJtaXNzaW9ucywgZmlsZVNlY3VyaXR5LCBlbmFibGVkLCBtYXhpbXVtRmlsZVNpemUsIGFsbG93ZWRGaWxlRXh0ZW5zaW9ucywgY29tcHJlc3Npb24sIGVuY3J5cHRpb24sIGFudGl2aXJ1cykge1xuICAgIGlmICh0eXBlb2YgYnVja2V0SWQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBBcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwiYnVja2V0SWRcIicpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG5hbWUgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBBcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwibmFtZVwiJyk7XG4gICAgfVxuICAgIGNvbnN0IGFwaVBhdGggPSBcIi9zdG9yYWdlL2J1Y2tldHNcIjtcbiAgICBjb25zdCBwYXlsb2FkID0ge307XG4gICAgaWYgKHR5cGVvZiBidWNrZXRJZCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcImJ1Y2tldElkXCJdID0gYnVja2V0SWQ7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgbmFtZSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcIm5hbWVcIl0gPSBuYW1lO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHBlcm1pc3Npb25zICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBwYXlsb2FkW1wicGVybWlzc2lvbnNcIl0gPSBwZXJtaXNzaW9ucztcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBmaWxlU2VjdXJpdHkgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHBheWxvYWRbXCJmaWxlU2VjdXJpdHlcIl0gPSBmaWxlU2VjdXJpdHk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZW5hYmxlZCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcImVuYWJsZWRcIl0gPSBlbmFibGVkO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG1heGltdW1GaWxlU2l6ZSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcIm1heGltdW1GaWxlU2l6ZVwiXSA9IG1heGltdW1GaWxlU2l6ZTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBhbGxvd2VkRmlsZUV4dGVuc2lvbnMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHBheWxvYWRbXCJhbGxvd2VkRmlsZUV4dGVuc2lvbnNcIl0gPSBhbGxvd2VkRmlsZUV4dGVuc2lvbnM7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgY29tcHJlc3Npb24gIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHBheWxvYWRbXCJjb21wcmVzc2lvblwiXSA9IGNvbXByZXNzaW9uO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGVuY3J5cHRpb24gIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHBheWxvYWRbXCJlbmNyeXB0aW9uXCJdID0gZW5jcnlwdGlvbjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBhbnRpdmlydXMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHBheWxvYWRbXCJhbnRpdmlydXNcIl0gPSBhbnRpdmlydXM7XG4gICAgfVxuICAgIGNvbnN0IHVyaSA9IG5ldyBVUkwodGhpcy5jbGllbnQuY29uZmlnLmVuZHBvaW50ICsgYXBpUGF0aCk7XG4gICAgY29uc3QgYXBpSGVhZGVycyA9IHtcbiAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiXG4gICAgfTtcbiAgICByZXR1cm4gdGhpcy5jbGllbnQuY2FsbChcbiAgICAgIFwicG9zdFwiLFxuICAgICAgdXJpLFxuICAgICAgYXBpSGVhZGVycyxcbiAgICAgIHBheWxvYWRcbiAgICApO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgYSBzdG9yYWdlIGJ1Y2tldCBieSBpdHMgdW5pcXVlIElELiBUaGlzIGVuZHBvaW50IHJlc3BvbnNlIHJldHVybnMgYSBKU09OIG9iamVjdCB3aXRoIHRoZSBzdG9yYWdlIGJ1Y2tldCBtZXRhZGF0YS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGJ1Y2tldElkXG4gICAqIEB0aHJvd3Mge0FwcHdyaXRlRXhjZXB0aW9ufVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxNb2RlbHMuQnVja2V0Pn1cbiAgICovXG4gIGdldEJ1Y2tldChidWNrZXRJZCkge1xuICAgIGlmICh0eXBlb2YgYnVja2V0SWQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBBcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwiYnVja2V0SWRcIicpO1xuICAgIH1cbiAgICBjb25zdCBhcGlQYXRoID0gXCIvc3RvcmFnZS9idWNrZXRzL3tidWNrZXRJZH1cIi5yZXBsYWNlKFwie2J1Y2tldElkfVwiLCBidWNrZXRJZCk7XG4gICAgY29uc3QgcGF5bG9hZCA9IHt9O1xuICAgIGNvbnN0IHVyaSA9IG5ldyBVUkwodGhpcy5jbGllbnQuY29uZmlnLmVuZHBvaW50ICsgYXBpUGF0aCk7XG4gICAgY29uc3QgYXBpSGVhZGVycyA9IHt9O1xuICAgIHJldHVybiB0aGlzLmNsaWVudC5jYWxsKFxuICAgICAgXCJnZXRcIixcbiAgICAgIHVyaSxcbiAgICAgIGFwaUhlYWRlcnMsXG4gICAgICBwYXlsb2FkXG4gICAgKTtcbiAgfVxuICAvKipcbiAgICogVXBkYXRlIGEgc3RvcmFnZSBidWNrZXQgYnkgaXRzIHVuaXF1ZSBJRC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGJ1Y2tldElkXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAqIEBwYXJhbSB7c3RyaW5nW119IHBlcm1pc3Npb25zXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gZmlsZVNlY3VyaXR5XG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gZW5hYmxlZFxuICAgKiBAcGFyYW0ge251bWJlcn0gbWF4aW11bUZpbGVTaXplXG4gICAqIEBwYXJhbSB7c3RyaW5nW119IGFsbG93ZWRGaWxlRXh0ZW5zaW9uc1xuICAgKiBAcGFyYW0ge0NvbXByZXNzaW9ufSBjb21wcmVzc2lvblxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGVuY3J5cHRpb25cbiAgICogQHBhcmFtIHtib29sZWFufSBhbnRpdmlydXNcbiAgICogQHRocm93cyB7QXBwd3JpdGVFeGNlcHRpb259XG4gICAqIEByZXR1cm5zIHtQcm9taXNlPE1vZGVscy5CdWNrZXQ+fVxuICAgKi9cbiAgdXBkYXRlQnVja2V0KGJ1Y2tldElkLCBuYW1lLCBwZXJtaXNzaW9ucywgZmlsZVNlY3VyaXR5LCBlbmFibGVkLCBtYXhpbXVtRmlsZVNpemUsIGFsbG93ZWRGaWxlRXh0ZW5zaW9ucywgY29tcHJlc3Npb24sIGVuY3J5cHRpb24sIGFudGl2aXJ1cykge1xuICAgIGlmICh0eXBlb2YgYnVja2V0SWQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBBcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwiYnVja2V0SWRcIicpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG5hbWUgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBBcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwibmFtZVwiJyk7XG4gICAgfVxuICAgIGNvbnN0IGFwaVBhdGggPSBcIi9zdG9yYWdlL2J1Y2tldHMve2J1Y2tldElkfVwiLnJlcGxhY2UoXCJ7YnVja2V0SWR9XCIsIGJ1Y2tldElkKTtcbiAgICBjb25zdCBwYXlsb2FkID0ge307XG4gICAgaWYgKHR5cGVvZiBuYW1lICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBwYXlsb2FkW1wibmFtZVwiXSA9IG5hbWU7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcGVybWlzc2lvbnMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHBheWxvYWRbXCJwZXJtaXNzaW9uc1wiXSA9IHBlcm1pc3Npb25zO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGZpbGVTZWN1cml0eSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcImZpbGVTZWN1cml0eVwiXSA9IGZpbGVTZWN1cml0eTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBlbmFibGVkICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBwYXlsb2FkW1wiZW5hYmxlZFwiXSA9IGVuYWJsZWQ7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgbWF4aW11bUZpbGVTaXplICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBwYXlsb2FkW1wibWF4aW11bUZpbGVTaXplXCJdID0gbWF4aW11bUZpbGVTaXplO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGFsbG93ZWRGaWxlRXh0ZW5zaW9ucyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcImFsbG93ZWRGaWxlRXh0ZW5zaW9uc1wiXSA9IGFsbG93ZWRGaWxlRXh0ZW5zaW9ucztcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBjb21wcmVzc2lvbiAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcImNvbXByZXNzaW9uXCJdID0gY29tcHJlc3Npb247XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZW5jcnlwdGlvbiAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcImVuY3J5cHRpb25cIl0gPSBlbmNyeXB0aW9uO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGFudGl2aXJ1cyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcImFudGl2aXJ1c1wiXSA9IGFudGl2aXJ1cztcbiAgICB9XG4gICAgY29uc3QgdXJpID0gbmV3IFVSTCh0aGlzLmNsaWVudC5jb25maWcuZW5kcG9pbnQgKyBhcGlQYXRoKTtcbiAgICBjb25zdCBhcGlIZWFkZXJzID0ge1xuICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCJcbiAgICB9O1xuICAgIHJldHVybiB0aGlzLmNsaWVudC5jYWxsKFxuICAgICAgXCJwdXRcIixcbiAgICAgIHVyaSxcbiAgICAgIGFwaUhlYWRlcnMsXG4gICAgICBwYXlsb2FkXG4gICAgKTtcbiAgfVxuICAvKipcbiAgICogRGVsZXRlIGEgc3RvcmFnZSBidWNrZXQgYnkgaXRzIHVuaXF1ZSBJRC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGJ1Y2tldElkXG4gICAqIEB0aHJvd3Mge0FwcHdyaXRlRXhjZXB0aW9ufVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx7fT59XG4gICAqL1xuICBkZWxldGVCdWNrZXQoYnVja2V0SWQpIHtcbiAgICBpZiAodHlwZW9mIGJ1Y2tldElkID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgQXBwd3JpdGVFeGNlcHRpb24oJ01pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyOiBcImJ1Y2tldElkXCInKTtcbiAgICB9XG4gICAgY29uc3QgYXBpUGF0aCA9IFwiL3N0b3JhZ2UvYnVja2V0cy97YnVja2V0SWR9XCIucmVwbGFjZShcIntidWNrZXRJZH1cIiwgYnVja2V0SWQpO1xuICAgIGNvbnN0IHBheWxvYWQgPSB7fTtcbiAgICBjb25zdCB1cmkgPSBuZXcgVVJMKHRoaXMuY2xpZW50LmNvbmZpZy5lbmRwb2ludCArIGFwaVBhdGgpO1xuICAgIGNvbnN0IGFwaUhlYWRlcnMgPSB7XG4gICAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIlxuICAgIH07XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LmNhbGwoXG4gICAgICBcImRlbGV0ZVwiLFxuICAgICAgdXJpLFxuICAgICAgYXBpSGVhZGVycyxcbiAgICAgIHBheWxvYWRcbiAgICApO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgYSBsaXN0IG9mIGFsbCB0aGUgdXNlciBmaWxlcy4gWW91IGNhbiB1c2UgdGhlIHF1ZXJ5IHBhcmFtcyB0byBmaWx0ZXIgeW91ciByZXN1bHRzLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gYnVja2V0SWRcbiAgICogQHBhcmFtIHtzdHJpbmdbXX0gcXVlcmllc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gc2VhcmNoXG4gICAqIEB0aHJvd3Mge0FwcHdyaXRlRXhjZXB0aW9ufVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxNb2RlbHMuRmlsZUxpc3Q+fVxuICAgKi9cbiAgbGlzdEZpbGVzKGJ1Y2tldElkLCBxdWVyaWVzLCBzZWFyY2gpIHtcbiAgICBpZiAodHlwZW9mIGJ1Y2tldElkID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgQXBwd3JpdGVFeGNlcHRpb24oJ01pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyOiBcImJ1Y2tldElkXCInKTtcbiAgICB9XG4gICAgY29uc3QgYXBpUGF0aCA9IFwiL3N0b3JhZ2UvYnVja2V0cy97YnVja2V0SWR9L2ZpbGVzXCIucmVwbGFjZShcIntidWNrZXRJZH1cIiwgYnVja2V0SWQpO1xuICAgIGNvbnN0IHBheWxvYWQgPSB7fTtcbiAgICBpZiAodHlwZW9mIHF1ZXJpZXMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHBheWxvYWRbXCJxdWVyaWVzXCJdID0gcXVlcmllcztcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBzZWFyY2ggIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHBheWxvYWRbXCJzZWFyY2hcIl0gPSBzZWFyY2g7XG4gICAgfVxuICAgIGNvbnN0IHVyaSA9IG5ldyBVUkwodGhpcy5jbGllbnQuY29uZmlnLmVuZHBvaW50ICsgYXBpUGF0aCk7XG4gICAgY29uc3QgYXBpSGVhZGVycyA9IHt9O1xuICAgIHJldHVybiB0aGlzLmNsaWVudC5jYWxsKFxuICAgICAgXCJnZXRcIixcbiAgICAgIHVyaSxcbiAgICAgIGFwaUhlYWRlcnMsXG4gICAgICBwYXlsb2FkXG4gICAgKTtcbiAgfVxuICAvKipcbiAgICAgICAqIENyZWF0ZSBhIG5ldyBmaWxlLiBCZWZvcmUgdXNpbmcgdGhpcyByb3V0ZSwgeW91IHNob3VsZCBjcmVhdGUgYSBuZXcgYnVja2V0IHJlc291cmNlIHVzaW5nIGVpdGhlciBhIFtzZXJ2ZXIgaW50ZWdyYXRpb25dKGh0dHBzOi8vYXBwd3JpdGUuaW8vZG9jcy9zZXJ2ZXIvc3RvcmFnZSNzdG9yYWdlQ3JlYXRlQnVja2V0KSBBUEkgb3IgZGlyZWN0bHkgZnJvbSB5b3VyIEFwcHdyaXRlIGNvbnNvbGUuXG4gIFxuICBMYXJnZXIgZmlsZXMgc2hvdWxkIGJlIHVwbG9hZGVkIHVzaW5nIG11bHRpcGxlIHJlcXVlc3RzIHdpdGggdGhlIFtjb250ZW50LXJhbmdlXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVFRQL0hlYWRlcnMvQ29udGVudC1SYW5nZSkgaGVhZGVyIHRvIHNlbmQgYSBwYXJ0aWFsIHJlcXVlc3Qgd2l0aCBhIG1heGltdW0gc3VwcG9ydGVkIGNodW5rIG9mIGA1TUJgLiBUaGUgYGNvbnRlbnQtcmFuZ2VgIGhlYWRlciB2YWx1ZXMgc2hvdWxkIGFsd2F5cyBiZSBpbiBieXRlcy5cbiAgXG4gIFdoZW4gdGhlIGZpcnN0IHJlcXVlc3QgaXMgc2VudCwgdGhlIHNlcnZlciB3aWxsIHJldHVybiB0aGUgKipGaWxlKiogb2JqZWN0LCBhbmQgdGhlIHN1YnNlcXVlbnQgcGFydCByZXF1ZXN0IG11c3QgaW5jbHVkZSB0aGUgZmlsZSYjMDM5O3MgKippZCoqIGluIGB4LWFwcHdyaXRlLWlkYCBoZWFkZXIgdG8gYWxsb3cgdGhlIHNlcnZlciB0byBrbm93IHRoYXQgdGhlIHBhcnRpYWwgdXBsb2FkIGlzIGZvciB0aGUgZXhpc3RpbmcgZmlsZSBhbmQgbm90IGZvciBhIG5ldyBvbmUuXG4gIFxuICBJZiB5b3UmIzAzOTtyZSBjcmVhdGluZyBhIG5ldyBmaWxlIHVzaW5nIG9uZSBvZiB0aGUgQXBwd3JpdGUgU0RLcywgYWxsIHRoZSBjaHVua2luZyBsb2dpYyB3aWxsIGJlIG1hbmFnZWQgYnkgdGhlIFNESyBpbnRlcm5hbGx5LlxuICBcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gYnVja2V0SWRcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlSWRcbiAgICAgICAqIEBwYXJhbSB7RmlsZX0gZmlsZVxuICAgICAgICogQHBhcmFtIHtzdHJpbmdbXX0gcGVybWlzc2lvbnNcbiAgICAgICAqIEB0aHJvd3Mge0FwcHdyaXRlRXhjZXB0aW9ufVxuICAgICAgICogQHJldHVybnMge1Byb21pc2U8TW9kZWxzLkZpbGU+fVxuICAgICAgICovXG4gIGNyZWF0ZUZpbGUoYnVja2V0SWQsIGZpbGVJZCwgZmlsZSwgcGVybWlzc2lvbnMsIG9uUHJvZ3Jlc3MgPSAocHJvZ3Jlc3MpID0+IHtcbiAgfSkge1xuICAgIGlmICh0eXBlb2YgYnVja2V0SWQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBBcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwiYnVja2V0SWRcIicpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGZpbGVJZCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhyb3cgbmV3IEFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJmaWxlSWRcIicpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGZpbGUgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBBcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwiZmlsZVwiJyk7XG4gICAgfVxuICAgIGNvbnN0IGFwaVBhdGggPSBcIi9zdG9yYWdlL2J1Y2tldHMve2J1Y2tldElkfS9maWxlc1wiLnJlcGxhY2UoXCJ7YnVja2V0SWR9XCIsIGJ1Y2tldElkKTtcbiAgICBjb25zdCBwYXlsb2FkID0ge307XG4gICAgaWYgKHR5cGVvZiBmaWxlSWQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHBheWxvYWRbXCJmaWxlSWRcIl0gPSBmaWxlSWQ7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZmlsZSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcImZpbGVcIl0gPSBmaWxlO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHBlcm1pc3Npb25zICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBwYXlsb2FkW1wicGVybWlzc2lvbnNcIl0gPSBwZXJtaXNzaW9ucztcbiAgICB9XG4gICAgY29uc3QgdXJpID0gbmV3IFVSTCh0aGlzLmNsaWVudC5jb25maWcuZW5kcG9pbnQgKyBhcGlQYXRoKTtcbiAgICBjb25zdCBhcGlIZWFkZXJzID0ge1xuICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJtdWx0aXBhcnQvZm9ybS1kYXRhXCJcbiAgICB9O1xuICAgIHJldHVybiB0aGlzLmNsaWVudC5jaHVua2VkVXBsb2FkKFxuICAgICAgXCJwb3N0XCIsXG4gICAgICB1cmksXG4gICAgICBhcGlIZWFkZXJzLFxuICAgICAgcGF5bG9hZCxcbiAgICAgIG9uUHJvZ3Jlc3NcbiAgICApO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgYSBmaWxlIGJ5IGl0cyB1bmlxdWUgSUQuIFRoaXMgZW5kcG9pbnQgcmVzcG9uc2UgcmV0dXJucyBhIEpTT04gb2JqZWN0IHdpdGggdGhlIGZpbGUgbWV0YWRhdGEuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBidWNrZXRJZFxuICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsZUlkXG4gICAqIEB0aHJvd3Mge0FwcHdyaXRlRXhjZXB0aW9ufVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxNb2RlbHMuRmlsZT59XG4gICAqL1xuICBnZXRGaWxlKGJ1Y2tldElkLCBmaWxlSWQpIHtcbiAgICBpZiAodHlwZW9mIGJ1Y2tldElkID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgQXBwd3JpdGVFeGNlcHRpb24oJ01pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyOiBcImJ1Y2tldElkXCInKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBmaWxlSWQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBBcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwiZmlsZUlkXCInKTtcbiAgICB9XG4gICAgY29uc3QgYXBpUGF0aCA9IFwiL3N0b3JhZ2UvYnVja2V0cy97YnVja2V0SWR9L2ZpbGVzL3tmaWxlSWR9XCIucmVwbGFjZShcIntidWNrZXRJZH1cIiwgYnVja2V0SWQpLnJlcGxhY2UoXCJ7ZmlsZUlkfVwiLCBmaWxlSWQpO1xuICAgIGNvbnN0IHBheWxvYWQgPSB7fTtcbiAgICBjb25zdCB1cmkgPSBuZXcgVVJMKHRoaXMuY2xpZW50LmNvbmZpZy5lbmRwb2ludCArIGFwaVBhdGgpO1xuICAgIGNvbnN0IGFwaUhlYWRlcnMgPSB7fTtcbiAgICByZXR1cm4gdGhpcy5jbGllbnQuY2FsbChcbiAgICAgIFwiZ2V0XCIsXG4gICAgICB1cmksXG4gICAgICBhcGlIZWFkZXJzLFxuICAgICAgcGF5bG9hZFxuICAgICk7XG4gIH1cbiAgLyoqXG4gICAqIFVwZGF0ZSBhIGZpbGUgYnkgaXRzIHVuaXF1ZSBJRC4gT25seSB1c2VycyB3aXRoIHdyaXRlIHBlcm1pc3Npb25zIGhhdmUgYWNjZXNzIHRvIHVwZGF0ZSB0aGlzIHJlc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gYnVja2V0SWRcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZpbGVJZFxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBwZXJtaXNzaW9uc1xuICAgKiBAdGhyb3dzIHtBcHB3cml0ZUV4Y2VwdGlvbn1cbiAgICogQHJldHVybnMge1Byb21pc2U8TW9kZWxzLkZpbGU+fVxuICAgKi9cbiAgdXBkYXRlRmlsZShidWNrZXRJZCwgZmlsZUlkLCBuYW1lLCBwZXJtaXNzaW9ucykge1xuICAgIGlmICh0eXBlb2YgYnVja2V0SWQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBBcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwiYnVja2V0SWRcIicpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGZpbGVJZCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhyb3cgbmV3IEFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJmaWxlSWRcIicpO1xuICAgIH1cbiAgICBjb25zdCBhcGlQYXRoID0gXCIvc3RvcmFnZS9idWNrZXRzL3tidWNrZXRJZH0vZmlsZXMve2ZpbGVJZH1cIi5yZXBsYWNlKFwie2J1Y2tldElkfVwiLCBidWNrZXRJZCkucmVwbGFjZShcIntmaWxlSWR9XCIsIGZpbGVJZCk7XG4gICAgY29uc3QgcGF5bG9hZCA9IHt9O1xuICAgIGlmICh0eXBlb2YgbmFtZSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcIm5hbWVcIl0gPSBuYW1lO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHBlcm1pc3Npb25zICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBwYXlsb2FkW1wicGVybWlzc2lvbnNcIl0gPSBwZXJtaXNzaW9ucztcbiAgICB9XG4gICAgY29uc3QgdXJpID0gbmV3IFVSTCh0aGlzLmNsaWVudC5jb25maWcuZW5kcG9pbnQgKyBhcGlQYXRoKTtcbiAgICBjb25zdCBhcGlIZWFkZXJzID0ge1xuICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCJcbiAgICB9O1xuICAgIHJldHVybiB0aGlzLmNsaWVudC5jYWxsKFxuICAgICAgXCJwdXRcIixcbiAgICAgIHVyaSxcbiAgICAgIGFwaUhlYWRlcnMsXG4gICAgICBwYXlsb2FkXG4gICAgKTtcbiAgfVxuICAvKipcbiAgICogRGVsZXRlIGEgZmlsZSBieSBpdHMgdW5pcXVlIElELiBPbmx5IHVzZXJzIHdpdGggd3JpdGUgcGVybWlzc2lvbnMgaGF2ZSBhY2Nlc3MgdG8gZGVsZXRlIHRoaXMgcmVzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBidWNrZXRJZFxuICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsZUlkXG4gICAqIEB0aHJvd3Mge0FwcHdyaXRlRXhjZXB0aW9ufVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx7fT59XG4gICAqL1xuICBkZWxldGVGaWxlKGJ1Y2tldElkLCBmaWxlSWQpIHtcbiAgICBpZiAodHlwZW9mIGJ1Y2tldElkID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgQXBwd3JpdGVFeGNlcHRpb24oJ01pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyOiBcImJ1Y2tldElkXCInKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBmaWxlSWQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBBcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwiZmlsZUlkXCInKTtcbiAgICB9XG4gICAgY29uc3QgYXBpUGF0aCA9IFwiL3N0b3JhZ2UvYnVja2V0cy97YnVja2V0SWR9L2ZpbGVzL3tmaWxlSWR9XCIucmVwbGFjZShcIntidWNrZXRJZH1cIiwgYnVja2V0SWQpLnJlcGxhY2UoXCJ7ZmlsZUlkfVwiLCBmaWxlSWQpO1xuICAgIGNvbnN0IHBheWxvYWQgPSB7fTtcbiAgICBjb25zdCB1cmkgPSBuZXcgVVJMKHRoaXMuY2xpZW50LmNvbmZpZy5lbmRwb2ludCArIGFwaVBhdGgpO1xuICAgIGNvbnN0IGFwaUhlYWRlcnMgPSB7XG4gICAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIlxuICAgIH07XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LmNhbGwoXG4gICAgICBcImRlbGV0ZVwiLFxuICAgICAgdXJpLFxuICAgICAgYXBpSGVhZGVycyxcbiAgICAgIHBheWxvYWRcbiAgICApO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgYSBmaWxlIGNvbnRlbnQgYnkgaXRzIHVuaXF1ZSBJRC4gVGhlIGVuZHBvaW50IHJlc3BvbnNlIHJldHVybiB3aXRoIGEgJiMwMzk7Q29udGVudC1EaXNwb3NpdGlvbjogYXR0YWNobWVudCYjMDM5OyBoZWFkZXIgdGhhdCB0ZWxscyB0aGUgYnJvd3NlciB0byBzdGFydCBkb3dubG9hZGluZyB0aGUgZmlsZSB0byB1c2VyIGRvd25sb2FkcyBkaXJlY3RvcnkuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBidWNrZXRJZFxuICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsZUlkXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b2tlblxuICAgKiBAdGhyb3dzIHtBcHB3cml0ZUV4Y2VwdGlvbn1cbiAgICogQHJldHVybnMge1Byb21pc2U8QXJyYXlCdWZmZXI+fVxuICAgKi9cbiAgZ2V0RmlsZURvd25sb2FkKGJ1Y2tldElkLCBmaWxlSWQsIHRva2VuKSB7XG4gICAgaWYgKHR5cGVvZiBidWNrZXRJZCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhyb3cgbmV3IEFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJidWNrZXRJZFwiJyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZmlsZUlkID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgQXBwd3JpdGVFeGNlcHRpb24oJ01pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyOiBcImZpbGVJZFwiJyk7XG4gICAgfVxuICAgIGNvbnN0IGFwaVBhdGggPSBcIi9zdG9yYWdlL2J1Y2tldHMve2J1Y2tldElkfS9maWxlcy97ZmlsZUlkfS9kb3dubG9hZFwiLnJlcGxhY2UoXCJ7YnVja2V0SWR9XCIsIGJ1Y2tldElkKS5yZXBsYWNlKFwie2ZpbGVJZH1cIiwgZmlsZUlkKTtcbiAgICBjb25zdCBwYXlsb2FkID0ge307XG4gICAgaWYgKHR5cGVvZiB0b2tlbiAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcInRva2VuXCJdID0gdG9rZW47XG4gICAgfVxuICAgIGNvbnN0IHVyaSA9IG5ldyBVUkwodGhpcy5jbGllbnQuY29uZmlnLmVuZHBvaW50ICsgYXBpUGF0aCk7XG4gICAgY29uc3QgYXBpSGVhZGVycyA9IHt9O1xuICAgIHJldHVybiB0aGlzLmNsaWVudC5jYWxsKFxuICAgICAgXCJnZXRcIixcbiAgICAgIHVyaSxcbiAgICAgIGFwaUhlYWRlcnMsXG4gICAgICBwYXlsb2FkLFxuICAgICAgXCJhcnJheUJ1ZmZlclwiXG4gICAgKTtcbiAgfVxuICAvKipcbiAgICogR2V0IGEgZmlsZSBwcmV2aWV3IGltYWdlLiBDdXJyZW50bHksIHRoaXMgbWV0aG9kIHN1cHBvcnRzIHByZXZpZXcgZm9yIGltYWdlIGZpbGVzIChqcGcsIHBuZywgYW5kIGdpZiksIG90aGVyIHN1cHBvcnRlZCBmb3JtYXRzLCBsaWtlIHBkZiwgZG9jcywgc2xpZGVzLCBhbmQgc3ByZWFkc2hlZXRzLCB3aWxsIHJldHVybiB0aGUgZmlsZSBpY29uIGltYWdlLiBZb3UgY2FuIGFsc28gcGFzcyBxdWVyeSBzdHJpbmcgYXJndW1lbnRzIGZvciBjdXR0aW5nIGFuZCByZXNpemluZyB5b3VyIHByZXZpZXcgaW1hZ2UuIFByZXZpZXcgaXMgc3VwcG9ydGVkIG9ubHkgZm9yIGltYWdlIGZpbGVzIHNtYWxsZXIgdGhhbiAxME1CLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gYnVja2V0SWRcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZpbGVJZFxuICAgKiBAcGFyYW0ge251bWJlcn0gd2lkdGhcbiAgICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodFxuICAgKiBAcGFyYW0ge0ltYWdlR3Jhdml0eX0gZ3Jhdml0eVxuICAgKiBAcGFyYW0ge251bWJlcn0gcXVhbGl0eVxuICAgKiBAcGFyYW0ge251bWJlcn0gYm9yZGVyV2lkdGhcbiAgICogQHBhcmFtIHtzdHJpbmd9IGJvcmRlckNvbG9yXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBib3JkZXJSYWRpdXNcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9wYWNpdHlcbiAgICogQHBhcmFtIHtudW1iZXJ9IHJvdGF0aW9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBiYWNrZ3JvdW5kXG4gICAqIEBwYXJhbSB7SW1hZ2VGb3JtYXR9IG91dHB1dFxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9rZW5cbiAgICogQHRocm93cyB7QXBwd3JpdGVFeGNlcHRpb259XG4gICAqIEByZXR1cm5zIHtQcm9taXNlPEFycmF5QnVmZmVyPn1cbiAgICovXG4gIGdldEZpbGVQcmV2aWV3KGJ1Y2tldElkLCBmaWxlSWQsIHdpZHRoLCBoZWlnaHQsIGdyYXZpdHksIHF1YWxpdHksIGJvcmRlcldpZHRoLCBib3JkZXJDb2xvciwgYm9yZGVyUmFkaXVzLCBvcGFjaXR5LCByb3RhdGlvbiwgYmFja2dyb3VuZCwgb3V0cHV0LCB0b2tlbikge1xuICAgIGlmICh0eXBlb2YgYnVja2V0SWQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBBcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwiYnVja2V0SWRcIicpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGZpbGVJZCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhyb3cgbmV3IEFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJmaWxlSWRcIicpO1xuICAgIH1cbiAgICBjb25zdCBhcGlQYXRoID0gXCIvc3RvcmFnZS9idWNrZXRzL3tidWNrZXRJZH0vZmlsZXMve2ZpbGVJZH0vcHJldmlld1wiLnJlcGxhY2UoXCJ7YnVja2V0SWR9XCIsIGJ1Y2tldElkKS5yZXBsYWNlKFwie2ZpbGVJZH1cIiwgZmlsZUlkKTtcbiAgICBjb25zdCBwYXlsb2FkID0ge307XG4gICAgaWYgKHR5cGVvZiB3aWR0aCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcIndpZHRoXCJdID0gd2lkdGg7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgaGVpZ2h0ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBwYXlsb2FkW1wiaGVpZ2h0XCJdID0gaGVpZ2h0O1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGdyYXZpdHkgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHBheWxvYWRbXCJncmF2aXR5XCJdID0gZ3Jhdml0eTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBxdWFsaXR5ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBwYXlsb2FkW1wicXVhbGl0eVwiXSA9IHF1YWxpdHk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgYm9yZGVyV2lkdGggIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHBheWxvYWRbXCJib3JkZXJXaWR0aFwiXSA9IGJvcmRlcldpZHRoO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGJvcmRlckNvbG9yICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBwYXlsb2FkW1wiYm9yZGVyQ29sb3JcIl0gPSBib3JkZXJDb2xvcjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBib3JkZXJSYWRpdXMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHBheWxvYWRbXCJib3JkZXJSYWRpdXNcIl0gPSBib3JkZXJSYWRpdXM7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb3BhY2l0eSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcIm9wYWNpdHlcIl0gPSBvcGFjaXR5O1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHJvdGF0aW9uICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBwYXlsb2FkW1wicm90YXRpb25cIl0gPSByb3RhdGlvbjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBiYWNrZ3JvdW5kICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBwYXlsb2FkW1wiYmFja2dyb3VuZFwiXSA9IGJhY2tncm91bmQ7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb3V0cHV0ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBwYXlsb2FkW1wib3V0cHV0XCJdID0gb3V0cHV0O1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHRva2VuICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBwYXlsb2FkW1widG9rZW5cIl0gPSB0b2tlbjtcbiAgICB9XG4gICAgY29uc3QgdXJpID0gbmV3IFVSTCh0aGlzLmNsaWVudC5jb25maWcuZW5kcG9pbnQgKyBhcGlQYXRoKTtcbiAgICBjb25zdCBhcGlIZWFkZXJzID0ge307XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LmNhbGwoXG4gICAgICBcImdldFwiLFxuICAgICAgdXJpLFxuICAgICAgYXBpSGVhZGVycyxcbiAgICAgIHBheWxvYWQsXG4gICAgICBcImFycmF5QnVmZmVyXCJcbiAgICApO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgYSBmaWxlIGNvbnRlbnQgYnkgaXRzIHVuaXF1ZSBJRC4gVGhpcyBlbmRwb2ludCBpcyBzaW1pbGFyIHRvIHRoZSBkb3dubG9hZCBtZXRob2QgYnV0IHJldHVybnMgd2l0aCBubyAgJiMwMzk7Q29udGVudC1EaXNwb3NpdGlvbjogYXR0YWNobWVudCYjMDM5OyBoZWFkZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBidWNrZXRJZFxuICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsZUlkXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b2tlblxuICAgKiBAdGhyb3dzIHtBcHB3cml0ZUV4Y2VwdGlvbn1cbiAgICogQHJldHVybnMge1Byb21pc2U8QXJyYXlCdWZmZXI+fVxuICAgKi9cbiAgZ2V0RmlsZVZpZXcoYnVja2V0SWQsIGZpbGVJZCwgdG9rZW4pIHtcbiAgICBpZiAodHlwZW9mIGJ1Y2tldElkID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgQXBwd3JpdGVFeGNlcHRpb24oJ01pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyOiBcImJ1Y2tldElkXCInKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBmaWxlSWQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBBcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwiZmlsZUlkXCInKTtcbiAgICB9XG4gICAgY29uc3QgYXBpUGF0aCA9IFwiL3N0b3JhZ2UvYnVja2V0cy97YnVja2V0SWR9L2ZpbGVzL3tmaWxlSWR9L3ZpZXdcIi5yZXBsYWNlKFwie2J1Y2tldElkfVwiLCBidWNrZXRJZCkucmVwbGFjZShcIntmaWxlSWR9XCIsIGZpbGVJZCk7XG4gICAgY29uc3QgcGF5bG9hZCA9IHt9O1xuICAgIGlmICh0eXBlb2YgdG9rZW4gIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHBheWxvYWRbXCJ0b2tlblwiXSA9IHRva2VuO1xuICAgIH1cbiAgICBjb25zdCB1cmkgPSBuZXcgVVJMKHRoaXMuY2xpZW50LmNvbmZpZy5lbmRwb2ludCArIGFwaVBhdGgpO1xuICAgIGNvbnN0IGFwaUhlYWRlcnMgPSB7fTtcbiAgICByZXR1cm4gdGhpcy5jbGllbnQuY2FsbChcbiAgICAgIFwiZ2V0XCIsXG4gICAgICB1cmksXG4gICAgICBhcGlIZWFkZXJzLFxuICAgICAgcGF5bG9hZCxcbiAgICAgIFwiYXJyYXlCdWZmZXJcIlxuICAgICk7XG4gIH1cbn07XG5cbmV4cG9ydCB7IFN0b3JhZ2UgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW91dC5qcy5tYXBcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0b3JhZ2UubWpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-appwrite/dist/services/storage.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-appwrite/dist/services/teams.mjs":
/*!************************************************************!*\
  !*** ./node_modules/node-appwrite/dist/services/teams.mjs ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Teams: () => (/* binding */ Teams)\n/* harmony export */ });\n/* harmony import */ var _client_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../client.mjs */ \"(ssr)/./node_modules/node-appwrite/dist/client.mjs\");\n\n\n// src/services/teams.ts\nvar Teams = class {\n  constructor(client) {\n    this.client = client;\n  }\n  /**\n   * Get a list of all the teams in which the current user is a member. You can use the parameters to filter your results.\n   *\n   * @param {string[]} queries\n   * @param {string} search\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.TeamList<Preferences>>}\n   */\n  list(queries, search) {\n    const apiPath = \"/teams\";\n    const payload = {};\n    if (typeof queries !== \"undefined\") {\n      payload[\"queries\"] = queries;\n    }\n    if (typeof search !== \"undefined\") {\n      payload[\"search\"] = search;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Create a new team. The user who creates the team will automatically be assigned as the owner of the team. Only the users with the owner role can invite new members, add new owners and delete or update the team.\n   *\n   * @param {string} teamId\n   * @param {string} name\n   * @param {string[]} roles\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Team<Preferences>>}\n   */\n  create(teamId, name, roles) {\n    if (typeof teamId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"teamId\"');\n    }\n    if (typeof name === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"name\"');\n    }\n    const apiPath = \"/teams\";\n    const payload = {};\n    if (typeof teamId !== \"undefined\") {\n      payload[\"teamId\"] = teamId;\n    }\n    if (typeof name !== \"undefined\") {\n      payload[\"name\"] = name;\n    }\n    if (typeof roles !== \"undefined\") {\n      payload[\"roles\"] = roles;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Get a team by its ID. All team members have read access for this resource.\n   *\n   * @param {string} teamId\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Team<Preferences>>}\n   */\n  get(teamId) {\n    if (typeof teamId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"teamId\"');\n    }\n    const apiPath = \"/teams/{teamId}\".replace(\"{teamId}\", teamId);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Update the team&#039;s name by its unique ID.\n   *\n   * @param {string} teamId\n   * @param {string} name\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Team<Preferences>>}\n   */\n  updateName(teamId, name) {\n    if (typeof teamId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"teamId\"');\n    }\n    if (typeof name === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"name\"');\n    }\n    const apiPath = \"/teams/{teamId}\".replace(\"{teamId}\", teamId);\n    const payload = {};\n    if (typeof name !== \"undefined\") {\n      payload[\"name\"] = name;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"put\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Delete a team using its ID. Only team members with the owner role can delete the team.\n   *\n   * @param {string} teamId\n   * @throws {AppwriteException}\n   * @returns {Promise<{}>}\n   */\n  delete(teamId) {\n    if (typeof teamId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"teamId\"');\n    }\n    const apiPath = \"/teams/{teamId}\".replace(\"{teamId}\", teamId);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"delete\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Use this endpoint to list a team&#039;s members using the team&#039;s ID. All team members have read access to this endpoint. Hide sensitive attributes from the response by toggling membership privacy in the Console.\n   *\n   * @param {string} teamId\n   * @param {string[]} queries\n   * @param {string} search\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.MembershipList>}\n   */\n  listMemberships(teamId, queries, search) {\n    if (typeof teamId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"teamId\"');\n    }\n    const apiPath = \"/teams/{teamId}/memberships\".replace(\"{teamId}\", teamId);\n    const payload = {};\n    if (typeof queries !== \"undefined\") {\n      payload[\"queries\"] = queries;\n    }\n    if (typeof search !== \"undefined\") {\n      payload[\"search\"] = search;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n       * Invite a new member to join your team. Provide an ID for existing users, or invite unregistered users using an email or phone number. If initiated from a Client SDK, Appwrite will send an email or sms with a link to join the team to the invited user, and an account will be created for them if one doesn&#039;t exist. If initiated from a Server SDK, the new member will be added automatically to the team.\n  \n  You only need to provide one of a user ID, email, or phone number. Appwrite will prioritize accepting the user ID &gt; email &gt; phone number if you provide more than one of these parameters.\n  \n  Use the `url` parameter to redirect the user from the invitation email to your app. After the user is redirected, use the [Update Team Membership Status](https://appwrite.io/docs/references/cloud/client-web/teams#updateMembershipStatus) endpoint to allow the user to accept the invitation to the team. \n  \n  Please note that to avoid a [Redirect Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md) Appwrite will accept the only redirect URLs under the domains you have added as a platform on the Appwrite Console.\n  \n       *\n       * @param {string} teamId\n       * @param {string[]} roles\n       * @param {string} email\n       * @param {string} userId\n       * @param {string} phone\n       * @param {string} url\n       * @param {string} name\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.Membership>}\n       */\n  createMembership(teamId, roles, email, userId, phone, url, name) {\n    if (typeof teamId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"teamId\"');\n    }\n    if (typeof roles === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"roles\"');\n    }\n    const apiPath = \"/teams/{teamId}/memberships\".replace(\"{teamId}\", teamId);\n    const payload = {};\n    if (typeof email !== \"undefined\") {\n      payload[\"email\"] = email;\n    }\n    if (typeof userId !== \"undefined\") {\n      payload[\"userId\"] = userId;\n    }\n    if (typeof phone !== \"undefined\") {\n      payload[\"phone\"] = phone;\n    }\n    if (typeof roles !== \"undefined\") {\n      payload[\"roles\"] = roles;\n    }\n    if (typeof url !== \"undefined\") {\n      payload[\"url\"] = url;\n    }\n    if (typeof name !== \"undefined\") {\n      payload[\"name\"] = name;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Get a team member by the membership unique id. All team members have read access for this resource. Hide sensitive attributes from the response by toggling membership privacy in the Console.\n   *\n   * @param {string} teamId\n   * @param {string} membershipId\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Membership>}\n   */\n  getMembership(teamId, membershipId) {\n    if (typeof teamId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"teamId\"');\n    }\n    if (typeof membershipId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"membershipId\"');\n    }\n    const apiPath = \"/teams/{teamId}/memberships/{membershipId}\".replace(\"{teamId}\", teamId).replace(\"{membershipId}\", membershipId);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n       * Modify the roles of a team member. Only team members with the owner role have access to this endpoint. Learn more about [roles and permissions](https://appwrite.io/docs/permissions).\n  \n       *\n       * @param {string} teamId\n       * @param {string} membershipId\n       * @param {string[]} roles\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.Membership>}\n       */\n  updateMembership(teamId, membershipId, roles) {\n    if (typeof teamId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"teamId\"');\n    }\n    if (typeof membershipId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"membershipId\"');\n    }\n    if (typeof roles === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"roles\"');\n    }\n    const apiPath = \"/teams/{teamId}/memberships/{membershipId}\".replace(\"{teamId}\", teamId).replace(\"{membershipId}\", membershipId);\n    const payload = {};\n    if (typeof roles !== \"undefined\") {\n      payload[\"roles\"] = roles;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"patch\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * This endpoint allows a user to leave a team or for a team owner to delete the membership of any other team member. You can also use this endpoint to delete a user membership even if it is not accepted.\n   *\n   * @param {string} teamId\n   * @param {string} membershipId\n   * @throws {AppwriteException}\n   * @returns {Promise<{}>}\n   */\n  deleteMembership(teamId, membershipId) {\n    if (typeof teamId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"teamId\"');\n    }\n    if (typeof membershipId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"membershipId\"');\n    }\n    const apiPath = \"/teams/{teamId}/memberships/{membershipId}\".replace(\"{teamId}\", teamId).replace(\"{membershipId}\", membershipId);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"delete\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n       * Use this endpoint to allow a user to accept an invitation to join a team after being redirected back to your app from the invitation email received by the user.\n  \n  If the request is successful, a session for the user is automatically created.\n  \n       *\n       * @param {string} teamId\n       * @param {string} membershipId\n       * @param {string} userId\n       * @param {string} secret\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.Membership>}\n       */\n  updateMembershipStatus(teamId, membershipId, userId, secret) {\n    if (typeof teamId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"teamId\"');\n    }\n    if (typeof membershipId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"membershipId\"');\n    }\n    if (typeof userId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"userId\"');\n    }\n    if (typeof secret === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"secret\"');\n    }\n    const apiPath = \"/teams/{teamId}/memberships/{membershipId}/status\".replace(\"{teamId}\", teamId).replace(\"{membershipId}\", membershipId);\n    const payload = {};\n    if (typeof userId !== \"undefined\") {\n      payload[\"userId\"] = userId;\n    }\n    if (typeof secret !== \"undefined\") {\n      payload[\"secret\"] = secret;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"patch\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Get the team&#039;s shared preferences by its unique ID. If a preference doesn&#039;t need to be shared by all team members, prefer storing them in [user preferences](https://appwrite.io/docs/references/cloud/client-web/account#getPrefs).\n   *\n   * @param {string} teamId\n   * @throws {AppwriteException}\n   * @returns {Promise<Preferences>}\n   */\n  getPrefs(teamId) {\n    if (typeof teamId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"teamId\"');\n    }\n    const apiPath = \"/teams/{teamId}/prefs\".replace(\"{teamId}\", teamId);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Update the team&#039;s preferences by its unique ID. The object you pass is stored as is and replaces any previous value. The maximum allowed prefs size is 64kB and throws an error if exceeded.\n   *\n   * @param {string} teamId\n   * @param {object} prefs\n   * @throws {AppwriteException}\n   * @returns {Promise<Preferences>}\n   */\n  updatePrefs(teamId, prefs) {\n    if (typeof teamId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"teamId\"');\n    }\n    if (typeof prefs === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"prefs\"');\n    }\n    const apiPath = \"/teams/{teamId}/prefs\".replace(\"{teamId}\", teamId);\n    const payload = {};\n    if (typeof prefs !== \"undefined\") {\n      payload[\"prefs\"] = prefs;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"put\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n};\n\n\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=teams.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-appwrite/dist/services/teams.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-appwrite/dist/services/tokens.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/node-appwrite/dist/services/tokens.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Tokens: () => (/* binding */ Tokens)\n/* harmony export */ });\n/* harmony import */ var _client_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../client.mjs */ \"(ssr)/./node_modules/node-appwrite/dist/client.mjs\");\n\n\n// src/services/tokens.ts\nvar Tokens = class {\n  constructor(client) {\n    this.client = client;\n  }\n  /**\n   * List all the tokens created for a specific file or bucket. You can use the query params to filter your results.\n   *\n   * @param {string} bucketId\n   * @param {string} fileId\n   * @param {string[]} queries\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.ResourceTokenList>}\n   */\n  list(bucketId, fileId, queries) {\n    if (typeof bucketId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"bucketId\"');\n    }\n    if (typeof fileId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"fileId\"');\n    }\n    const apiPath = \"/tokens/buckets/{bucketId}/files/{fileId}\".replace(\"{bucketId}\", bucketId).replace(\"{fileId}\", fileId);\n    const payload = {};\n    if (typeof queries !== \"undefined\") {\n      payload[\"queries\"] = queries;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Create a new token. A token is linked to a file. Token can be passed as a header or request get parameter.\n   *\n   * @param {string} bucketId\n   * @param {string} fileId\n   * @param {string} expire\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.ResourceToken>}\n   */\n  createFileToken(bucketId, fileId, expire) {\n    if (typeof bucketId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"bucketId\"');\n    }\n    if (typeof fileId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"fileId\"');\n    }\n    const apiPath = \"/tokens/buckets/{bucketId}/files/{fileId}\".replace(\"{bucketId}\", bucketId).replace(\"{fileId}\", fileId);\n    const payload = {};\n    if (typeof expire !== \"undefined\") {\n      payload[\"expire\"] = expire;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Get a token by its unique ID.\n   *\n   * @param {string} tokenId\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.ResourceToken>}\n   */\n  get(tokenId) {\n    if (typeof tokenId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"tokenId\"');\n    }\n    const apiPath = \"/tokens/{tokenId}\".replace(\"{tokenId}\", tokenId);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Update a token by its unique ID. Use this endpoint to update a token&#039;s expiry date.\n   *\n   * @param {string} tokenId\n   * @param {string} expire\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.ResourceToken>}\n   */\n  update(tokenId, expire) {\n    if (typeof tokenId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"tokenId\"');\n    }\n    const apiPath = \"/tokens/{tokenId}\".replace(\"{tokenId}\", tokenId);\n    const payload = {};\n    if (typeof expire !== \"undefined\") {\n      payload[\"expire\"] = expire;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"patch\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Delete a token by its unique ID.\n   *\n   * @param {string} tokenId\n   * @throws {AppwriteException}\n   * @returns {Promise<{}>}\n   */\n  delete(tokenId) {\n    if (typeof tokenId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"tokenId\"');\n    }\n    const apiPath = \"/tokens/{tokenId}\".replace(\"{tokenId}\", tokenId);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"delete\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n};\n\n\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=tokens.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L3NlcnZpY2VzL3Rva2Vucy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBa0Q7O0FBRWxEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsVUFBVTtBQUN2QixjQUFjO0FBQ2QsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiwwREFBaUI7QUFDakM7QUFDQTtBQUNBLGdCQUFnQiwwREFBaUI7QUFDakM7QUFDQSxzQ0FBc0MsU0FBUyxRQUFRLE9BQU8sWUFBWSxTQUFTLHVCQUF1QixPQUFPO0FBQ2pIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsY0FBYztBQUNkLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsMERBQWlCO0FBQ2pDO0FBQ0E7QUFDQSxnQkFBZ0IsMERBQWlCO0FBQ2pDO0FBQ0Esc0NBQXNDLFNBQVMsUUFBUSxPQUFPLFlBQVksU0FBUyx1QkFBdUIsT0FBTztBQUNqSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsY0FBYztBQUNkLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsMERBQWlCO0FBQ2pDO0FBQ0EsOEJBQThCLFFBQVEsWUFBWSxRQUFRO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrRUFBK0U7QUFDL0U7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGNBQWM7QUFDZCxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLDBEQUFpQjtBQUNqQztBQUNBLDhCQUE4QixRQUFRLFlBQVksUUFBUTtBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsY0FBYztBQUNkLGVBQWUsVUFBVTtBQUN6QjtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsMERBQWlCO0FBQ2pDO0FBQ0EsOEJBQThCLFFBQVEsWUFBWSxRQUFRO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVrQjtBQUNsQjtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9ydW5uZXIvd29ya3NwYWNlL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2Rpc3Qvc2VydmljZXMvdG9rZW5zLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHB3cml0ZUV4Y2VwdGlvbiB9IGZyb20gJy4uL2NsaWVudC5tanMnO1xuXG4vLyBzcmMvc2VydmljZXMvdG9rZW5zLnRzXG52YXIgVG9rZW5zID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcihjbGllbnQpIHtcbiAgICB0aGlzLmNsaWVudCA9IGNsaWVudDtcbiAgfVxuICAvKipcbiAgICogTGlzdCBhbGwgdGhlIHRva2VucyBjcmVhdGVkIGZvciBhIHNwZWNpZmljIGZpbGUgb3IgYnVja2V0LiBZb3UgY2FuIHVzZSB0aGUgcXVlcnkgcGFyYW1zIHRvIGZpbHRlciB5b3VyIHJlc3VsdHMuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBidWNrZXRJZFxuICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsZUlkXG4gICAqIEBwYXJhbSB7c3RyaW5nW119IHF1ZXJpZXNcbiAgICogQHRocm93cyB7QXBwd3JpdGVFeGNlcHRpb259XG4gICAqIEByZXR1cm5zIHtQcm9taXNlPE1vZGVscy5SZXNvdXJjZVRva2VuTGlzdD59XG4gICAqL1xuICBsaXN0KGJ1Y2tldElkLCBmaWxlSWQsIHF1ZXJpZXMpIHtcbiAgICBpZiAodHlwZW9mIGJ1Y2tldElkID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgQXBwd3JpdGVFeGNlcHRpb24oJ01pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyOiBcImJ1Y2tldElkXCInKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBmaWxlSWQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBBcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwiZmlsZUlkXCInKTtcbiAgICB9XG4gICAgY29uc3QgYXBpUGF0aCA9IFwiL3Rva2Vucy9idWNrZXRzL3tidWNrZXRJZH0vZmlsZXMve2ZpbGVJZH1cIi5yZXBsYWNlKFwie2J1Y2tldElkfVwiLCBidWNrZXRJZCkucmVwbGFjZShcIntmaWxlSWR9XCIsIGZpbGVJZCk7XG4gICAgY29uc3QgcGF5bG9hZCA9IHt9O1xuICAgIGlmICh0eXBlb2YgcXVlcmllcyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcInF1ZXJpZXNcIl0gPSBxdWVyaWVzO1xuICAgIH1cbiAgICBjb25zdCB1cmkgPSBuZXcgVVJMKHRoaXMuY2xpZW50LmNvbmZpZy5lbmRwb2ludCArIGFwaVBhdGgpO1xuICAgIGNvbnN0IGFwaUhlYWRlcnMgPSB7fTtcbiAgICByZXR1cm4gdGhpcy5jbGllbnQuY2FsbChcbiAgICAgIFwiZ2V0XCIsXG4gICAgICB1cmksXG4gICAgICBhcGlIZWFkZXJzLFxuICAgICAgcGF5bG9hZFxuICAgICk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyB0b2tlbi4gQSB0b2tlbiBpcyBsaW5rZWQgdG8gYSBmaWxlLiBUb2tlbiBjYW4gYmUgcGFzc2VkIGFzIGEgaGVhZGVyIG9yIHJlcXVlc3QgZ2V0IHBhcmFtZXRlci5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGJ1Y2tldElkXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlSWRcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV4cGlyZVxuICAgKiBAdGhyb3dzIHtBcHB3cml0ZUV4Y2VwdGlvbn1cbiAgICogQHJldHVybnMge1Byb21pc2U8TW9kZWxzLlJlc291cmNlVG9rZW4+fVxuICAgKi9cbiAgY3JlYXRlRmlsZVRva2VuKGJ1Y2tldElkLCBmaWxlSWQsIGV4cGlyZSkge1xuICAgIGlmICh0eXBlb2YgYnVja2V0SWQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBBcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwiYnVja2V0SWRcIicpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGZpbGVJZCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhyb3cgbmV3IEFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJmaWxlSWRcIicpO1xuICAgIH1cbiAgICBjb25zdCBhcGlQYXRoID0gXCIvdG9rZW5zL2J1Y2tldHMve2J1Y2tldElkfS9maWxlcy97ZmlsZUlkfVwiLnJlcGxhY2UoXCJ7YnVja2V0SWR9XCIsIGJ1Y2tldElkKS5yZXBsYWNlKFwie2ZpbGVJZH1cIiwgZmlsZUlkKTtcbiAgICBjb25zdCBwYXlsb2FkID0ge307XG4gICAgaWYgKHR5cGVvZiBleHBpcmUgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHBheWxvYWRbXCJleHBpcmVcIl0gPSBleHBpcmU7XG4gICAgfVxuICAgIGNvbnN0IHVyaSA9IG5ldyBVUkwodGhpcy5jbGllbnQuY29uZmlnLmVuZHBvaW50ICsgYXBpUGF0aCk7XG4gICAgY29uc3QgYXBpSGVhZGVycyA9IHtcbiAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiXG4gICAgfTtcbiAgICByZXR1cm4gdGhpcy5jbGllbnQuY2FsbChcbiAgICAgIFwicG9zdFwiLFxuICAgICAgdXJpLFxuICAgICAgYXBpSGVhZGVycyxcbiAgICAgIHBheWxvYWRcbiAgICApO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgYSB0b2tlbiBieSBpdHMgdW5pcXVlIElELlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9rZW5JZFxuICAgKiBAdGhyb3dzIHtBcHB3cml0ZUV4Y2VwdGlvbn1cbiAgICogQHJldHVybnMge1Byb21pc2U8TW9kZWxzLlJlc291cmNlVG9rZW4+fVxuICAgKi9cbiAgZ2V0KHRva2VuSWQpIHtcbiAgICBpZiAodHlwZW9mIHRva2VuSWQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBBcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwidG9rZW5JZFwiJyk7XG4gICAgfVxuICAgIGNvbnN0IGFwaVBhdGggPSBcIi90b2tlbnMve3Rva2VuSWR9XCIucmVwbGFjZShcInt0b2tlbklkfVwiLCB0b2tlbklkKTtcbiAgICBjb25zdCBwYXlsb2FkID0ge307XG4gICAgY29uc3QgdXJpID0gbmV3IFVSTCh0aGlzLmNsaWVudC5jb25maWcuZW5kcG9pbnQgKyBhcGlQYXRoKTtcbiAgICBjb25zdCBhcGlIZWFkZXJzID0ge307XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LmNhbGwoXG4gICAgICBcImdldFwiLFxuICAgICAgdXJpLFxuICAgICAgYXBpSGVhZGVycyxcbiAgICAgIHBheWxvYWRcbiAgICApO1xuICB9XG4gIC8qKlxuICAgKiBVcGRhdGUgYSB0b2tlbiBieSBpdHMgdW5pcXVlIElELiBVc2UgdGhpcyBlbmRwb2ludCB0byB1cGRhdGUgYSB0b2tlbiYjMDM5O3MgZXhwaXJ5IGRhdGUuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b2tlbklkXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBleHBpcmVcbiAgICogQHRocm93cyB7QXBwd3JpdGVFeGNlcHRpb259XG4gICAqIEByZXR1cm5zIHtQcm9taXNlPE1vZGVscy5SZXNvdXJjZVRva2VuPn1cbiAgICovXG4gIHVwZGF0ZSh0b2tlbklkLCBleHBpcmUpIHtcbiAgICBpZiAodHlwZW9mIHRva2VuSWQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBBcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwidG9rZW5JZFwiJyk7XG4gICAgfVxuICAgIGNvbnN0IGFwaVBhdGggPSBcIi90b2tlbnMve3Rva2VuSWR9XCIucmVwbGFjZShcInt0b2tlbklkfVwiLCB0b2tlbklkKTtcbiAgICBjb25zdCBwYXlsb2FkID0ge307XG4gICAgaWYgKHR5cGVvZiBleHBpcmUgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHBheWxvYWRbXCJleHBpcmVcIl0gPSBleHBpcmU7XG4gICAgfVxuICAgIGNvbnN0IHVyaSA9IG5ldyBVUkwodGhpcy5jbGllbnQuY29uZmlnLmVuZHBvaW50ICsgYXBpUGF0aCk7XG4gICAgY29uc3QgYXBpSGVhZGVycyA9IHtcbiAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiXG4gICAgfTtcbiAgICByZXR1cm4gdGhpcy5jbGllbnQuY2FsbChcbiAgICAgIFwicGF0Y2hcIixcbiAgICAgIHVyaSxcbiAgICAgIGFwaUhlYWRlcnMsXG4gICAgICBwYXlsb2FkXG4gICAgKTtcbiAgfVxuICAvKipcbiAgICogRGVsZXRlIGEgdG9rZW4gYnkgaXRzIHVuaXF1ZSBJRC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRva2VuSWRcbiAgICogQHRocm93cyB7QXBwd3JpdGVFeGNlcHRpb259XG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHt9Pn1cbiAgICovXG4gIGRlbGV0ZSh0b2tlbklkKSB7XG4gICAgaWYgKHR5cGVvZiB0b2tlbklkID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgQXBwd3JpdGVFeGNlcHRpb24oJ01pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyOiBcInRva2VuSWRcIicpO1xuICAgIH1cbiAgICBjb25zdCBhcGlQYXRoID0gXCIvdG9rZW5zL3t0b2tlbklkfVwiLnJlcGxhY2UoXCJ7dG9rZW5JZH1cIiwgdG9rZW5JZCk7XG4gICAgY29uc3QgcGF5bG9hZCA9IHt9O1xuICAgIGNvbnN0IHVyaSA9IG5ldyBVUkwodGhpcy5jbGllbnQuY29uZmlnLmVuZHBvaW50ICsgYXBpUGF0aCk7XG4gICAgY29uc3QgYXBpSGVhZGVycyA9IHtcbiAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiXG4gICAgfTtcbiAgICByZXR1cm4gdGhpcy5jbGllbnQuY2FsbChcbiAgICAgIFwiZGVsZXRlXCIsXG4gICAgICB1cmksXG4gICAgICBhcGlIZWFkZXJzLFxuICAgICAgcGF5bG9hZFxuICAgICk7XG4gIH1cbn07XG5cbmV4cG9ydCB7IFRva2VucyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b3V0LmpzLm1hcFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dG9rZW5zLm1qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-appwrite/dist/services/tokens.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/node-appwrite/dist/services/users.mjs":
/*!************************************************************!*\
  !*** ./node_modules/node-appwrite/dist/services/users.mjs ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Users: () => (/* binding */ Users)\n/* harmony export */ });\n/* harmony import */ var _client_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../client.mjs */ \"(ssr)/./node_modules/node-appwrite/dist/client.mjs\");\n\n\n// src/services/users.ts\nvar Users = class {\n  constructor(client) {\n    this.client = client;\n  }\n  /**\n   * Get a list of all the project&#039;s users. You can use the query params to filter your results.\n   *\n   * @param {string[]} queries\n   * @param {string} search\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.UserList<Preferences>>}\n   */\n  list(queries, search) {\n    const apiPath = \"/users\";\n    const payload = {};\n    if (typeof queries !== \"undefined\") {\n      payload[\"queries\"] = queries;\n    }\n    if (typeof search !== \"undefined\") {\n      payload[\"search\"] = search;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Create a new user.\n   *\n   * @param {string} userId\n   * @param {string} email\n   * @param {string} phone\n   * @param {string} password\n   * @param {string} name\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.User<Preferences>>}\n   */\n  create(userId, email, phone, password, name) {\n    if (typeof userId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"userId\"');\n    }\n    const apiPath = \"/users\";\n    const payload = {};\n    if (typeof userId !== \"undefined\") {\n      payload[\"userId\"] = userId;\n    }\n    if (typeof email !== \"undefined\") {\n      payload[\"email\"] = email;\n    }\n    if (typeof phone !== \"undefined\") {\n      payload[\"phone\"] = phone;\n    }\n    if (typeof password !== \"undefined\") {\n      payload[\"password\"] = password;\n    }\n    if (typeof name !== \"undefined\") {\n      payload[\"name\"] = name;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Create a new user. Password provided must be hashed with the [Argon2](https://en.wikipedia.org/wiki/Argon2) algorithm. Use the [POST /users](https://appwrite.io/docs/server/users#usersCreate) endpoint to create users with a plain text password.\n   *\n   * @param {string} userId\n   * @param {string} email\n   * @param {string} password\n   * @param {string} name\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.User<Preferences>>}\n   */\n  createArgon2User(userId, email, password, name) {\n    if (typeof userId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"userId\"');\n    }\n    if (typeof email === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"email\"');\n    }\n    if (typeof password === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"password\"');\n    }\n    const apiPath = \"/users/argon2\";\n    const payload = {};\n    if (typeof userId !== \"undefined\") {\n      payload[\"userId\"] = userId;\n    }\n    if (typeof email !== \"undefined\") {\n      payload[\"email\"] = email;\n    }\n    if (typeof password !== \"undefined\") {\n      payload[\"password\"] = password;\n    }\n    if (typeof name !== \"undefined\") {\n      payload[\"name\"] = name;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Create a new user. Password provided must be hashed with the [Bcrypt](https://en.wikipedia.org/wiki/Bcrypt) algorithm. Use the [POST /users](https://appwrite.io/docs/server/users#usersCreate) endpoint to create users with a plain text password.\n   *\n   * @param {string} userId\n   * @param {string} email\n   * @param {string} password\n   * @param {string} name\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.User<Preferences>>}\n   */\n  createBcryptUser(userId, email, password, name) {\n    if (typeof userId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"userId\"');\n    }\n    if (typeof email === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"email\"');\n    }\n    if (typeof password === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"password\"');\n    }\n    const apiPath = \"/users/bcrypt\";\n    const payload = {};\n    if (typeof userId !== \"undefined\") {\n      payload[\"userId\"] = userId;\n    }\n    if (typeof email !== \"undefined\") {\n      payload[\"email\"] = email;\n    }\n    if (typeof password !== \"undefined\") {\n      payload[\"password\"] = password;\n    }\n    if (typeof name !== \"undefined\") {\n      payload[\"name\"] = name;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Get identities for all users.\n   *\n   * @param {string[]} queries\n   * @param {string} search\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.IdentityList>}\n   */\n  listIdentities(queries, search) {\n    const apiPath = \"/users/identities\";\n    const payload = {};\n    if (typeof queries !== \"undefined\") {\n      payload[\"queries\"] = queries;\n    }\n    if (typeof search !== \"undefined\") {\n      payload[\"search\"] = search;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Delete an identity by its unique ID.\n   *\n   * @param {string} identityId\n   * @throws {AppwriteException}\n   * @returns {Promise<{}>}\n   */\n  deleteIdentity(identityId) {\n    if (typeof identityId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"identityId\"');\n    }\n    const apiPath = \"/users/identities/{identityId}\".replace(\"{identityId}\", identityId);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"delete\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Create a new user. Password provided must be hashed with the [MD5](https://en.wikipedia.org/wiki/MD5) algorithm. Use the [POST /users](https://appwrite.io/docs/server/users#usersCreate) endpoint to create users with a plain text password.\n   *\n   * @param {string} userId\n   * @param {string} email\n   * @param {string} password\n   * @param {string} name\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.User<Preferences>>}\n   */\n  createMD5User(userId, email, password, name) {\n    if (typeof userId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"userId\"');\n    }\n    if (typeof email === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"email\"');\n    }\n    if (typeof password === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"password\"');\n    }\n    const apiPath = \"/users/md5\";\n    const payload = {};\n    if (typeof userId !== \"undefined\") {\n      payload[\"userId\"] = userId;\n    }\n    if (typeof email !== \"undefined\") {\n      payload[\"email\"] = email;\n    }\n    if (typeof password !== \"undefined\") {\n      payload[\"password\"] = password;\n    }\n    if (typeof name !== \"undefined\") {\n      payload[\"name\"] = name;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Create a new user. Password provided must be hashed with the [PHPass](https://www.openwall.com/phpass/) algorithm. Use the [POST /users](https://appwrite.io/docs/server/users#usersCreate) endpoint to create users with a plain text password.\n   *\n   * @param {string} userId\n   * @param {string} email\n   * @param {string} password\n   * @param {string} name\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.User<Preferences>>}\n   */\n  createPHPassUser(userId, email, password, name) {\n    if (typeof userId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"userId\"');\n    }\n    if (typeof email === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"email\"');\n    }\n    if (typeof password === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"password\"');\n    }\n    const apiPath = \"/users/phpass\";\n    const payload = {};\n    if (typeof userId !== \"undefined\") {\n      payload[\"userId\"] = userId;\n    }\n    if (typeof email !== \"undefined\") {\n      payload[\"email\"] = email;\n    }\n    if (typeof password !== \"undefined\") {\n      payload[\"password\"] = password;\n    }\n    if (typeof name !== \"undefined\") {\n      payload[\"name\"] = name;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Create a new user. Password provided must be hashed with the [Scrypt](https://github.com/Tarsnap/scrypt) algorithm. Use the [POST /users](https://appwrite.io/docs/server/users#usersCreate) endpoint to create users with a plain text password.\n   *\n   * @param {string} userId\n   * @param {string} email\n   * @param {string} password\n   * @param {string} passwordSalt\n   * @param {number} passwordCpu\n   * @param {number} passwordMemory\n   * @param {number} passwordParallel\n   * @param {number} passwordLength\n   * @param {string} name\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.User<Preferences>>}\n   */\n  createScryptUser(userId, email, password, passwordSalt, passwordCpu, passwordMemory, passwordParallel, passwordLength, name) {\n    if (typeof userId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"userId\"');\n    }\n    if (typeof email === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"email\"');\n    }\n    if (typeof password === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"password\"');\n    }\n    if (typeof passwordSalt === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"passwordSalt\"');\n    }\n    if (typeof passwordCpu === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"passwordCpu\"');\n    }\n    if (typeof passwordMemory === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"passwordMemory\"');\n    }\n    if (typeof passwordParallel === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"passwordParallel\"');\n    }\n    if (typeof passwordLength === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"passwordLength\"');\n    }\n    const apiPath = \"/users/scrypt\";\n    const payload = {};\n    if (typeof userId !== \"undefined\") {\n      payload[\"userId\"] = userId;\n    }\n    if (typeof email !== \"undefined\") {\n      payload[\"email\"] = email;\n    }\n    if (typeof password !== \"undefined\") {\n      payload[\"password\"] = password;\n    }\n    if (typeof passwordSalt !== \"undefined\") {\n      payload[\"passwordSalt\"] = passwordSalt;\n    }\n    if (typeof passwordCpu !== \"undefined\") {\n      payload[\"passwordCpu\"] = passwordCpu;\n    }\n    if (typeof passwordMemory !== \"undefined\") {\n      payload[\"passwordMemory\"] = passwordMemory;\n    }\n    if (typeof passwordParallel !== \"undefined\") {\n      payload[\"passwordParallel\"] = passwordParallel;\n    }\n    if (typeof passwordLength !== \"undefined\") {\n      payload[\"passwordLength\"] = passwordLength;\n    }\n    if (typeof name !== \"undefined\") {\n      payload[\"name\"] = name;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Create a new user. Password provided must be hashed with the [Scrypt Modified](https://gist.github.com/Meldiron/eecf84a0225eccb5a378d45bb27462cc) algorithm. Use the [POST /users](https://appwrite.io/docs/server/users#usersCreate) endpoint to create users with a plain text password.\n   *\n   * @param {string} userId\n   * @param {string} email\n   * @param {string} password\n   * @param {string} passwordSalt\n   * @param {string} passwordSaltSeparator\n   * @param {string} passwordSignerKey\n   * @param {string} name\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.User<Preferences>>}\n   */\n  createScryptModifiedUser(userId, email, password, passwordSalt, passwordSaltSeparator, passwordSignerKey, name) {\n    if (typeof userId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"userId\"');\n    }\n    if (typeof email === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"email\"');\n    }\n    if (typeof password === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"password\"');\n    }\n    if (typeof passwordSalt === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"passwordSalt\"');\n    }\n    if (typeof passwordSaltSeparator === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"passwordSaltSeparator\"');\n    }\n    if (typeof passwordSignerKey === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"passwordSignerKey\"');\n    }\n    const apiPath = \"/users/scrypt-modified\";\n    const payload = {};\n    if (typeof userId !== \"undefined\") {\n      payload[\"userId\"] = userId;\n    }\n    if (typeof email !== \"undefined\") {\n      payload[\"email\"] = email;\n    }\n    if (typeof password !== \"undefined\") {\n      payload[\"password\"] = password;\n    }\n    if (typeof passwordSalt !== \"undefined\") {\n      payload[\"passwordSalt\"] = passwordSalt;\n    }\n    if (typeof passwordSaltSeparator !== \"undefined\") {\n      payload[\"passwordSaltSeparator\"] = passwordSaltSeparator;\n    }\n    if (typeof passwordSignerKey !== \"undefined\") {\n      payload[\"passwordSignerKey\"] = passwordSignerKey;\n    }\n    if (typeof name !== \"undefined\") {\n      payload[\"name\"] = name;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Create a new user. Password provided must be hashed with the [SHA](https://en.wikipedia.org/wiki/Secure_Hash_Algorithm) algorithm. Use the [POST /users](https://appwrite.io/docs/server/users#usersCreate) endpoint to create users with a plain text password.\n   *\n   * @param {string} userId\n   * @param {string} email\n   * @param {string} password\n   * @param {PasswordHash} passwordVersion\n   * @param {string} name\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.User<Preferences>>}\n   */\n  createSHAUser(userId, email, password, passwordVersion, name) {\n    if (typeof userId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"userId\"');\n    }\n    if (typeof email === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"email\"');\n    }\n    if (typeof password === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"password\"');\n    }\n    const apiPath = \"/users/sha\";\n    const payload = {};\n    if (typeof userId !== \"undefined\") {\n      payload[\"userId\"] = userId;\n    }\n    if (typeof email !== \"undefined\") {\n      payload[\"email\"] = email;\n    }\n    if (typeof password !== \"undefined\") {\n      payload[\"password\"] = password;\n    }\n    if (typeof passwordVersion !== \"undefined\") {\n      payload[\"passwordVersion\"] = passwordVersion;\n    }\n    if (typeof name !== \"undefined\") {\n      payload[\"name\"] = name;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Get a user by its unique ID.\n   *\n   * @param {string} userId\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.User<Preferences>>}\n   */\n  get(userId) {\n    if (typeof userId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"userId\"');\n    }\n    const apiPath = \"/users/{userId}\".replace(\"{userId}\", userId);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Delete a user by its unique ID, thereby releasing it&#039;s ID. Since ID is released and can be reused, all user-related resources like documents or storage files should be deleted before user deletion. If you want to keep ID reserved, use the [updateStatus](https://appwrite.io/docs/server/users#usersUpdateStatus) endpoint instead.\n   *\n   * @param {string} userId\n   * @throws {AppwriteException}\n   * @returns {Promise<{}>}\n   */\n  delete(userId) {\n    if (typeof userId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"userId\"');\n    }\n    const apiPath = \"/users/{userId}\".replace(\"{userId}\", userId);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"delete\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Update the user email by its unique ID.\n   *\n   * @param {string} userId\n   * @param {string} email\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.User<Preferences>>}\n   */\n  updateEmail(userId, email) {\n    if (typeof userId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"userId\"');\n    }\n    if (typeof email === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"email\"');\n    }\n    const apiPath = \"/users/{userId}/email\".replace(\"{userId}\", userId);\n    const payload = {};\n    if (typeof email !== \"undefined\") {\n      payload[\"email\"] = email;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"patch\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Use this endpoint to create a JSON Web Token for user by its unique ID. You can use the resulting JWT to authenticate on behalf of the user. The JWT secret will become invalid if the session it uses gets deleted.\n   *\n   * @param {string} userId\n   * @param {string} sessionId\n   * @param {number} duration\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Jwt>}\n   */\n  createJWT(userId, sessionId, duration) {\n    if (typeof userId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"userId\"');\n    }\n    const apiPath = \"/users/{userId}/jwts\".replace(\"{userId}\", userId);\n    const payload = {};\n    if (typeof sessionId !== \"undefined\") {\n      payload[\"sessionId\"] = sessionId;\n    }\n    if (typeof duration !== \"undefined\") {\n      payload[\"duration\"] = duration;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n       * Update the user labels by its unique ID. \n  \n  Labels can be used to grant access to resources. While teams are a way for user&#039;s to share access to a resource, labels can be defined by the developer to grant access without an invitation. See the [Permissions docs](https://appwrite.io/docs/permissions) for more info.\n       *\n       * @param {string} userId\n       * @param {string[]} labels\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.User<Preferences>>}\n       */\n  updateLabels(userId, labels) {\n    if (typeof userId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"userId\"');\n    }\n    if (typeof labels === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"labels\"');\n    }\n    const apiPath = \"/users/{userId}/labels\".replace(\"{userId}\", userId);\n    const payload = {};\n    if (typeof labels !== \"undefined\") {\n      payload[\"labels\"] = labels;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"put\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Get the user activity logs list by its unique ID.\n   *\n   * @param {string} userId\n   * @param {string[]} queries\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.LogList>}\n   */\n  listLogs(userId, queries) {\n    if (typeof userId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"userId\"');\n    }\n    const apiPath = \"/users/{userId}/logs\".replace(\"{userId}\", userId);\n    const payload = {};\n    if (typeof queries !== \"undefined\") {\n      payload[\"queries\"] = queries;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Get the user membership list by its unique ID.\n   *\n   * @param {string} userId\n   * @param {string[]} queries\n   * @param {string} search\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.MembershipList>}\n   */\n  listMemberships(userId, queries, search) {\n    if (typeof userId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"userId\"');\n    }\n    const apiPath = \"/users/{userId}/memberships\".replace(\"{userId}\", userId);\n    const payload = {};\n    if (typeof queries !== \"undefined\") {\n      payload[\"queries\"] = queries;\n    }\n    if (typeof search !== \"undefined\") {\n      payload[\"search\"] = search;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Enable or disable MFA on a user account.\n   *\n   * @param {string} userId\n   * @param {boolean} mfa\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.User<Preferences>>}\n   */\n  updateMfa(userId, mfa) {\n    if (typeof userId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"userId\"');\n    }\n    if (typeof mfa === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"mfa\"');\n    }\n    const apiPath = \"/users/{userId}/mfa\".replace(\"{userId}\", userId);\n    const payload = {};\n    if (typeof mfa !== \"undefined\") {\n      payload[\"mfa\"] = mfa;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"patch\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Delete an authenticator app.\n   *\n   * @param {string} userId\n   * @param {AuthenticatorType} type\n   * @throws {AppwriteException}\n   * @returns {Promise<{}>}\n   */\n  deleteMfaAuthenticator(userId, type) {\n    if (typeof userId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"userId\"');\n    }\n    if (typeof type === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"type\"');\n    }\n    const apiPath = \"/users/{userId}/mfa/authenticators/{type}\".replace(\"{userId}\", userId).replace(\"{type}\", type);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"delete\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * List the factors available on the account to be used as a MFA challange.\n   *\n   * @param {string} userId\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.MfaFactors>}\n   */\n  listMfaFactors(userId) {\n    if (typeof userId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"userId\"');\n    }\n    const apiPath = \"/users/{userId}/mfa/factors\".replace(\"{userId}\", userId);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Get recovery codes that can be used as backup for MFA flow by User ID. Before getting codes, they must be generated using [createMfaRecoveryCodes](/docs/references/cloud/client-web/account#createMfaRecoveryCodes) method.\n   *\n   * @param {string} userId\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.MfaRecoveryCodes>}\n   */\n  getMfaRecoveryCodes(userId) {\n    if (typeof userId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"userId\"');\n    }\n    const apiPath = \"/users/{userId}/mfa/recovery-codes\".replace(\"{userId}\", userId);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Regenerate recovery codes that can be used as backup for MFA flow by User ID. Before regenerating codes, they must be first generated using [createMfaRecoveryCodes](/docs/references/cloud/client-web/account#createMfaRecoveryCodes) method.\n   *\n   * @param {string} userId\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.MfaRecoveryCodes>}\n   */\n  updateMfaRecoveryCodes(userId) {\n    if (typeof userId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"userId\"');\n    }\n    const apiPath = \"/users/{userId}/mfa/recovery-codes\".replace(\"{userId}\", userId);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"put\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Generate recovery codes used as backup for MFA flow for User ID. Recovery codes can be used as a MFA verification type in [createMfaChallenge](/docs/references/cloud/client-web/account#createMfaChallenge) method by client SDK.\n   *\n   * @param {string} userId\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.MfaRecoveryCodes>}\n   */\n  createMfaRecoveryCodes(userId) {\n    if (typeof userId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"userId\"');\n    }\n    const apiPath = \"/users/{userId}/mfa/recovery-codes\".replace(\"{userId}\", userId);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"patch\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Update the user name by its unique ID.\n   *\n   * @param {string} userId\n   * @param {string} name\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.User<Preferences>>}\n   */\n  updateName(userId, name) {\n    if (typeof userId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"userId\"');\n    }\n    if (typeof name === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"name\"');\n    }\n    const apiPath = \"/users/{userId}/name\".replace(\"{userId}\", userId);\n    const payload = {};\n    if (typeof name !== \"undefined\") {\n      payload[\"name\"] = name;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"patch\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Update the user password by its unique ID.\n   *\n   * @param {string} userId\n   * @param {string} password\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.User<Preferences>>}\n   */\n  updatePassword(userId, password) {\n    if (typeof userId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"userId\"');\n    }\n    if (typeof password === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"password\"');\n    }\n    const apiPath = \"/users/{userId}/password\".replace(\"{userId}\", userId);\n    const payload = {};\n    if (typeof password !== \"undefined\") {\n      payload[\"password\"] = password;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"patch\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Update the user phone by its unique ID.\n   *\n   * @param {string} userId\n   * @param {string} number\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.User<Preferences>>}\n   */\n  updatePhone(userId, number) {\n    if (typeof userId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"userId\"');\n    }\n    if (typeof number === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"number\"');\n    }\n    const apiPath = \"/users/{userId}/phone\".replace(\"{userId}\", userId);\n    const payload = {};\n    if (typeof number !== \"undefined\") {\n      payload[\"number\"] = number;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"patch\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Get the user preferences by its unique ID.\n   *\n   * @param {string} userId\n   * @throws {AppwriteException}\n   * @returns {Promise<Preferences>}\n   */\n  getPrefs(userId) {\n    if (typeof userId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"userId\"');\n    }\n    const apiPath = \"/users/{userId}/prefs\".replace(\"{userId}\", userId);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Update the user preferences by its unique ID. The object you pass is stored as is, and replaces any previous value. The maximum allowed prefs size is 64kB and throws error if exceeded.\n   *\n   * @param {string} userId\n   * @param {object} prefs\n   * @throws {AppwriteException}\n   * @returns {Promise<Preferences>}\n   */\n  updatePrefs(userId, prefs) {\n    if (typeof userId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"userId\"');\n    }\n    if (typeof prefs === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"prefs\"');\n    }\n    const apiPath = \"/users/{userId}/prefs\".replace(\"{userId}\", userId);\n    const payload = {};\n    if (typeof prefs !== \"undefined\") {\n      payload[\"prefs\"] = prefs;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"patch\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Get the user sessions list by its unique ID.\n   *\n   * @param {string} userId\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.SessionList>}\n   */\n  listSessions(userId) {\n    if (typeof userId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"userId\"');\n    }\n    const apiPath = \"/users/{userId}/sessions\".replace(\"{userId}\", userId);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n       * Creates a session for a user. Returns an immediately usable session object.\n  \n  If you want to generate a token for a custom authentication flow, use the [POST /users/{userId}/tokens](https://appwrite.io/docs/server/users#createToken) endpoint.\n       *\n       * @param {string} userId\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.Session>}\n       */\n  createSession(userId) {\n    if (typeof userId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"userId\"');\n    }\n    const apiPath = \"/users/{userId}/sessions\".replace(\"{userId}\", userId);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Delete all user&#039;s sessions by using the user&#039;s unique ID.\n   *\n   * @param {string} userId\n   * @throws {AppwriteException}\n   * @returns {Promise<{}>}\n   */\n  deleteSessions(userId) {\n    if (typeof userId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"userId\"');\n    }\n    const apiPath = \"/users/{userId}/sessions\".replace(\"{userId}\", userId);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"delete\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Delete a user sessions by its unique ID.\n   *\n   * @param {string} userId\n   * @param {string} sessionId\n   * @throws {AppwriteException}\n   * @returns {Promise<{}>}\n   */\n  deleteSession(userId, sessionId) {\n    if (typeof userId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"userId\"');\n    }\n    if (typeof sessionId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"sessionId\"');\n    }\n    const apiPath = \"/users/{userId}/sessions/{sessionId}\".replace(\"{userId}\", userId).replace(\"{sessionId}\", sessionId);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"delete\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Update the user status by its unique ID. Use this endpoint as an alternative to deleting a user if you want to keep user&#039;s ID reserved.\n   *\n   * @param {string} userId\n   * @param {boolean} status\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.User<Preferences>>}\n   */\n  updateStatus(userId, status) {\n    if (typeof userId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"userId\"');\n    }\n    if (typeof status === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"status\"');\n    }\n    const apiPath = \"/users/{userId}/status\".replace(\"{userId}\", userId);\n    const payload = {};\n    if (typeof status !== \"undefined\") {\n      payload[\"status\"] = status;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"patch\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * List the messaging targets that are associated with a user.\n   *\n   * @param {string} userId\n   * @param {string[]} queries\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.TargetList>}\n   */\n  listTargets(userId, queries) {\n    if (typeof userId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"userId\"');\n    }\n    const apiPath = \"/users/{userId}/targets\".replace(\"{userId}\", userId);\n    const payload = {};\n    if (typeof queries !== \"undefined\") {\n      payload[\"queries\"] = queries;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Create a messaging target.\n   *\n   * @param {string} userId\n   * @param {string} targetId\n   * @param {MessagingProviderType} providerType\n   * @param {string} identifier\n   * @param {string} providerId\n   * @param {string} name\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Target>}\n   */\n  createTarget(userId, targetId, providerType, identifier, providerId, name) {\n    if (typeof userId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"userId\"');\n    }\n    if (typeof targetId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"targetId\"');\n    }\n    if (typeof providerType === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"providerType\"');\n    }\n    if (typeof identifier === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"identifier\"');\n    }\n    const apiPath = \"/users/{userId}/targets\".replace(\"{userId}\", userId);\n    const payload = {};\n    if (typeof targetId !== \"undefined\") {\n      payload[\"targetId\"] = targetId;\n    }\n    if (typeof providerType !== \"undefined\") {\n      payload[\"providerType\"] = providerType;\n    }\n    if (typeof identifier !== \"undefined\") {\n      payload[\"identifier\"] = identifier;\n    }\n    if (typeof providerId !== \"undefined\") {\n      payload[\"providerId\"] = providerId;\n    }\n    if (typeof name !== \"undefined\") {\n      payload[\"name\"] = name;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Get a user&#039;s push notification target by ID.\n   *\n   * @param {string} userId\n   * @param {string} targetId\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Target>}\n   */\n  getTarget(userId, targetId) {\n    if (typeof userId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"userId\"');\n    }\n    if (typeof targetId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"targetId\"');\n    }\n    const apiPath = \"/users/{userId}/targets/{targetId}\".replace(\"{userId}\", userId).replace(\"{targetId}\", targetId);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {};\n    return this.client.call(\n      \"get\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Update a messaging target.\n   *\n   * @param {string} userId\n   * @param {string} targetId\n   * @param {string} identifier\n   * @param {string} providerId\n   * @param {string} name\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Target>}\n   */\n  updateTarget(userId, targetId, identifier, providerId, name) {\n    if (typeof userId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"userId\"');\n    }\n    if (typeof targetId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"targetId\"');\n    }\n    const apiPath = \"/users/{userId}/targets/{targetId}\".replace(\"{userId}\", userId).replace(\"{targetId}\", targetId);\n    const payload = {};\n    if (typeof identifier !== \"undefined\") {\n      payload[\"identifier\"] = identifier;\n    }\n    if (typeof providerId !== \"undefined\") {\n      payload[\"providerId\"] = providerId;\n    }\n    if (typeof name !== \"undefined\") {\n      payload[\"name\"] = name;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"patch\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Delete a messaging target.\n   *\n   * @param {string} userId\n   * @param {string} targetId\n   * @throws {AppwriteException}\n   * @returns {Promise<{}>}\n   */\n  deleteTarget(userId, targetId) {\n    if (typeof userId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"userId\"');\n    }\n    if (typeof targetId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"targetId\"');\n    }\n    const apiPath = \"/users/{userId}/targets/{targetId}\".replace(\"{userId}\", userId).replace(\"{targetId}\", targetId);\n    const payload = {};\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"delete\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n       * Returns a token with a secret key for creating a session. Use the user ID and secret and submit a request to the [PUT /account/sessions/token](https://appwrite.io/docs/references/cloud/client-web/account#createSession) endpoint to complete the login process.\n  \n       *\n       * @param {string} userId\n       * @param {number} length\n       * @param {number} expire\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.Token>}\n       */\n  createToken(userId, length, expire) {\n    if (typeof userId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"userId\"');\n    }\n    const apiPath = \"/users/{userId}/tokens\".replace(\"{userId}\", userId);\n    const payload = {};\n    if (typeof length !== \"undefined\") {\n      payload[\"length\"] = length;\n    }\n    if (typeof expire !== \"undefined\") {\n      payload[\"expire\"] = expire;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"post\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Update the user email verification status by its unique ID.\n   *\n   * @param {string} userId\n   * @param {boolean} emailVerification\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.User<Preferences>>}\n   */\n  updateEmailVerification(userId, emailVerification) {\n    if (typeof userId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"userId\"');\n    }\n    if (typeof emailVerification === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"emailVerification\"');\n    }\n    const apiPath = \"/users/{userId}/verification\".replace(\"{userId}\", userId);\n    const payload = {};\n    if (typeof emailVerification !== \"undefined\") {\n      payload[\"emailVerification\"] = emailVerification;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"patch\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n  /**\n   * Update the user phone verification status by its unique ID.\n   *\n   * @param {string} userId\n   * @param {boolean} phoneVerification\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.User<Preferences>>}\n   */\n  updatePhoneVerification(userId, phoneVerification) {\n    if (typeof userId === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"userId\"');\n    }\n    if (typeof phoneVerification === \"undefined\") {\n      throw new _client_mjs__WEBPACK_IMPORTED_MODULE_0__.AppwriteException('Missing required parameter: \"phoneVerification\"');\n    }\n    const apiPath = \"/users/{userId}/verification/phone\".replace(\"{userId}\", userId);\n    const payload = {};\n    if (typeof phoneVerification !== \"undefined\") {\n      payload[\"phoneVerification\"] = phoneVerification;\n    }\n    const uri = new URL(this.client.config.endpoint + apiPath);\n    const apiHeaders = {\n      \"content-type\": \"application/json\"\n    };\n    return this.client.call(\n      \"patch\",\n      uri,\n      apiHeaders,\n      payload\n    );\n  }\n};\n\n\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=users.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-appwrite/dist/services/users.mjs\n");

/***/ })

};
;